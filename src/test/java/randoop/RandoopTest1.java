package randoop;

import junit.framework.*;

public class RandoopTest1 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test1");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    boolean var9 = var6.isClosed();
    java.util.Map var10 = var6.getHeaderMap();
    java.util.Map var11 = var6.getHeaderMap();
    boolean var12 = var6.isClosed();
    var6.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test2");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > SkipHeaderRecord:trueDelimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false Header:[]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test3");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=< > RecordSeparator=<4> SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test4");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    java.lang.String var14 = var13.toString();
    org.apache.commons.csv.CSVFormat var16 = var13.withNullString("");
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var20 = var18.withQuote('#');
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    boolean var25 = var22.isCommentMarkerSet();
    boolean var26 = var22.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var29 = var28.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var31 = var28.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var33 = var28.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var34 = var33.withIgnoreSurroundingSpaces();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.String var36 = var22.format(var35);
    java.lang.String var37 = var18.format(var35);
    org.apache.commons.csv.CSVFormat var38 = var9.withHeaderComments(var35);
    org.apache.commons.csv.CSVFormat var40 = var9.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var41 = var9.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var14.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var36.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var37.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test5");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    boolean var12 = var11.isCommentMarkerSet();
    boolean var13 = var11.isNullStringSet();
    boolean var14 = var11.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test6");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    var6.close();
    long var9 = var6.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test7");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    java.util.Map var9 = var6.getHeaderMap();
    long var10 = var6.getRecordNumber();
    var6.close();
    var6.close();
    long var13 = var6.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test8");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var7.withIgnoreSurroundingSpaces(true);
    java.lang.String[] var12 = var7.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test9");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.getIgnoreEmptyLines();
    java.lang.Character var7 = var3.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var8 = var3.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test10");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var14 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.String var18 = var17.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var21 = var20.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var23 = var20.withNullString("");
    org.apache.commons.csv.CSVFormat var24 = var20.withIgnoreEmptyLines();
    java.lang.String var25 = var24.toString();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    boolean var29 = var27.isNullStringSet();
    java.lang.String[] var31 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var32 = var27.withHeader(var31);
    org.apache.commons.csv.CSVFormat var33 = var24.withHeader(var31);
    java.lang.String var34 = var17.format((java.lang.Object[])var31);
    org.apache.commons.csv.CSVFormat var35 = var10.withHeader(var31);
    boolean var36 = var35.isEscapeCharacterSet();
    boolean var37 = var35.isEscapeCharacterSet();
    java.lang.String var38 = var35.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var25.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false Header:[]"+ "'", var38.equals("Delimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false Header:[]"));

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test11");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var12 = var11.getQuoteMode();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > QuoteChar=<a> SkipHeaderRecord:false", var11);
    boolean var14 = var13.isClosed();
    long var15 = var13.getCurrentLineNumber();
    java.util.Iterator var16 = var13.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test12");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test13");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    boolean var14 = var12.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var12.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test14");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    java.lang.String var5 = var4.toString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("");
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var15 = var13.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var18 = var17.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = var17.withCommentMarker('#');
    boolean var21 = var20.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord();
    boolean var26 = var23.isCommentMarkerSet();
    boolean var27 = var23.getIgnoreHeaderCase();
    java.lang.String[] var29 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var30 = var23.withHeader(var29);
    org.apache.commons.csv.CSVFormat var31 = var20.withHeaderComments((java.lang.Object[])var29);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var34 = var33.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var36 = var33.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var38 = var33.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var41 = var40.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var43 = var40.withNullString("");
    org.apache.commons.csv.CSVFormat var44 = var40.withIgnoreEmptyLines();
    java.lang.String var45 = var44.toString();
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var48 = var47.withAllowMissingColumnNames();
    boolean var49 = var47.isNullStringSet();
    java.lang.String[] var51 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var52 = var47.withHeader(var51);
    org.apache.commons.csv.CSVFormat var53 = var44.withHeader(var51);
    org.apache.commons.csv.CSVFormat var54 = var33.withHeader(var51);
    java.lang.String var55 = var54.toString();
    java.lang.String[] var56 = var54.getHeader();
    org.apache.commons.csv.CSVFormat var57 = var31.withHeader(var56);
    org.apache.commons.csv.CSVFormat var58 = var15.withHeader(var56);
    org.apache.commons.csv.CSVParser var59 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<> SkipHeaderRecord:true", var58);
    boolean var60 = var58.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var45.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var55.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test15");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var13 = var6.withQuote('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test16");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var1.withRecordSeparator("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker((java.lang.Character)'#');
    boolean var11 = var10.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test17");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    boolean var9 = var5.equals((java.lang.Object)10.0f);
    java.lang.Character var10 = var5.getEscapeCharacter();
    java.lang.String var11 = var5.toString();
    boolean var12 = var5.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var11.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test18");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withQuote((java.lang.Character)'4');
    boolean var8 = var7.isQuoteCharacterSet();
    boolean var9 = var7.getAllowMissingColumnNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var11 = var7.withEscape(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test19");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withEscape('a');
    java.lang.String[] var9 = var8.getHeaderComments();
    org.apache.commons.csv.CSVFormat var11 = var8.withIgnoreHeaderCase(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test20");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var3 = var2.getDelimiter();
    boolean var4 = var2.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("hi!", var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var7 = var2.withCommentMarker(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test21");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getRecordNumber();
    java.util.Iterator var8 = var6.iterator();
    java.util.Map var9 = var6.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test22");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var16 = var14.withQuote((java.lang.Character)'#');
    char var17 = var14.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == ' ');

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test23");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.Character var4 = var1.getCommentMarker();
    boolean var5 = var1.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test24");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withRecordSeparator("hi!");
    boolean var6 = var5.isCommentMarkerSet();
    java.lang.String[] var7 = var5.getHeader();
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false", var5);
    java.util.Map var9 = var8.getHeaderMap();
    long var10 = var8.getRecordNumber();
    var8.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test25");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.isNullStringSet();
    java.lang.Character var7 = var3.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var8 = var3.withAllowMissingColumnNames();
    boolean var9 = var3.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var11 = var3.withRecordSeparator("ALL MINIMAL NON_NUMERIC NONEDelimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var13 = var3.withQuote((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test26");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    boolean var5 = var2.isCommentMarkerSet();
    java.lang.Character var6 = var2.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var7 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    java.lang.String var12 = var11.toString();
    org.apache.commons.csv.CSVFormat var14 = var11.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var11.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var18 = var11.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var19 = var7.equals((java.lang.Object)var18);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var21 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDF#", var18);
    java.util.Map var22 = var21.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var12.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test27");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=< > RecordSeparator=<#> EmptyLines:ignored SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test28");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var10 = var1.withIgnoreEmptyLines(true);
    java.lang.String[] var11 = var1.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test29");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    boolean var14 = var13.isNullStringSet();
    java.lang.String var15 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var17 = var13.withQuote((java.lang.Character)'#');
    java.lang.Character var18 = var13.getQuoteCharacter();
    boolean var19 = var13.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var15.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test30");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.Character var11 = var10.getCommentMarker();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var14 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    boolean var18 = var15.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var15.withEscape('#');
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    boolean var25 = var22.isCommentMarkerSet();
    boolean var26 = var22.getIgnoreHeaderCase();
    java.lang.String[] var28 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var29 = var22.withHeader(var28);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord();
    boolean var34 = var31.isCommentMarkerSet();
    boolean var35 = var31.getIgnoreHeaderCase();
    java.lang.String[] var37 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var38 = var31.withHeader(var37);
    org.apache.commons.csv.CSVFormat var39 = var22.withHeader(var37);
    org.apache.commons.csv.CSVFormat var41 = var39.withIgnoreSurroundingSpaces(true);
    java.lang.Character var42 = var39.getCommentMarker();
    org.apache.commons.csv.CSVFormat var43 = var39.withIgnoreEmptyLines();
    java.lang.String[] var44 = var39.getHeader();
    java.lang.String var45 = var15.format((java.lang.Object[])var44);
    org.apache.commons.csv.CSVFormat var46 = var10.withHeader(var44);
    java.lang.String var47 = var5.format((java.lang.Object[])var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var45.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var47.equals("Delimiter=< > SkipHeaderRecord:true"));

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test31");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    boolean var6 = var2.isNullStringSet();
    org.apache.commons.csv.CSVParser var7 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> SkipHeaderRecord:false", var2);
    org.apache.commons.csv.CSVFormat var9 = var2.withAllowMissingColumnNames(true);
    java.lang.String[] var10 = var9.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test32");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var6.withNullString("Delimiter=< > CommentStart=<a> SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test33");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    java.lang.Character var3 = var1.getCommentMarker();
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    boolean var6 = var1.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test34");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getRecordNumber();
    java.util.Iterator var8 = var6.iterator();
    var6.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var10 = var6.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test35");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    java.lang.String[] var8 = var5.getHeaderComments();
    char var9 = var5.getDelimiter();
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var11.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test36");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord();
    boolean var18 = var15.isCommentMarkerSet();
    boolean var19 = var15.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var22 = var21.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var24 = var21.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var26 = var21.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var27 = var26.withIgnoreSurroundingSpaces();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.String var29 = var15.format(var28);
    java.lang.String[] var31 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var32 = var15.withHeader(var31);
    org.apache.commons.csv.CSVFormat var33 = var11.withHeader(var31);
    org.apache.commons.csv.CSVParser var34 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:false Header:[]", var33);
    char var35 = var33.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var29.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == ' ');

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test37");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var22 = var20.withEscape('a');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var24 = var20.withCommentMarker((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test38");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    boolean var5 = var4.isNullStringSet();
    boolean var6 = var4.getAllowMissingColumnNames();
    java.lang.String var7 = var4.getRecordSeparator();
    char var8 = var4.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == ' ');

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test39");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var5.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var14 = var5.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var16 = var14.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var17 = var16.withIgnoreEmptyLines();
    java.lang.Character var18 = var16.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test40");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(true);
    char var10 = var6.getDelimiter();
    org.apache.commons.csv.CSVFormat var12 = var6.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var14 = var12.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var16 = var14.withQuote((java.lang.Character)' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test41");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    org.apache.commons.csv.CSVFormat var3 = var1.withIgnoreSurroundingSpaces();
    java.lang.Character var4 = var3.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test42");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    boolean var5 = var4.isCommentMarkerSet();
    java.lang.Character var6 = var4.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(true);
    boolean var9 = var8.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    java.lang.String var14 = var13.toString();
    org.apache.commons.csv.CSVFormat var16 = var13.withNullString("");
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var21 = var20.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord();
    boolean var23 = var20.isCommentMarkerSet();
    boolean var24 = var20.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var27 = var26.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var29 = var26.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var31 = var26.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var32 = var31.withIgnoreSurroundingSpaces();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.String var34 = var20.format(var33);
    java.lang.String[] var36 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var37 = var20.withHeader(var36);
    org.apache.commons.csv.CSVFormat var38 = var16.withHeader(var36);
    java.lang.String var39 = var8.format((java.lang.Object[])var36);
    org.apache.commons.csv.CSVFormat var40 = var8.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var41 = var40.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var42 = var41.withAllowMissingColumnNames();
    boolean var43 = var41.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var14.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var34.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var39.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test43");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getRecordNumber();
    java.util.List var8 = var6.getRecords();
    java.util.Map var9 = var6.getHeaderMap();
    var6.close();
    java.util.Iterator var11 = var6.iterator();
    long var12 = var6.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test44");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var3.withEscape('#');
    org.apache.commons.csv.CSVFormat var10 = var3.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var18 = var16.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord(false);
    char var21 = var18.getDelimiter();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var24 = var23.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var26 = var23.withRecordSeparator("hi!");
    boolean var27 = var26.isCommentMarkerSet();
    java.lang.Character var28 = var26.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var30 = var26.withAllowMissingColumnNames(true);
    boolean var31 = var30.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord();
    java.lang.String var36 = var35.toString();
    org.apache.commons.csv.CSVFormat var38 = var35.withNullString("");
    org.apache.commons.csv.CSVFormat var40 = var38.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var43 = var42.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var44 = var42.withSkipHeaderRecord();
    boolean var45 = var42.isCommentMarkerSet();
    boolean var46 = var42.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var49 = var48.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var51 = var48.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var53 = var48.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var54 = var53.withIgnoreSurroundingSpaces();
    java.lang.Object[] var55 = new java.lang.Object[] { var53};
    java.lang.String var56 = var42.format(var55);
    java.lang.String[] var58 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var59 = var42.withHeader(var58);
    org.apache.commons.csv.CSVFormat var60 = var38.withHeader(var58);
    java.lang.String var61 = var30.format((java.lang.Object[])var58);
    java.lang.String var62 = var18.format((java.lang.Object[])var58);
    org.apache.commons.csv.CSVFormat var63 = var10.withHeaderComments((java.lang.Object[])var58);
    boolean var64 = var10.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var36.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var56.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var61.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var62.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test45");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withRecordSeparator('4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test46");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test47");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false Header:[]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test48");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreHeaderCase(false);
    java.lang.String var10 = var7.getRecordSeparator();
    org.apache.commons.csv.QuoteMode var11 = var7.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test49");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var16 = var14.withIgnoreEmptyLines(true);
    java.lang.Character var17 = var16.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test50");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var8 = var1.withQuote((java.lang.Character)'4');
    boolean var9 = var8.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = var8.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var13 = var8.withIgnoreEmptyLines(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var15 = var8.withCommentMarker((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test51");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var6 = var4.withDelimiter('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test52");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    java.lang.String var12 = var11.toString();
    java.lang.String[] var13 = var11.getHeader();
    org.apache.commons.csv.CSVFormat var14 = var11.withAllowMissingColumnNames();
    java.lang.String[] var15 = var14.getHeaderComments();
    org.apache.commons.csv.CSVFormat var17 = var14.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var20 = var19.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord();
    java.lang.String var22 = var21.toString();
    org.apache.commons.csv.CSVFormat var24 = var21.withNullString("");
    org.apache.commons.csv.CSVFormat var26 = var24.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var28 = var26.withQuote('#');
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var32 = var30.withSkipHeaderRecord();
    boolean var33 = var30.isCommentMarkerSet();
    boolean var34 = var30.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var37 = var36.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var39 = var36.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var41 = var36.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var42 = var41.withIgnoreSurroundingSpaces();
    java.lang.Object[] var43 = new java.lang.Object[] { var41};
    java.lang.String var44 = var30.format(var43);
    java.lang.String var45 = var26.format(var43);
    org.apache.commons.csv.CSVFormat var46 = var17.withHeaderComments(var43);
    java.lang.String var47 = var7.format(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var12.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var22.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var44.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var45.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var47.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test53");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = var8.withQuote('#');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    boolean var16 = var12.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var19 = var18.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = var18.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var23 = var18.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var24 = var23.withIgnoreSurroundingSpaces();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.String var26 = var12.format(var25);
    java.lang.String var27 = var8.format(var25);
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var30 = var29.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord();
    boolean var32 = var29.isCommentMarkerSet();
    boolean var33 = var29.getIgnoreHeaderCase();
    java.lang.String[] var35 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var36 = var29.withHeader(var35);
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var39 = var38.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var40 = var38.withSkipHeaderRecord();
    boolean var41 = var38.isCommentMarkerSet();
    boolean var42 = var38.getIgnoreHeaderCase();
    java.lang.String[] var44 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var45 = var38.withHeader(var44);
    org.apache.commons.csv.CSVFormat var46 = var29.withHeader(var44);
    org.apache.commons.csv.CSVFormat var48 = var46.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var50 = var46.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var53 = var52.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var54 = var52.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var56 = var54.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var58 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var59 = var58.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var60 = var58.withSkipHeaderRecord();
    java.lang.String var61 = var60.toString();
    org.apache.commons.csv.CSVFormat var63 = var60.withNullString("");
    org.apache.commons.csv.CSVFormat var65 = var60.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var68 = var67.withAllowMissingColumnNames();
    boolean var69 = var67.isNullStringSet();
    java.lang.String[] var71 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var72 = var67.withHeader(var71);
    java.lang.String var73 = var65.format((java.lang.Object[])var71);
    java.lang.String var74 = var56.format((java.lang.Object[])var71);
    org.apache.commons.csv.CSVFormat var75 = var46.withHeaderComments((java.lang.Object[])var71);
    org.apache.commons.csv.CSVFormat var76 = var8.withHeaderComments((java.lang.Object[])var71);
    boolean var77 = var76.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var26.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var27.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var61.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + ""+ "'", var73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + ""+ "'", var74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test54");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > CommentStart=<a> SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test55");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=< > CommentStart=<a> SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test56");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var10 = var6.withAllowMissingColumnNames();
    boolean var11 = var10.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test57");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var9 = var7.withNullString("ALL MINIMAL NON_NUMERIC NONE");
    java.lang.String[] var10 = var9.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test58");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var10 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var12 = var1.withEscape('4');
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test59");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    java.lang.String var5 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var7 = var1.withSkipHeaderRecord(true);
    java.lang.String[] var8 = var7.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test60");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var8 = var5.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var11 = var10.isCommentMarkerSet();
    boolean var12 = var10.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var10.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var16 = var14.withDelimiter('a');
    boolean var17 = var16.isNullStringSet();
    org.apache.commons.csv.CSVFormat var19 = var16.withNullString("Delimiter=< > RecordSeparator=<4> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var21 = var16.withRecordSeparator("ALL MINIMAL NON_NUMERIC NONEDelimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var24 = var23.getDelimiter();
    java.lang.String var25 = var23.getNullString();
    boolean var26 = var23.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var27 = var23.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var29 = var23.withNullString("");
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord();
    boolean var34 = var31.isCommentMarkerSet();
    boolean var35 = var31.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var38 = var37.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var40 = var37.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var42 = var37.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var43 = var42.withIgnoreSurroundingSpaces();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.String var45 = var31.format(var44);
    java.lang.String[] var47 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var48 = var31.withHeader(var47);
    org.apache.commons.csv.CSVFormat var49 = var23.withHeaderComments((java.lang.Object[])var47);
    org.apache.commons.csv.CSVFormat var50 = var16.withHeaderComments((java.lang.Object[])var47);
    boolean var51 = var8.equals((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var45.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test61");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("Delimiter=< > QuoteChar=<a> SkipHeaderRecord:false");
    boolean var10 = var9.isNullStringSet();
    boolean var11 = var9.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test62");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    java.lang.Character var6 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var8 = var1.withDelimiter('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test63");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    boolean var5 = var2.isCommentMarkerSet();
    boolean var6 = var2.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var8 = var2.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > CommentStart=<4> RecordSeparator=<Default Excel MySQL RFC4180 TDF> EmptyLines:ignored SkipHeaderRecord:true", var8);
    long var10 = var9.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test64");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    boolean var7 = var1.isNullStringSet();
    java.lang.Character var8 = var1.getEscapeCharacter();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var10 = var1.withEscape(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test65");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test66");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    char var6 = var3.getDelimiter();
    org.apache.commons.csv.CSVFormat var8 = var3.withEscape('a');
    boolean var9 = var3.getIgnoreEmptyLines();
    boolean var10 = var3.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test67");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    java.lang.String var14 = var13.toString();
    org.apache.commons.csv.CSVFormat var16 = var13.withNullString("");
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var20 = var18.withQuote('#');
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    boolean var25 = var22.isCommentMarkerSet();
    boolean var26 = var22.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var29 = var28.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var31 = var28.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var33 = var28.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var34 = var33.withIgnoreSurroundingSpaces();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.String var36 = var22.format(var35);
    java.lang.String var37 = var18.format(var35);
    org.apache.commons.csv.CSVFormat var38 = var9.withHeaderComments(var35);
    boolean var39 = var38.getIgnoreHeaderCase();
    java.lang.String var40 = var38.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var14.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var36.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var37.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test68");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var1.withRecordSeparator("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    java.lang.Character var9 = var8.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test69");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    boolean var5 = var2.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var7 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat.Predefined[] var8 = org.apache.commons.csv.CSVFormat.Predefined.values();
    java.lang.String var9 = var7.format((java.lang.Object[])var8);
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:false", var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var9.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test70");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    boolean var9 = var6.isClosed();
    java.util.List var10 = var6.getRecords();
    java.util.Iterator var11 = var6.iterator();
    var6.close();
    java.util.Iterator var13 = var6.iterator();
    boolean var14 = var6.isClosed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var15 = var6.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test71");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = var8.withQuote('#');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    boolean var16 = var12.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var19 = var18.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = var18.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var23 = var18.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var24 = var23.withIgnoreSurroundingSpaces();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.String var26 = var12.format(var25);
    java.lang.String var27 = var8.format(var25);
    org.apache.commons.csv.CSVFormat var29 = var8.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var30 = var8.withAllowMissingColumnNames();
    char var31 = var30.getDelimiter();
    java.lang.String[] var32 = var30.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var26.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var27.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test72");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote((java.lang.Character)'a');
    java.lang.String[] var9 = var6.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test73");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    boolean var7 = var6.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test74");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDF", var8);
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('#');
    boolean var13 = var10.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test75");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var9 = var1.withIgnoreEmptyLines();
    boolean var10 = var9.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test76");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var2.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var7 = var2.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test77");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    boolean var6 = var5.isCommentMarkerSet();
    boolean var7 = var5.getSkipHeaderRecord();
    boolean var8 = var5.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test78");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var2.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var2.withEscape((java.lang.Character)'#');
    java.lang.String var9 = var8.getNullString();
    org.apache.commons.csv.CSVFormat var11 = var8.withNullString("Delimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false Header:[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test79");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getCurrentLineNumber();
    long var8 = var6.getCurrentLineNumber();
    var6.close();
    java.util.Iterator var10 = var6.iterator();
    var6.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var12 = var6.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test80");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    java.lang.Character var14 = var13.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test81");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var8 = var6.withIgnoreEmptyLines();
    java.lang.Character var9 = var6.getQuoteCharacter();
    java.lang.String var10 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > NullString=<> SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=< > NullString=<> SkipHeaderRecord:true"));

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test82");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    java.lang.Character var9 = var8.getCommentMarker();
    org.apache.commons.csv.CSVFormat var11 = var8.withRecordSeparator('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test83");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreEmptyLines(false);
    java.lang.String var11 = var10.getRecordSeparator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var13 = var10.withCommentMarker(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test84");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.Character var3 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape('a');
    java.lang.String var8 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Delimiter=< > SkipHeaderRecord:false"+ "'", var8.equals("Delimiter=< > SkipHeaderRecord:false"));

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test85");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withNullString("");
    char var8 = var1.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == ' ');

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test86");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var9 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var8.withNullString("");
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreEmptyLines();
    java.lang.String[] var13 = var12.getHeaderComments();
    org.apache.commons.csv.CSVFormat var15 = var12.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var17 = var12.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var18 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var19 = var17.withHeaderComments((java.lang.Object[])var18);
    org.apache.commons.csv.CSVFormat var21 = var17.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var23 = var17.withCommentMarker('4');
    boolean var24 = var6.equals((java.lang.Object)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test87");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var7 = var2.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var8 = var7.getCommentMarker();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("", var7);
    org.apache.commons.csv.CSVFormat var11 = var7.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test88");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var3.withRecordSeparator(' ');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var14 = var3.withEscape((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test89");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var2.getSkipHeaderRecord();
    java.lang.Character var7 = var2.getEscapeCharacter();
    boolean var9 = var2.equals((java.lang.Object)100.0d);
    boolean var10 = var2.isQuoteCharacterSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var12 = var2.withEscape((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test90");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.String[] var7 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    boolean var12 = var9.isCommentMarkerSet();
    boolean var13 = var9.getIgnoreHeaderCase();
    java.lang.String[] var15 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var16 = var9.withHeader(var15);
    org.apache.commons.csv.CSVFormat var17 = var1.withHeader(var15);
    org.apache.commons.csv.CSVFormat var19 = var17.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var20 = var19.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test91");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    boolean var5 = var4.isCommentMarkerSet();
    java.lang.Character var6 = var4.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var12 = var4.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var14 = var4.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var16 = var14.withEscape('a');
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var19 = var18.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = var18.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var23 = var18.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var26 = var25.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var28 = var25.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var25.withIgnoreEmptyLines();
    java.lang.String var30 = var29.toString();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var33 = var32.withAllowMissingColumnNames();
    boolean var34 = var32.isNullStringSet();
    java.lang.String[] var36 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var37 = var32.withHeader(var36);
    org.apache.commons.csv.CSVFormat var38 = var29.withHeader(var36);
    org.apache.commons.csv.CSVFormat var39 = var18.withHeader(var36);
    java.lang.String var40 = var16.format((java.lang.Object[])var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var30.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test92");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    java.lang.String var21 = var18.getNullString();
    org.apache.commons.csv.CSVFormat var22 = var18.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test93");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var8.withSkipHeaderRecord();
    java.lang.String[] var10 = var9.getHeader();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withCommentMarker('#');
    boolean var16 = var15.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord();
    boolean var21 = var18.isCommentMarkerSet();
    boolean var22 = var18.getIgnoreHeaderCase();
    java.lang.String[] var24 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var25 = var18.withHeader(var24);
    org.apache.commons.csv.CSVFormat var26 = var15.withHeaderComments((java.lang.Object[])var24);
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var29 = var28.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var31 = var28.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var33 = var28.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var36 = var35.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var38 = var35.withNullString("");
    org.apache.commons.csv.CSVFormat var39 = var35.withIgnoreEmptyLines();
    java.lang.String var40 = var39.toString();
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var43 = var42.withAllowMissingColumnNames();
    boolean var44 = var42.isNullStringSet();
    java.lang.String[] var46 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var47 = var42.withHeader(var46);
    org.apache.commons.csv.CSVFormat var48 = var39.withHeader(var46);
    org.apache.commons.csv.CSVFormat var49 = var28.withHeader(var46);
    java.lang.String var50 = var49.toString();
    java.lang.String[] var51 = var49.getHeader();
    org.apache.commons.csv.CSVFormat var52 = var26.withHeader(var51);
    org.apache.commons.csv.CSVFormat var53 = var9.withHeaderComments((java.lang.Object[])var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var40.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var50.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test94");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var15 = var12.withSkipHeaderRecord(true);
    java.lang.String var16 = var15.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "4"+ "'", var16.equals("4"));

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test95");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines(true);
    boolean var9 = var8.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test96");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var7 = var6.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var9 = var6.withNullString("");
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreEmptyLines();
    java.lang.String[] var11 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var15 = var10.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var16 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var17 = var15.withHeaderComments((java.lang.Object[])var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeaderComments((java.lang.Object[])var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test97");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var3.withEscape('#');
    char var9 = var3.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == ' ');

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test98");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    boolean var9 = var6.isClosed();
    java.util.Map var10 = var6.getHeaderMap();
    long var11 = var6.getRecordNumber();
    java.util.Map var12 = var6.getHeaderMap();
    long var13 = var6.getCurrentLineNumber();
    java.util.Map var14 = var6.getHeaderMap();
    boolean var15 = var6.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test99");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = var8.withQuote('#');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    boolean var16 = var12.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var19 = var18.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = var18.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var23 = var18.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var24 = var23.withIgnoreSurroundingSpaces();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.String var26 = var12.format(var25);
    java.lang.String var27 = var8.format(var25);
    org.apache.commons.csv.CSVFormat var29 = var8.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var30 = var8.withAllowMissingColumnNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var32 = var8.withCommentMarker('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var26.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var27.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test100");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    long var8 = var6.getRecordNumber();
    boolean var9 = var6.isClosed();
    long var10 = var6.getRecordNumber();
    var6.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test101");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    boolean var10 = var8.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var12 = var8.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var14 = var8.withAllowMissingColumnNames(true);
    java.lang.String[] var15 = var8.getHeader();
    org.apache.commons.csv.CSVFormat var17 = var8.withNullString("Default Excel MySQL RFC4180 TDFDelimiter=< > SkipHeaderRecord:true");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test102");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test103");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withNullString("Delimiter=< > NullString=<> SkipHeaderRecord:true");
    org.apache.commons.csv.QuoteMode var15 = var14.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test104");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var6 = var1.getHeaderComments();
    boolean var7 = var1.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = var1.withRecordSeparator("Default Excel MySQL RFC4180 TDFDelimiter=< > SkipHeaderRecord:true");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test105");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var11 = var3.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var12 = var3.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var14 = var12.withEscape((java.lang.Character)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test106");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    boolean var13 = var11.isNullStringSet();
    java.lang.String[] var15 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var16 = var11.withHeader(var15);
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord();
    boolean var21 = var18.isCommentMarkerSet();
    boolean var22 = var18.getIgnoreHeaderCase();
    java.lang.String[] var24 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var25 = var18.withHeader(var24);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    boolean var30 = var27.isCommentMarkerSet();
    boolean var31 = var27.getIgnoreHeaderCase();
    java.lang.String[] var33 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var34 = var27.withHeader(var33);
    org.apache.commons.csv.CSVFormat var35 = var18.withHeader(var33);
    java.lang.String var36 = var16.format((java.lang.Object[])var33);
    org.apache.commons.csv.CSVFormat var37 = var9.withHeader(var33);
    java.lang.String var38 = var9.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var40 = var9.withIgnoreHeaderCase(false);
    boolean var41 = var40.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var36.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test107");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    java.lang.String var5 = var4.toString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("");
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false", var9);
    java.util.Iterator var15 = var14.iterator();
    long var16 = var14.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0L);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test108");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test109");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    boolean var9 = var5.equals((java.lang.Object)10.0f);
    java.lang.Character var10 = var5.getEscapeCharacter();
    java.lang.String var11 = var5.toString();
    boolean var12 = var5.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var11.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test110");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var6.withRecordSeparator('4');
    boolean var9 = var8.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreEmptyLines();
    java.lang.String var11 = var10.getNullString();
    java.lang.Character var12 = var10.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test111");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var6.withCommentMarker('#');
    boolean var9 = var8.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var11 = var8.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test112");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    boolean var10 = var8.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var12 = var8.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var14 = var8.withAllowMissingColumnNames(true);
    java.lang.Character var15 = var14.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test113");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=< > RecordSeparator=<hi!> SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test114");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    var5.close();
    boolean var7 = var5.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test115");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.isNullStringSet();
    java.lang.Character var7 = var3.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var8 = var3.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test116");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var17 = var16.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var19 = var16.withCommentMarker('#');
    boolean var20 = var19.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    boolean var25 = var22.isCommentMarkerSet();
    boolean var26 = var22.getIgnoreHeaderCase();
    java.lang.String[] var28 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var29 = var22.withHeader(var28);
    org.apache.commons.csv.CSVFormat var30 = var19.withHeaderComments((java.lang.Object[])var28);
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var33 = var32.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var35 = var32.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var37 = var32.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var40 = var39.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var42 = var39.withNullString("");
    org.apache.commons.csv.CSVFormat var43 = var39.withIgnoreEmptyLines();
    java.lang.String var44 = var43.toString();
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    boolean var48 = var46.isNullStringSet();
    java.lang.String[] var50 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var51 = var46.withHeader(var50);
    org.apache.commons.csv.CSVFormat var52 = var43.withHeader(var50);
    org.apache.commons.csv.CSVFormat var53 = var32.withHeader(var50);
    java.lang.String var54 = var53.toString();
    java.lang.String[] var55 = var53.getHeader();
    org.apache.commons.csv.CSVFormat var56 = var30.withHeader(var55);
    org.apache.commons.csv.CSVFormat var57 = var14.withHeader(var55);
    boolean var58 = var14.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var44.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var54.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test117");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    boolean var9 = var5.isQuoteCharacterSet();
    java.lang.String[] var10 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var11 = var5.withIgnoreEmptyLines();
    boolean var12 = var11.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test118");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test119");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker((java.lang.Character)'4');
    java.lang.String var16 = var13.getRecordSeparator();
    java.lang.String[] var17 = var13.getHeaderComments();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var19 = var13.withCommentMarker((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var16.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test120");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var11 = var9.withCommentMarker('4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var13 = var9.withCommentMarker(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test121");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    boolean var6 = var2.isNullStringSet();
    org.apache.commons.csv.CSVParser var7 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> SkipHeaderRecord:false", var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var9 = var2.withQuote(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test122");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[Default, Excel, MySQL, RFC4180, TDF]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test123");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(false);
    java.lang.String var10 = var9.toString();
    java.lang.Character var11 = var9.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var13 = var9.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var15 = var9.withEscape('#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var17 = var15.withEscape((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test124");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    java.lang.String var5 = var4.getNullString();
    java.lang.String[] var6 = var4.getHeaderComments();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var8 = var4.withCommentMarker((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test125");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    java.lang.Character var3 = var1.getCommentMarker();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test126");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    boolean var13 = var11.isNullStringSet();
    java.lang.String[] var15 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var16 = var11.withHeader(var15);
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord();
    boolean var21 = var18.isCommentMarkerSet();
    boolean var22 = var18.getIgnoreHeaderCase();
    java.lang.String[] var24 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var25 = var18.withHeader(var24);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    boolean var30 = var27.isCommentMarkerSet();
    boolean var31 = var27.getIgnoreHeaderCase();
    java.lang.String[] var33 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var34 = var27.withHeader(var33);
    org.apache.commons.csv.CSVFormat var35 = var18.withHeader(var33);
    java.lang.String var36 = var16.format((java.lang.Object[])var33);
    org.apache.commons.csv.CSVFormat var37 = var9.withHeader(var33);
    java.lang.String var38 = var37.getNullString();
    org.apache.commons.csv.CSVFormat var39 = var37.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var36.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var38.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test127");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var10 = var1.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var12 = var1.withDelimiter('4');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test128");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(false);
    java.lang.String var10 = var9.toString();
    java.lang.Character var11 = var9.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var13 = var9.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var15 = var9.withEscape('#');
    org.apache.commons.csv.CSVFormat var17 = var15.withDelimiter('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test129");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('4');
    boolean var8 = var7.getAllowMissingColumnNames();
    java.lang.String var9 = var7.getRecordSeparator();
    boolean var10 = var7.getAllowMissingColumnNames();
    java.lang.Character var11 = var7.getCommentMarker();
    boolean var12 = var7.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test130");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    boolean var13 = var11.isNullStringSet();
    java.lang.String[] var15 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var16 = var11.withHeader(var15);
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord();
    boolean var21 = var18.isCommentMarkerSet();
    boolean var22 = var18.getIgnoreHeaderCase();
    java.lang.String[] var24 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var25 = var18.withHeader(var24);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    boolean var30 = var27.isCommentMarkerSet();
    boolean var31 = var27.getIgnoreHeaderCase();
    java.lang.String[] var33 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var34 = var27.withHeader(var33);
    org.apache.commons.csv.CSVFormat var35 = var18.withHeader(var33);
    java.lang.String var36 = var16.format((java.lang.Object[])var33);
    org.apache.commons.csv.CSVFormat var37 = var9.withHeader(var33);
    org.apache.commons.csv.CSVFormat var39 = var9.withNullString("Default Excel MySQL RFC4180 TDF#");
    org.apache.commons.csv.CSVFormat var40 = var39.withIgnoreSurroundingSpaces();
    boolean var41 = var39.getIgnoreHeaderCase();
    boolean var42 = var39.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var36.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test131");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withAllowMissingColumnNames(true);
    boolean var7 = var4.isNullStringSet();
    java.lang.Character var8 = var4.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var4.withAllowMissingColumnNames();
    java.lang.String var10 = var4.toString();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDFhi!", var4);
    java.util.Iterator var12 = var11.iterator();
    boolean var13 = var11.isClosed();
    java.util.Iterator var14 = var11.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test132");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    boolean var5 = var4.isCommentMarkerSet();
    java.lang.String[] var6 = var4.getHeader();
    org.apache.commons.csv.CSVFormat var8 = var4.withEscape((java.lang.Character)'4');
    boolean var9 = var8.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test133");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    boolean var3 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var7 = var5.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.QuoteMode var8 = var5.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test134");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var2.getAllowMissingColumnNames();
    boolean var4 = var2.isNullStringSet();
    java.lang.String[] var5 = var2.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test135");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    java.lang.Character var5 = var4.getCommentMarker();
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > RecordSeparator=<4> SkipHeaderRecord:false", var4);
    boolean var7 = var4.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test136");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var1.withQuote((java.lang.Character)'a');
    boolean var8 = var1.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var15 = var12.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var22 = var21.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var25 = var23.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    java.lang.String var30 = var29.toString();
    org.apache.commons.csv.CSVFormat var32 = var29.withNullString("");
    org.apache.commons.csv.CSVFormat var34 = var29.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var37 = var36.withAllowMissingColumnNames();
    boolean var38 = var36.isNullStringSet();
    java.lang.String[] var40 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var41 = var36.withHeader(var40);
    java.lang.String var42 = var34.format((java.lang.Object[])var40);
    java.lang.String var43 = var25.format((java.lang.Object[])var40);
    java.lang.String var44 = var19.format((java.lang.Object[])var40);
    java.lang.String var45 = var1.format((java.lang.Object[])var40);
    org.apache.commons.csv.CSVFormat var46 = var1.withIgnoreEmptyLines();
    java.lang.Character var47 = var1.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var30.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "#"+ "'", var44.equals("#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test137");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > RecordSeparator=<#> EmptyLines:ignored SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test138");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    boolean var12 = var11.isCommentMarkerSet();
    boolean var13 = var11.isNullStringSet();
    org.apache.commons.csv.CSVFormat var15 = var11.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var17 = var11.withIgnoreSurroundingSpaces(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test139");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    long var6 = var5.getCurrentLineNumber();
    boolean var7 = var5.isClosed();
    java.util.Map var8 = var5.getHeaderMap();
    java.util.List var9 = var5.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test140");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var8 = var3.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var9 = var8.withIgnoreEmptyLines();
    java.lang.Character var10 = var9.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test141");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withIgnoreSurroundingSpaces(true);
    boolean var5 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var9 = var7.withAllowMissingColumnNames(true);
    java.lang.String var10 = var9.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test142");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    boolean var9 = var8.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test143");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    boolean var7 = var1.isNullStringSet();
    java.lang.Character var8 = var1.getEscapeCharacter();
    java.lang.String var9 = var1.getRecordSeparator();
    java.lang.Character var10 = var1.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test144");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    java.lang.String[] var7 = var6.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test145");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var13 = var8.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test146");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var22 = var18.withCommentMarker('#');
    java.lang.Character var23 = var22.getQuoteCharacter();
    org.apache.commons.csv.QuoteMode var24 = var22.getQuoteMode();
    org.apache.commons.csv.CSVFormat var25 = var22.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test147");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    boolean var8 = var7.getIgnoreHeaderCase();
    boolean var9 = var7.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var7.withIgnoreSurroundingSpaces(false);
    boolean var13 = var7.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test148");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var12 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var13 = var11.withHeaderComments((java.lang.Object[])var12);
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > QuoteChar=<#> NullString=<Delimiter=< > SkipHeaderRecord:true> SurroundingSpaces:ignored SkipHeaderRecord:false", var13);
    long var15 = var14.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test149");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker((java.lang.Character)'4');
    java.lang.Character var16 = var15.getQuoteCharacter();
    boolean var17 = var15.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var20 = var19.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord();
    boolean var22 = var19.isCommentMarkerSet();
    java.lang.Character var23 = var19.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var24 = var19.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var19.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var28 = var19.withDelimiter(' ');
    java.lang.String var29 = var19.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var32 = var31.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var34 = var31.withRecordSeparator("hi!");
    boolean var35 = var34.isCommentMarkerSet();
    boolean var36 = var34.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var39 = var38.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var41 = var38.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var43 = var38.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var46 = var45.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var48 = var45.withNullString("");
    org.apache.commons.csv.CSVFormat var49 = var45.withIgnoreEmptyLines();
    java.lang.String var50 = var49.toString();
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var53 = var52.withAllowMissingColumnNames();
    boolean var54 = var52.isNullStringSet();
    java.lang.String[] var56 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var57 = var52.withHeader(var56);
    org.apache.commons.csv.CSVFormat var58 = var49.withHeader(var56);
    org.apache.commons.csv.CSVFormat var59 = var38.withHeader(var56);
    org.apache.commons.csv.CSVFormat var60 = var34.withHeaderComments((java.lang.Object[])var56);
    org.apache.commons.csv.CSVFormat var61 = var19.withHeaderComments((java.lang.Object[])var56);
    org.apache.commons.csv.CSVFormat var62 = var15.withHeaderComments((java.lang.Object[])var56);
    java.lang.String var63 = var15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var50.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Delimiter=< > CommentStart=<4> RecordSeparator=<Default Excel MySQL RFC4180 TDF> EmptyLines:ignored SkipHeaderRecord:true"+ "'", var63.equals("Delimiter=< > CommentStart=<4> RecordSeparator=<Default Excel MySQL RFC4180 TDF> EmptyLines:ignored SkipHeaderRecord:true"));

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test150");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    boolean var7 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var9 = var1.withEscape('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test151");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var22 = var18.withEscape('a');
    java.lang.Character var23 = var18.getCommentMarker();
    boolean var24 = var18.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test152");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withRecordSeparator("#");
    java.lang.String var4 = var1.toString();
    org.apache.commons.csv.CSVFormat var6 = var1.withRecordSeparator('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var4.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test153");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    boolean var3 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('a');
    java.lang.String var8 = var7.toString();
    org.apache.commons.csv.CSVFormat var10 = var7.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    java.lang.Character var16 = var12.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var17 = var12.withSkipHeaderRecord();
    java.lang.Character var18 = var17.getQuoteCharacter();
    boolean var20 = var17.equals((java.lang.Object)'a');
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var23 = var22.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var25 = var22.withNullString("");
    org.apache.commons.csv.CSVFormat var26 = var22.withIgnoreEmptyLines();
    java.lang.String[] var27 = var26.getHeaderComments();
    org.apache.commons.csv.CSVFormat var29 = var26.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var31 = var26.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var33 = var26.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var36 = var35.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var37 = var35.withSkipHeaderRecord();
    java.lang.String var38 = var37.toString();
    org.apache.commons.csv.CSVFormat var40 = var37.withNullString("");
    org.apache.commons.csv.CSVFormat var42 = var37.withIgnoreSurroundingSpaces(true);
    boolean var43 = var37.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var45 = var37.withQuote('a');
    org.apache.commons.csv.CSVFormat var47 = var45.withNullString("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var50 = var49.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var52 = var49.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var54 = var49.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var57 = var56.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var59 = var56.withNullString("");
    org.apache.commons.csv.CSVFormat var60 = var56.withIgnoreEmptyLines();
    java.lang.String var61 = var60.toString();
    org.apache.commons.csv.CSVFormat var63 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var64 = var63.withAllowMissingColumnNames();
    boolean var65 = var63.isNullStringSet();
    java.lang.String[] var67 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var68 = var63.withHeader(var67);
    org.apache.commons.csv.CSVFormat var69 = var60.withHeader(var67);
    org.apache.commons.csv.CSVFormat var70 = var49.withHeader(var67);
    java.lang.String var71 = var70.toString();
    org.apache.commons.csv.CSVFormat var73 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var74 = var73.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var76 = var73.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var78 = var73.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var80 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var81 = var80.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var83 = var80.withNullString("");
    org.apache.commons.csv.CSVFormat var84 = var80.withIgnoreEmptyLines();
    java.lang.String var85 = var84.toString();
    org.apache.commons.csv.CSVFormat var87 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var88 = var87.withAllowMissingColumnNames();
    boolean var89 = var87.isNullStringSet();
    java.lang.String[] var91 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var92 = var87.withHeader(var91);
    org.apache.commons.csv.CSVFormat var93 = var84.withHeader(var91);
    org.apache.commons.csv.CSVFormat var94 = var73.withHeader(var91);
    java.lang.String var95 = var70.format((java.lang.Object[])var91);
    org.apache.commons.csv.CSVFormat var96 = var45.withHeader(var91);
    boolean var97 = var33.equals((java.lang.Object)var91);
    org.apache.commons.csv.CSVFormat var98 = var17.withHeader(var91);
    org.apache.commons.csv.CSVFormat var99 = var7.withHeaderComments((java.lang.Object[])var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Delimiter=<a> SkipHeaderRecord:false"+ "'", var8.equals("Delimiter=<a> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var38.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var61.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var71.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var85.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + ""+ "'", var95.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test154");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var10 = var1.withSkipHeaderRecord(false);
    boolean var11 = var10.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test155");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    boolean var5 = var4.isCommentMarkerSet();
    java.lang.Character var6 = var4.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var13 = var12.getDelimiter();
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    java.lang.String var20 = var19.toString();
    org.apache.commons.csv.CSVFormat var22 = var19.withNullString("");
    org.apache.commons.csv.CSVFormat var24 = var19.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var25.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var27 = org.apache.commons.csv.CSVParser.parse("DefaultaExcelaMySQLaRFC4180aTDF", var25);
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var30 = var29.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var32 = var29.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var34 = var29.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var37 = var36.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var39 = var36.withNullString("");
    org.apache.commons.csv.CSVFormat var40 = var36.withIgnoreEmptyLines();
    java.lang.String var41 = var40.toString();
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var44 = var43.withAllowMissingColumnNames();
    boolean var45 = var43.isNullStringSet();
    java.lang.String[] var47 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var48 = var43.withHeader(var47);
    org.apache.commons.csv.CSVFormat var49 = var40.withHeader(var47);
    org.apache.commons.csv.CSVFormat var50 = var29.withHeader(var47);
    org.apache.commons.csv.CSVFormat var51 = var50.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode var52 = var51.getQuoteMode();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var55 = var54.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord();
    java.lang.String var57 = var56.toString();
    org.apache.commons.csv.CSVFormat var59 = var56.withNullString("");
    org.apache.commons.csv.CSVFormat var61 = var56.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var63 = var56.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var65 = var56.withRecordSeparator(' ');
    java.lang.String var66 = var65.toString();
    org.apache.commons.csv.CSVFormat var68 = var65.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var70 = var68.withEscape('4');
    org.apache.commons.csv.CSVFormat var72 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var73 = var72.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var74 = var72.withSkipHeaderRecord();
    java.lang.String var75 = var74.toString();
    org.apache.commons.csv.CSVFormat var77 = var74.withNullString("");
    org.apache.commons.csv.CSVFormat var79 = var74.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var81 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var82 = var81.withAllowMissingColumnNames();
    boolean var83 = var81.isNullStringSet();
    java.lang.String[] var85 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var86 = var81.withHeader(var85);
    java.lang.String var87 = var79.format((java.lang.Object[])var85);
    java.lang.String var88 = var70.format((java.lang.Object[])var85);
    org.apache.commons.csv.CSVFormat var89 = var51.withHeaderComments((java.lang.Object[])var85);
    java.lang.String var90 = var25.format((java.lang.Object[])var85);
    org.apache.commons.csv.CSVFormat var91 = var12.withHeader(var85);
    org.apache.commons.csv.CSVFormat var92 = var4.withHeaderComments((java.lang.Object[])var85);
    boolean var93 = var92.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var20.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var41.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var57.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var66.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var75.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + ""+ "'", var88.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + ""+ "'", var90.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test156");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    java.lang.String[] var6 = var2.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var2.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var2.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var2.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVParser var21 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> SkipHeaderRecord:false", var2);
    org.apache.commons.csv.CSVFormat var23 = var2.withEscape((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test157");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var5.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var14 = var5.withAllowMissingColumnNames(true);
    boolean var15 = var5.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test158");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=< > SkipHeaderRecord:true Header:[]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test159");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var12 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var12.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var22 = var20.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord();
    java.lang.String var27 = var26.toString();
    org.apache.commons.csv.CSVFormat var29 = var26.withNullString("");
    org.apache.commons.csv.CSVFormat var31 = var26.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    boolean var35 = var33.isNullStringSet();
    java.lang.String[] var37 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var38 = var33.withHeader(var37);
    java.lang.String var39 = var31.format((java.lang.Object[])var37);
    java.lang.String var40 = var22.format((java.lang.Object[])var37);
    java.lang.String var41 = var16.format((java.lang.Object[])var37);
    org.apache.commons.csv.CSVFormat var42 = var5.withHeader(var37);
    java.lang.String var43 = var42.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var27.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "#"+ "'", var41.equals("#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test160");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var12 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var13 = var11.withHeaderComments((java.lang.Object[])var12);
    org.apache.commons.csv.CSVFormat var15 = var11.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = var19.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord();
    java.lang.String var26 = var25.toString();
    org.apache.commons.csv.CSVFormat var28 = var25.withNullString("");
    org.apache.commons.csv.CSVFormat var30 = var25.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var33 = var32.withAllowMissingColumnNames();
    boolean var34 = var32.isNullStringSet();
    java.lang.String[] var36 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var37 = var32.withHeader(var36);
    java.lang.String var38 = var30.format((java.lang.Object[])var36);
    java.lang.String var39 = var21.format((java.lang.Object[])var36);
    org.apache.commons.csv.CSVFormat var40 = var15.withHeader(var36);
    org.apache.commons.csv.CSVFormat var42 = var15.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var43 = org.apache.commons.csv.CSVParser.parse("ALL MINIMAL NON_NUMERIC NONE", var15);
    org.apache.commons.csv.CSVFormat var44 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode var45 = var15.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var26.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test161");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withRecordSeparator("#");
    org.apache.commons.csv.CSVFormat var5 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var5.withNullString("");
    boolean var9 = var5.isNullStringSet();
    boolean var10 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    java.lang.Character var16 = var12.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var17 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var12.withIgnoreEmptyLines(true);
    boolean var20 = var5.equals((java.lang.Object)var12);
    boolean var21 = var1.equals((java.lang.Object)var5);
    boolean var22 = var5.getAllowMissingColumnNames();
    java.lang.String var23 = var5.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test162");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var7 = var6.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test163");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    java.lang.String var5 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var4.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test164");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.isNullStringSet();
    org.apache.commons.csv.CSVFormat var8 = var3.withQuote((java.lang.Character)'4');
    boolean var9 = var3.isCommentMarkerSet();
    java.lang.Character var10 = var3.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test165");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withRecordSeparator("#");
    java.lang.String[] var4 = var1.getHeader();
    boolean var5 = var1.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test166");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    boolean var5 = var4.getIgnoreEmptyLines();
    boolean var6 = var4.getAllowMissingColumnNames();
    java.lang.String[] var7 = var4.getHeader();
    char var8 = var4.getDelimiter();
    java.lang.String var9 = var4.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var4.withRecordSeparator('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test167");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getCurrentLineNumber();
    long var8 = var6.getCurrentLineNumber();
    var6.close();
    boolean var10 = var6.isClosed();
    long var11 = var6.getRecordNumber();
    java.util.Map var12 = var6.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test168");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var11 = var7.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var13 = var7.withRecordSeparator(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test169");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test170");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> SkipHeaderRecord:false", var4);
    java.util.Map var10 = var9.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test171");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    boolean var5 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var7.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var16 = var12.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var18 = var12.withSkipHeaderRecord(false);
    boolean var19 = var4.equals((java.lang.Object)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test172");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    java.lang.Character var5 = var1.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test173");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var7 = var6.getCommentMarker();
    org.apache.commons.csv.QuoteMode var8 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var6.withEscape((java.lang.Character)'a');
    boolean var11 = var10.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var14 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord();
    boolean var16 = var13.isCommentMarkerSet();
    boolean var17 = var13.getIgnoreHeaderCase();
    java.lang.String[] var19 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var20 = var13.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var10.withHeaderComments((java.lang.Object[])var19);
    org.apache.commons.csv.CSVFormat var23 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var24 = var10.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test174");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    java.lang.Character var11 = var10.getQuoteCharacter();
    boolean var12 = var10.getSkipHeaderRecord();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var14 = var10.withCommentMarker((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test175");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var6 = var4.withSkipHeaderRecord(false);
    boolean var7 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = var6.withIgnoreSurroundingSpaces();
    boolean var9 = var6.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test176");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    java.lang.String var10 = var9.toString();
    org.apache.commons.csv.CSVFormat var12 = var9.withNullString("");
    org.apache.commons.csv.CSVFormat var14 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    boolean var18 = var16.isNullStringSet();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var16.withHeader(var20);
    java.lang.String var22 = var14.format((java.lang.Object[])var20);
    java.lang.String var23 = var5.format((java.lang.Object[])var20);
    java.lang.String[] var24 = var5.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test177");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var11 = var7.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var13 = var7.withRecordSeparator('4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var15 = var7.withCommentMarker('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test178");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var7 = var2.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var7.withIgnoreSurroundingSpaces();
    boolean var9 = var8.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("hi!", var8);
    long var11 = var10.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test179");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var7 = var6.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test180");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('a');
    boolean var5 = var4.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var7 = var4.withEscape((java.lang.Character)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test181");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var9 = var1.withQuote((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test182");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote(' ');
    boolean var10 = var9.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var14 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord();
    java.lang.String var16 = var15.toString();
    org.apache.commons.csv.CSVFormat var18 = var15.withNullString("");
    org.apache.commons.csv.CSVFormat var20 = var15.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var22 = var15.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var24 = var15.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var27 = var26.withAllowMissingColumnNames();
    boolean var28 = var26.isNullStringSet();
    java.lang.String[] var30 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var31 = var26.withHeader(var30);
    java.lang.String var32 = var15.format((java.lang.Object[])var30);
    java.lang.String var33 = var9.format((java.lang.Object[])var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var16.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test183");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreSurroundingSpaces();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Delimiter=< > SkipHeaderRecord:false"+ "'", var6.equals("Delimiter=< > SkipHeaderRecord:false"));

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test184");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var16 = var14.withQuote((java.lang.Character)'#');
    java.lang.String var17 = var16.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var19 = var16.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var22 = var21.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var24 = var21.withCommentMarker('#');
    java.lang.String[] var25 = var21.getHeaderComments();
    org.apache.commons.csv.CSVFormat var27 = var21.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var30 = var29.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord();
    boolean var32 = var29.isCommentMarkerSet();
    boolean var33 = var29.getIgnoreHeaderCase();
    java.lang.String[] var35 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var36 = var29.withHeader(var35);
    org.apache.commons.csv.CSVFormat var37 = var21.withHeader(var35);
    org.apache.commons.csv.CSVFormat var38 = var19.withHeader(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test185");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDF", var8);
    java.util.List var10 = var9.getRecords();
    var9.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test186");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.Character var3 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    boolean var12 = var9.getAllowMissingColumnNames();
    boolean var13 = var5.equals((java.lang.Object)var9);
    boolean var14 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var16 = var5.withRecordSeparator('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test187");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    boolean var12 = var9.isCommentMarkerSet();
    boolean var13 = var9.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var16 = var15.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var18 = var15.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var20 = var15.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var21 = var20.withIgnoreSurroundingSpaces();
    java.lang.Object[] var22 = new java.lang.Object[] { var20};
    java.lang.String var23 = var9.format(var22);
    java.lang.String[] var25 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var26 = var9.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var1.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var27.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var31 = var27.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var23.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test188");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var17 = var12.withCommentMarker((java.lang.Character)'a');
    boolean var18 = var10.equals((java.lang.Object)var17);
    boolean var19 = var17.isCommentMarkerSet();
    boolean var20 = var17.getIgnoreSurroundingSpaces();
    java.lang.String var21 = var17.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test189");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var3 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord(true);
    boolean var6 = var1.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test190");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    long var8 = var6.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test191");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var8 = var7.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var7.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var12 = var7.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.String var15 = var1.format(var14);
    java.lang.String[] var17 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var17);
    boolean var19 = var18.isQuoteCharacterSet();
    java.lang.String var20 = var18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var15.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[Default Excel MySQL RFC4180 TDF]"+ "'", var20.equals("Delimiter=< > SkipHeaderRecord:false Header:[Default Excel MySQL RFC4180 TDF]"));

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test192");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var10 = var1.withDelimiter(' ');
    java.lang.String var11 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = var13.withRecordSeparator("hi!");
    boolean var17 = var16.isCommentMarkerSet();
    boolean var18 = var16.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var21 = var20.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var23 = var20.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var25 = var20.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var28 = var27.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var30 = var27.withNullString("");
    org.apache.commons.csv.CSVFormat var31 = var27.withIgnoreEmptyLines();
    java.lang.String var32 = var31.toString();
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var35 = var34.withAllowMissingColumnNames();
    boolean var36 = var34.isNullStringSet();
    java.lang.String[] var38 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var39 = var34.withHeader(var38);
    org.apache.commons.csv.CSVFormat var40 = var31.withHeader(var38);
    org.apache.commons.csv.CSVFormat var41 = var20.withHeader(var38);
    org.apache.commons.csv.CSVFormat var42 = var16.withHeaderComments((java.lang.Object[])var38);
    org.apache.commons.csv.CSVFormat var43 = var1.withHeaderComments((java.lang.Object[])var38);
    org.apache.commons.csv.CSVFormat var45 = var1.withIgnoreEmptyLines(false);
    java.lang.Character var46 = var1.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var32.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test193");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var14 = var13.getDelimiter();
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord();
    java.lang.String var21 = var20.toString();
    org.apache.commons.csv.CSVFormat var23 = var20.withNullString("");
    org.apache.commons.csv.CSVFormat var25 = var20.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var26 = var25.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var27 = var26.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var28 = org.apache.commons.csv.CSVParser.parse("DefaultaExcelaMySQLaRFC4180aTDF", var26);
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var31 = var30.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var33 = var30.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var35 = var30.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var38 = var37.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var40 = var37.withNullString("");
    org.apache.commons.csv.CSVFormat var41 = var37.withIgnoreEmptyLines();
    java.lang.String var42 = var41.toString();
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var45 = var44.withAllowMissingColumnNames();
    boolean var46 = var44.isNullStringSet();
    java.lang.String[] var48 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var49 = var44.withHeader(var48);
    org.apache.commons.csv.CSVFormat var50 = var41.withHeader(var48);
    org.apache.commons.csv.CSVFormat var51 = var30.withHeader(var48);
    org.apache.commons.csv.CSVFormat var52 = var51.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode var53 = var52.getQuoteMode();
    org.apache.commons.csv.CSVFormat var55 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var56 = var55.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var57 = var55.withSkipHeaderRecord();
    java.lang.String var58 = var57.toString();
    org.apache.commons.csv.CSVFormat var60 = var57.withNullString("");
    org.apache.commons.csv.CSVFormat var62 = var57.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var64 = var57.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var66 = var57.withRecordSeparator(' ');
    java.lang.String var67 = var66.toString();
    org.apache.commons.csv.CSVFormat var69 = var66.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var71 = var69.withEscape('4');
    org.apache.commons.csv.CSVFormat var73 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var74 = var73.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var75 = var73.withSkipHeaderRecord();
    java.lang.String var76 = var75.toString();
    org.apache.commons.csv.CSVFormat var78 = var75.withNullString("");
    org.apache.commons.csv.CSVFormat var80 = var75.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var82 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var83 = var82.withAllowMissingColumnNames();
    boolean var84 = var82.isNullStringSet();
    java.lang.String[] var86 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var87 = var82.withHeader(var86);
    java.lang.String var88 = var80.format((java.lang.Object[])var86);
    java.lang.String var89 = var71.format((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var90 = var52.withHeaderComments((java.lang.Object[])var86);
    java.lang.String var91 = var26.format((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var92 = var13.withHeader(var86);
    org.apache.commons.csv.CSVFormat var93 = var11.withHeader(var86);
    java.lang.Character var94 = var93.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var21.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var42.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var58.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var67.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var76.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + ""+ "'", var88.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + ""+ "'", var91.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test194");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote((java.lang.Character)'a');
    java.lang.Character var9 = var8.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var11 = var8.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var8.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 'a'+ "'", var9.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test195");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.QuoteMode var6 = var1.getQuoteMode();
    char var7 = var1.getDelimiter();
    java.lang.Character var8 = var1.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test196");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    java.lang.String[] var17 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var16.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var22 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var23 = var21.withHeaderComments((java.lang.Object[])var22);
    boolean var24 = var10.equals((java.lang.Object)var23);
    java.lang.String var25 = var23.toString();
    boolean var26 = var23.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Delimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[Default, Excel, MySQL, RFC4180, TDF]"+ "'", var25.equals("Delimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[Default, Excel, MySQL, RFC4180, TDF]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test197");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    java.lang.String var5 = var4.toString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("");
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false", var9);
    org.apache.commons.csv.CSVFormat var16 = var9.withNullString("Delimiter=< > RecordSeparator=<#> EmptyLines:ignored SkipHeaderRecord:false");
    java.lang.String var17 = var9.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test198");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var10.withEscape('a');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var14 = var12.withEscape((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test199");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    java.lang.Character var8 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var5.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test200");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var1.withQuote((java.lang.Character)'a');
    java.lang.String var8 = var7.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var7.withEscape((java.lang.Character)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test201");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var7 = var2.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote('#');
    boolean var10 = var9.getIgnoreSurroundingSpaces();
    java.lang.Character var11 = var9.getCommentMarker();
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse(" ", var9);
    boolean var13 = var9.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test202");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    java.lang.String[] var17 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var16.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var22 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var23 = var21.withHeaderComments((java.lang.Object[])var22);
    boolean var24 = var10.equals((java.lang.Object)var23);
    org.apache.commons.csv.CSVFormat var26 = var23.withIgnoreHeaderCase(false);
    boolean var27 = var26.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test203");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getCurrentLineNumber();
    java.util.List var8 = var6.getRecords();
    java.util.List var9 = var6.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test204");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var7 = var6.getCommentMarker();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var6.withDelimiter('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test205");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreEmptyLines(true);
    java.lang.Character var7 = var6.getCommentMarker();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    char var10 = var9.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test206");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var10 = var1.withIgnoreEmptyLines(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var12 = var1.withCommentMarker(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test207");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var10 = var4.withNullString("Delimiter=< > SkipHeaderRecord:true");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test208");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    java.lang.String var14 = var13.toString();
    org.apache.commons.csv.CSVFormat var16 = var13.withNullString("");
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var20 = var18.withQuote('#');
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    boolean var25 = var22.isCommentMarkerSet();
    boolean var26 = var22.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var29 = var28.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var31 = var28.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var33 = var28.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var34 = var33.withIgnoreSurroundingSpaces();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.String var36 = var22.format(var35);
    java.lang.String var37 = var18.format(var35);
    org.apache.commons.csv.CSVFormat var38 = var9.withHeaderComments(var35);
    boolean var39 = var38.getIgnoreHeaderCase();
    java.lang.String[] var40 = var38.getHeader();
    org.apache.commons.csv.CSVFormat var42 = var38.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var45 = var44.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var46 = var44.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var48 = var46.withIgnoreSurroundingSpaces(true);
    boolean var49 = var48.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var50 = var48.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var52 = var48.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var54 = var52.withIgnoreEmptyLines(false);
    boolean var55 = var42.equals((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var14.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var36.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var37.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test209");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator("Delimiter=< > QuoteChar=<a> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var10.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var14 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var16 = var10.withCommentMarker((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test210");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withRecordSeparator("hi!");
    boolean var6 = var5.isCommentMarkerSet();
    java.lang.String[] var7 = var5.getHeader();
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false", var5);
    java.util.Map var9 = var8.getHeaderMap();
    long var10 = var8.getRecordNumber();
    java.util.List var11 = var8.getRecords();
    java.util.List var12 = var8.getRecords();
    var8.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test211");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var7 = var6.isQuoteCharacterSet();
    java.lang.String[] var8 = var6.getHeader();
    java.lang.String var9 = var6.getNullString();
    boolean var10 = var6.isEscapeCharacterSet();
    java.lang.Character var11 = var6.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var9.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test212");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var24 = var23.withIgnoreSurroundingSpaces();
    java.lang.Character var25 = var23.getCommentMarker();
    org.apache.commons.csv.CSVParser var26 = org.apache.commons.csv.CSVParser.parse("hi!", var23);
    org.apache.commons.csv.CSVFormat var28 = var23.withRecordSeparator("Delimiter=< > NullString=<> SkipHeaderRecord:true");
    boolean var29 = var20.equals((java.lang.Object)var23);
    boolean var30 = var20.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test213");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var8.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var12 = var8.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test214");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var8 = var1.withEscape((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test215");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var8 = var7.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var7.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var12 = var7.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.String var15 = var1.format(var14);
    java.lang.String[] var17 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var17);
    boolean var19 = var18.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var15.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test216");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    java.lang.String[] var6 = var2.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var2.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var2.withHeader(var16);
    java.lang.String[] var19 = var2.getHeaderComments();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var22 = var21.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord();
    java.lang.String var24 = var23.toString();
    java.lang.String[] var25 = var23.getHeader();
    org.apache.commons.csv.CSVFormat var26 = var23.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var29 = var28.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var30 = var28.withSkipHeaderRecord();
    java.lang.String var31 = var30.toString();
    org.apache.commons.csv.CSVFormat var33 = var30.withNullString("");
    org.apache.commons.csv.CSVFormat var35 = var33.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var38 = var37.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var39 = var37.withSkipHeaderRecord();
    boolean var40 = var37.isCommentMarkerSet();
    boolean var41 = var37.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var44 = var43.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var46 = var43.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var48 = var43.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var49 = var48.withIgnoreSurroundingSpaces();
    java.lang.Object[] var50 = new java.lang.Object[] { var48};
    java.lang.String var51 = var37.format(var50);
    java.lang.String[] var53 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var54 = var37.withHeader(var53);
    org.apache.commons.csv.CSVFormat var55 = var33.withHeader(var53);
    java.lang.String var56 = var26.format((java.lang.Object[])var53);
    org.apache.commons.csv.CSVFormat var57 = var2.withHeader(var53);
    org.apache.commons.csv.CSVFormat var59 = var2.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVParser var60 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false", var2);
    boolean var61 = var60.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var24.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var31.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var51.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var56.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test217");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    java.lang.String[] var8 = var5.getHeaderComments();
    char var9 = var5.getDelimiter();
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var5.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test218");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var17 = var16.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var19 = var16.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var21 = var16.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var22 = var21.withIgnoreSurroundingSpaces();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.String var24 = var10.format(var23);
    java.lang.String[] var26 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var27 = var10.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var6.withHeader(var26);
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var32 = var30.withSkipHeaderRecord();
    boolean var33 = var30.isCommentMarkerSet();
    java.lang.Character var34 = var30.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var35 = var30.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var37 = var35.withQuote((java.lang.Character)'a');
    boolean var38 = var37.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var39 = var37.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var40 = var39.withIgnoreEmptyLines();
    boolean var41 = var28.equals((java.lang.Object)var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var43 = var39.withEscape((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var24.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test219");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=< > SkipHeaderRecord:true Header:[]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test220");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    java.lang.Character var8 = var5.getQuoteCharacter();
    boolean var9 = var5.getSkipHeaderRecord();
    org.apache.commons.csv.QuoteMode var10 = var5.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test221");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var6.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces(false);
    java.lang.Character var11 = var6.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test222");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    boolean var12 = var11.isCommentMarkerSet();
    boolean var13 = var11.isNullStringSet();
    org.apache.commons.csv.CSVFormat var15 = var11.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    java.lang.String[] var17 = var15.getHeader();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var19 = var15.withQuote((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test223");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test224");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > SurroundingSpaces:ignored SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test225");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String var7 = var6.toString();
    org.apache.commons.csv.CSVFormat var9 = var6.withDelimiter(' ');
    boolean var10 = var6.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Delimiter=< > CommentStart=<4> SkipHeaderRecord:false"+ "'", var7.equals("Delimiter=< > CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test226");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var17 = var16.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var19 = var16.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var21 = var16.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var22 = var21.withIgnoreSurroundingSpaces();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.String var24 = var10.format(var23);
    java.lang.String[] var26 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var27 = var10.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var6.withHeader(var26);
    java.lang.String var29 = var6.toString();
    java.lang.String[] var30 = var6.getHeader();
    java.lang.Character var31 = var6.getCommentMarker();
    java.lang.String[] var32 = var6.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var24.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Delimiter=< > NullString=<> SkipHeaderRecord:true"+ "'", var29.equals("Delimiter=< > NullString=<> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test227");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String var6 = var5.toString();
    org.apache.commons.csv.CSVFormat var7 = var5.withIgnoreSurroundingSpaces();
    java.lang.Character var8 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var11 = var10.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreEmptyLines();
    java.lang.String[] var15 = var14.getHeaderComments();
    org.apache.commons.csv.CSVFormat var17 = var14.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var19 = var14.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var20 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var21 = var19.withHeaderComments((java.lang.Object[])var20);
    java.lang.String var22 = var5.format((java.lang.Object[])var20);
    boolean var23 = var5.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var6.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var22.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test228");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var5.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var14 = var5.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var16 = var14.withIgnoreEmptyLines(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var18 = var16.withEscape(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test229");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var8.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var11.withIgnoreHeaderCase(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test230");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(false);
    java.lang.String var10 = var9.toString();
    java.lang.Character var11 = var9.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var13 = var9.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var15 = var9.withEscape('#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var17 = var9.withQuote((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test231");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withAllowMissingColumnNames(true);
    boolean var7 = var4.isNullStringSet();
    java.lang.Character var8 = var4.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var4.withAllowMissingColumnNames();
    java.lang.String var10 = var4.toString();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDFhi!", var4);
    java.util.Iterator var12 = var11.iterator();
    boolean var13 = var11.isClosed();
    java.util.List var14 = var11.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test232");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > SkipHeaderRecord:truehi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test233");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var6.withRecordSeparator("Delimiter=< > SkipHeaderRecord:false Header:[Delimiter=< > SkipHeaderRecord:true]");
    org.apache.commons.csv.CSVFormat var9 = var6.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test234");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    boolean var5 = var2.isCommentMarkerSet();
    java.lang.Character var6 = var2.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var7 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var2.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("ALL MINIMAL NON_NUMERIC NONE", var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test235");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreEmptyLines(false);
    java.lang.String[] var9 = var5.getHeader();
    char var10 = var5.getDelimiter();
    boolean var11 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var14 = var5.withEscape(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test236");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test237");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[Default, Excel, MySQL, RFC4180, TDF]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test238");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("", var13);
    long var15 = var14.getRecordNumber();
    var14.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var17 = var14.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test239");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.String[] var3 = var1.getHeaderComments();
    java.lang.String[] var4 = var1.getHeader();
    boolean var5 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var7 = var1.withNullString("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false");
    boolean var8 = var7.getIgnoreSurroundingSpaces();
    java.lang.Character var9 = var7.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var11 = var7.withRecordSeparator("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false");
    boolean var12 = var11.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test240");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    boolean var7 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var9 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var12 = var11.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var14 = var11.withCommentMarker('#');
    boolean var15 = var14.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    boolean var20 = var17.isCommentMarkerSet();
    boolean var21 = var17.getIgnoreHeaderCase();
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var17.withHeader(var23);
    org.apache.commons.csv.CSVFormat var25 = var14.withHeaderComments((java.lang.Object[])var23);
    org.apache.commons.csv.CSVFormat var26 = var9.withHeader(var23);
    org.apache.commons.csv.CSVFormat var27 = var9.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test241");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test242");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var3.withSkipHeaderRecord();
    boolean var6 = var5.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test243");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote((java.lang.Character)'a');
    boolean var15 = var12.isQuoteCharacterSet();
    boolean var16 = var12.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test244");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var7 = var6.getCommentMarker();
    org.apache.commons.csv.QuoteMode var8 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var6.withEscape((java.lang.Character)'a');
    boolean var11 = var10.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var13 = var10.withRecordSeparator('4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test245");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var1.withQuote((java.lang.Character)'a');
    java.lang.String var8 = var7.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var12 = var7.withRecordSeparator("4");
    boolean var13 = var12.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test246");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var12 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var13 = var11.withHeaderComments((java.lang.Object[])var12);
    org.apache.commons.csv.CSVFormat var15 = var11.withIgnoreHeaderCase(false);
    java.lang.Character var16 = var15.getQuoteCharacter();
    org.apache.commons.csv.CSVParser var17 = org.apache.commons.csv.CSVParser.parse("4", var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var19 = var15.withEscape(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test247");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    boolean var5 = var2.isCommentMarkerSet();
    boolean var6 = var2.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var8 = var2.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreEmptyLines(true);
    char var11 = var8.getDelimiter();
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > RecordSeparator=<hi!> SkipHeaderRecord:false", var8);
    long var13 = var12.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test248");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines(true);
    boolean var9 = var8.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    char var11 = var10.getDelimiter();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreSurroundingSpaces(true);
    char var14 = var13.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == ' ');

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test249");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.String[] var3 = var1.getHeaderComments();
    java.lang.String[] var4 = var1.getHeader();
    boolean var5 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var8.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("", var11);
    long var13 = var12.getCurrentLineNumber();
    long var14 = var12.getCurrentLineNumber();
    var12.close();
    java.util.Iterator var16 = var12.iterator();
    long var17 = var12.getRecordNumber();
    boolean var18 = var1.equals((java.lang.Object)var12);
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var21 = var20.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var23 = var20.withNullString("");
    org.apache.commons.csv.CSVFormat var24 = var20.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var26 = var24.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var28 = var26.withSkipHeaderRecord(false);
    char var29 = var26.getDelimiter();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var32 = var31.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var34 = var31.withRecordSeparator("hi!");
    boolean var35 = var34.isCommentMarkerSet();
    java.lang.Character var36 = var34.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var38 = var34.withAllowMissingColumnNames(true);
    boolean var39 = var38.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var42 = var41.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord();
    java.lang.String var44 = var43.toString();
    org.apache.commons.csv.CSVFormat var46 = var43.withNullString("");
    org.apache.commons.csv.CSVFormat var48 = var46.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var51 = var50.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var52 = var50.withSkipHeaderRecord();
    boolean var53 = var50.isCommentMarkerSet();
    boolean var54 = var50.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var57 = var56.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var59 = var56.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var61 = var56.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var62 = var61.withIgnoreSurroundingSpaces();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.String var64 = var50.format(var63);
    java.lang.String[] var66 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var67 = var50.withHeader(var66);
    org.apache.commons.csv.CSVFormat var68 = var46.withHeader(var66);
    java.lang.String var69 = var38.format((java.lang.Object[])var66);
    java.lang.String var70 = var26.format((java.lang.Object[])var66);
    java.lang.String var71 = var1.format((java.lang.Object[])var66);
    boolean var72 = var1.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var44.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var64.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var69.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var70.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var71.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test250");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var6.withCommentMarker('#');
    boolean var9 = var8.isCommentMarkerSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var11 = var8.withEscape(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test251");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = var10.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var19 = var10.withRecordSeparator(' ');
    java.lang.String var20 = var19.toString();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var23 = var22.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var25 = var22.withRecordSeparator("hi!");
    boolean var26 = var25.isCommentMarkerSet();
    java.lang.Character var27 = var25.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var29 = var25.withAllowMissingColumnNames(true);
    boolean var30 = var29.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var33 = var32.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord();
    java.lang.String var35 = var34.toString();
    org.apache.commons.csv.CSVFormat var37 = var34.withNullString("");
    org.apache.commons.csv.CSVFormat var39 = var37.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var42 = var41.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord();
    boolean var44 = var41.isCommentMarkerSet();
    boolean var45 = var41.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var48 = var47.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var50 = var47.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var52 = var47.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var53 = var52.withIgnoreSurroundingSpaces();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.String var55 = var41.format(var54);
    java.lang.String[] var57 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var58 = var41.withHeader(var57);
    org.apache.commons.csv.CSVFormat var59 = var37.withHeader(var57);
    java.lang.String var60 = var29.format((java.lang.Object[])var57);
    java.lang.String var61 = var19.format((java.lang.Object[])var57);
    org.apache.commons.csv.CSVFormat var62 = var6.withHeader(var57);
    org.apache.commons.csv.CSVFormat var64 = var62.withQuote('4');
    boolean var65 = var62.getIgnoreHeaderCase();
    char var66 = var62.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var20.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var35.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var55.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var60.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var61.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == ' ');

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test252");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    char var5 = var1.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == ' ');

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test253");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var9 = var5.withRecordSeparator('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test254");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var7 = var6.isQuoteCharacterSet();
    java.lang.String[] var8 = var6.getHeader();
    java.lang.String var9 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    java.lang.String var20 = var19.toString();
    org.apache.commons.csv.CSVFormat var22 = var19.withNullString("");
    org.apache.commons.csv.CSVFormat var24 = var19.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var27 = var26.withAllowMissingColumnNames();
    boolean var28 = var26.isNullStringSet();
    java.lang.String[] var30 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var31 = var26.withHeader(var30);
    java.lang.String var32 = var24.format((java.lang.Object[])var30);
    java.lang.String var33 = var15.format((java.lang.Object[])var30);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var36 = var35.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var38 = var35.withNullString("");
    org.apache.commons.csv.CSVFormat var39 = var35.withIgnoreEmptyLines();
    java.lang.String[] var40 = var39.getHeaderComments();
    org.apache.commons.csv.CSVFormat var42 = var39.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var44 = var39.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var48 = var46.withSkipHeaderRecord();
    boolean var49 = var46.isCommentMarkerSet();
    boolean var50 = var46.getIgnoreHeaderCase();
    java.lang.String[] var52 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var53 = var46.withHeader(var52);
    org.apache.commons.csv.CSVFormat var54 = var39.withHeaderComments((java.lang.Object[])var52);
    java.lang.String var55 = var15.format((java.lang.Object[])var52);
    org.apache.commons.csv.CSVFormat var56 = var6.withHeaderComments((java.lang.Object[])var52);
    boolean var57 = var56.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var9.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var20.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var55.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test255");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    boolean var5 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    boolean var10 = var7.isCommentMarkerSet();
    boolean var11 = var7.getIgnoreHeaderCase();
    java.lang.String[] var13 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var14 = var7.withHeader(var13);
    org.apache.commons.csv.CSVFormat var15 = var4.withHeaderComments((java.lang.Object[])var13);
    org.apache.commons.csv.CSVFormat var16 = var4.withIgnoreEmptyLines();
    char var17 = var4.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == ' ');

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test256");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    boolean var5 = var2.isCommentMarkerSet();
    java.lang.Character var6 = var2.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var7 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    java.lang.String var12 = var11.toString();
    org.apache.commons.csv.CSVFormat var14 = var11.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var11.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var18 = var11.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var19 = var7.equals((java.lang.Object)var18);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var21 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDF#", var18);
    java.util.List var22 = var21.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var12.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test257");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreEmptyLines(false);
    java.lang.String[] var9 = var5.getHeader();
    char var10 = var5.getDelimiter();
    org.apache.commons.csv.CSVFormat var12 = var5.withQuote('#');
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var15 = var14.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var17 = var14.withNullString("");
    org.apache.commons.csv.CSVFormat var18 = var14.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var20 = var18.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var26 = var24.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var29 = var28.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var30 = var28.withSkipHeaderRecord();
    java.lang.String var31 = var30.toString();
    org.apache.commons.csv.CSVFormat var33 = var30.withNullString("");
    org.apache.commons.csv.CSVFormat var35 = var30.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var38 = var37.withAllowMissingColumnNames();
    boolean var39 = var37.isNullStringSet();
    java.lang.String[] var41 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var42 = var37.withHeader(var41);
    java.lang.String var43 = var35.format((java.lang.Object[])var41);
    java.lang.String var44 = var26.format((java.lang.Object[])var41);
    org.apache.commons.csv.CSVFormat var45 = var18.withHeader(var41);
    org.apache.commons.csv.CSVFormat var46 = var12.withHeader(var41);
    boolean var47 = var12.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var31.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test258");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var12 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var13 = var11.withHeaderComments((java.lang.Object[])var12);
    java.lang.String[] var14 = var11.getHeaderComments();
    org.apache.commons.csv.CSVParser var15 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > QuoteChar=<#> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false", var11);
    boolean var16 = var15.isClosed();
    java.util.List var17 = var15.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test259");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    boolean var19 = var18.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var21 = var18.withCommentMarker('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test260");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    boolean var8 = var5.isCommentMarkerSet();
    boolean var9 = var5.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    java.lang.String[] var17 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var16.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var23 = var21.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var24 = org.apache.commons.csv.CSVParser.parse("", var23);
    long var25 = var24.getRecordNumber();
    java.util.Map var26 = var24.getHeaderMap();
    boolean var27 = var5.equals((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test261");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote('#');
    org.apache.commons.csv.CSVFormat var9 = var6.withSkipHeaderRecord();
    char var10 = var9.getDelimiter();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var12 = var9.withQuote((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test262");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var16 = var14.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var18 = var16.withNullString("Delimiter=< > QuoteChar=<#> NullString=<Delimiter=< > SkipHeaderRecord:true> SurroundingSpaces:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var20 = var18.withAllowMissingColumnNames(true);
    char var21 = var20.getDelimiter();
    java.lang.String[] var22 = var20.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test263");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    java.util.Map var9 = var6.getHeaderMap();
    long var10 = var6.getRecordNumber();
    var6.close();
    var6.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var13 = var6.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test264");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    boolean var9 = var6.isClosed();
    java.util.List var10 = var6.getRecords();
    java.util.Iterator var11 = var6.iterator();
    var6.close();
    java.util.Map var13 = var6.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test265");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var17 = var16.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var19 = var16.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var21 = var16.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var22 = var21.withIgnoreSurroundingSpaces();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.String var24 = var10.format(var23);
    java.lang.String[] var26 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var27 = var10.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var6.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var28.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var31 = var28.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var33 = var28.withSkipHeaderRecord(true);
    boolean var34 = var28.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var24.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test266");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withRecordSeparator("hi!");
    boolean var6 = var5.isCommentMarkerSet();
    java.lang.String[] var7 = var5.getHeader();
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false", var5);
    java.util.Iterator var9 = var8.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test267");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var3.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreEmptyLines();
    java.lang.String var14 = var12.toString();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord();
    java.lang.String var19 = var18.toString();
    org.apache.commons.csv.CSVFormat var21 = var18.withNullString("");
    org.apache.commons.csv.CSVFormat var23 = var18.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var25 = var23.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var28 = var27.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var30 = var27.withNullString("");
    org.apache.commons.csv.CSVFormat var31 = var27.withIgnoreEmptyLines();
    java.lang.String[] var32 = var31.getHeaderComments();
    org.apache.commons.csv.CSVFormat var34 = var31.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var36 = var34.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var37 = var36.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var39 = var37.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var41 = var39.withCommentMarker((java.lang.Character)'4');
    java.lang.Character var42 = var41.getQuoteCharacter();
    boolean var43 = var41.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var46 = var45.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var47 = var45.withSkipHeaderRecord();
    boolean var48 = var45.isCommentMarkerSet();
    java.lang.Character var49 = var45.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var50 = var45.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var52 = var45.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var54 = var45.withDelimiter(' ');
    java.lang.String var55 = var45.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var58 = var57.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var60 = var57.withRecordSeparator("hi!");
    boolean var61 = var60.isCommentMarkerSet();
    boolean var62 = var60.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var64 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var65 = var64.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var67 = var64.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var69 = var64.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var71 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var72 = var71.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var74 = var71.withNullString("");
    org.apache.commons.csv.CSVFormat var75 = var71.withIgnoreEmptyLines();
    java.lang.String var76 = var75.toString();
    org.apache.commons.csv.CSVFormat var78 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var79 = var78.withAllowMissingColumnNames();
    boolean var80 = var78.isNullStringSet();
    java.lang.String[] var82 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var83 = var78.withHeader(var82);
    org.apache.commons.csv.CSVFormat var84 = var75.withHeader(var82);
    org.apache.commons.csv.CSVFormat var85 = var64.withHeader(var82);
    org.apache.commons.csv.CSVFormat var86 = var60.withHeaderComments((java.lang.Object[])var82);
    org.apache.commons.csv.CSVFormat var87 = var45.withHeaderComments((java.lang.Object[])var82);
    org.apache.commons.csv.CSVFormat var88 = var41.withHeaderComments((java.lang.Object[])var82);
    org.apache.commons.csv.CSVFormat var89 = var23.withHeader(var82);
    org.apache.commons.csv.CSVFormat var90 = var12.withHeader(var82);
    org.apache.commons.csv.CSVFormat var92 = var12.withCommentMarker('#');
    boolean var93 = var92.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var14.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var19.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var76.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test268");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    boolean var3 = var1.getIgnoreEmptyLines();
    java.lang.String var4 = var1.toString();
    java.lang.String[] var5 = var1.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:false"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test269");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var11 = var9.withCommentMarker('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test270");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var7 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:false", var2);
    java.util.List var8 = var7.getRecords();
    long var9 = var7.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test271");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > NullString=<> SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test272");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote((java.lang.Character)'a');
    java.lang.String[] var9 = var6.getHeader();
    org.apache.commons.csv.CSVFormat var10 = var6.withSkipHeaderRecord();
    java.lang.Character var11 = var10.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test273");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var10 = var1.withDelimiter(' ');
    java.lang.String var11 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = var13.withRecordSeparator("hi!");
    boolean var17 = var16.isCommentMarkerSet();
    boolean var18 = var16.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var21 = var20.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var23 = var20.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var25 = var20.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var28 = var27.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var30 = var27.withNullString("");
    org.apache.commons.csv.CSVFormat var31 = var27.withIgnoreEmptyLines();
    java.lang.String var32 = var31.toString();
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var35 = var34.withAllowMissingColumnNames();
    boolean var36 = var34.isNullStringSet();
    java.lang.String[] var38 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var39 = var34.withHeader(var38);
    org.apache.commons.csv.CSVFormat var40 = var31.withHeader(var38);
    org.apache.commons.csv.CSVFormat var41 = var20.withHeader(var38);
    org.apache.commons.csv.CSVFormat var42 = var16.withHeaderComments((java.lang.Object[])var38);
    org.apache.commons.csv.CSVFormat var43 = var1.withHeaderComments((java.lang.Object[])var38);
    org.apache.commons.csv.CSVFormat var45 = var1.withIgnoreEmptyLines(false);
    boolean var46 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.QuoteMode var47 = var1.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var32.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test274");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    boolean var5 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    boolean var10 = var7.isCommentMarkerSet();
    boolean var11 = var7.getIgnoreHeaderCase();
    java.lang.String[] var13 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var14 = var7.withHeader(var13);
    org.apache.commons.csv.CSVFormat var15 = var4.withHeaderComments((java.lang.Object[])var13);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var18 = var17.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = var17.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var22 = var17.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var25 = var24.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var27 = var24.withNullString("");
    org.apache.commons.csv.CSVFormat var28 = var24.withIgnoreEmptyLines();
    java.lang.String var29 = var28.toString();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    boolean var33 = var31.isNullStringSet();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var31.withHeader(var35);
    org.apache.commons.csv.CSVFormat var37 = var28.withHeader(var35);
    org.apache.commons.csv.CSVFormat var38 = var17.withHeader(var35);
    java.lang.String var39 = var38.toString();
    java.lang.String[] var40 = var38.getHeader();
    org.apache.commons.csv.CSVFormat var41 = var15.withHeader(var40);
    java.lang.String var42 = var41.getNullString();
    java.lang.Character var43 = var41.getQuoteCharacter();
    boolean var44 = var41.getSkipHeaderRecord();
    java.lang.String[] var45 = var41.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var29.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var39.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test275");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getRecordNumber();
    java.util.List var8 = var6.getRecords();
    java.util.Map var9 = var6.getHeaderMap();
    boolean var10 = var6.isClosed();
    java.util.Iterator var11 = var6.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test276");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    java.util.Map var9 = var6.getHeaderMap();
    boolean var10 = var6.isClosed();
    long var11 = var6.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test277");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    java.lang.Character var21 = var18.getCommentMarker();
    java.lang.Character var22 = var18.getCommentMarker();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord();
    java.lang.String var27 = var26.toString();
    org.apache.commons.csv.CSVFormat var29 = var26.withNullString("");
    org.apache.commons.csv.CSVFormat var31 = var26.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var35 = var34.withIgnoreSurroundingSpaces();
    java.lang.Character var36 = var34.getCommentMarker();
    java.lang.String var37 = var34.getNullString();
    org.apache.commons.csv.CSVFormat var38 = var34.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var41 = var40.withAllowMissingColumnNames();
    boolean var42 = var40.isNullStringSet();
    java.lang.String[] var44 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var45 = var40.withHeader(var44);
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var48 = var47.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var49 = var47.withSkipHeaderRecord();
    boolean var50 = var47.isCommentMarkerSet();
    boolean var51 = var47.getIgnoreHeaderCase();
    java.lang.String[] var53 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var54 = var47.withHeader(var53);
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var57 = var56.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord();
    boolean var59 = var56.isCommentMarkerSet();
    boolean var60 = var56.getIgnoreHeaderCase();
    java.lang.String[] var62 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var63 = var56.withHeader(var62);
    org.apache.commons.csv.CSVFormat var64 = var47.withHeader(var62);
    java.lang.String var65 = var45.format((java.lang.Object[])var62);
    org.apache.commons.csv.CSVFormat var66 = var38.withHeader(var62);
    java.lang.String var67 = var31.format((java.lang.Object[])var62);
    org.apache.commons.csv.CSVFormat var68 = var18.withHeaderComments((java.lang.Object[])var62);
    boolean var69 = var18.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var27.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var65.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var67.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test278");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var7 = var6.isQuoteCharacterSet();
    java.lang.String[] var8 = var6.getHeader();
    java.lang.String var9 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    java.lang.String var20 = var19.toString();
    org.apache.commons.csv.CSVFormat var22 = var19.withNullString("");
    org.apache.commons.csv.CSVFormat var24 = var19.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var27 = var26.withAllowMissingColumnNames();
    boolean var28 = var26.isNullStringSet();
    java.lang.String[] var30 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var31 = var26.withHeader(var30);
    java.lang.String var32 = var24.format((java.lang.Object[])var30);
    java.lang.String var33 = var15.format((java.lang.Object[])var30);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var36 = var35.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var38 = var35.withNullString("");
    org.apache.commons.csv.CSVFormat var39 = var35.withIgnoreEmptyLines();
    java.lang.String[] var40 = var39.getHeaderComments();
    org.apache.commons.csv.CSVFormat var42 = var39.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var44 = var39.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var48 = var46.withSkipHeaderRecord();
    boolean var49 = var46.isCommentMarkerSet();
    boolean var50 = var46.getIgnoreHeaderCase();
    java.lang.String[] var52 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var53 = var46.withHeader(var52);
    org.apache.commons.csv.CSVFormat var54 = var39.withHeaderComments((java.lang.Object[])var52);
    java.lang.String var55 = var15.format((java.lang.Object[])var52);
    org.apache.commons.csv.CSVFormat var56 = var6.withHeaderComments((java.lang.Object[])var52);
    char var57 = var6.getDelimiter();
    org.apache.commons.csv.CSVFormat var59 = var6.withRecordSeparator("Delimiter=< > SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var61 = var6.withRecordSeparator('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var9.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var20.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var55.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test279");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    boolean var5 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var8 = var1.withAllowMissingColumnNames();
    boolean var9 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var10 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var17 = var12.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var18 = var17.getCommentMarker();
    org.apache.commons.csv.QuoteMode var19 = var17.getQuoteMode();
    org.apache.commons.csv.CSVFormat var21 = var17.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var23 = var21.withQuote((java.lang.Character)'a');
    boolean var24 = var23.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var26 = var23.withIgnoreEmptyLines(true);
    boolean var27 = var10.equals((java.lang.Object)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test280");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    boolean var9 = var7.isQuoteCharacterSet();
    boolean var10 = var7.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test281");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    java.lang.Character var3 = var1.getCommentMarker();
    boolean var4 = var1.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = var7.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test282");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    boolean var6 = var5.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode var8 = var5.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test283");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var15 = var10.withSkipHeaderRecord();
    boolean var16 = var15.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var19 = var15.withEscape('a');
    boolean var20 = var15.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test284");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withIgnoreSurroundingSpaces(true);
    boolean var5 = var1.isCommentMarkerSet();
    java.lang.Character var6 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var8 = var1.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var10 = var1.withQuote('4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var12 = var1.withEscape((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test285");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var3.withRecordSeparator(' ');
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = var12.withCommentMarker('a');
    java.lang.String[] var16 = var12.getHeaderComments();
    boolean var17 = var12.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var13.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test286");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    java.lang.String var9 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Delimiter=< > NullString=<> SkipHeaderRecord:false"+ "'", var9.equals("Delimiter=< > NullString=<> SkipHeaderRecord:false"));

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test287");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreEmptyLines(false);
    java.lang.String[] var9 = var5.getHeader();
    char var10 = var5.getDelimiter();
    boolean var11 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var5.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test288");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var7 = var6.isQuoteCharacterSet();
    java.lang.String[] var8 = var6.getHeader();
    java.lang.String var9 = var6.getNullString();
    boolean var10 = var6.isEscapeCharacterSet();
    java.lang.Character var11 = var6.getEscapeCharacter();
    boolean var12 = var6.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var9.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test289");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("4");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test290");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var7 = var2.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote('#');
    boolean var10 = var9.getIgnoreSurroundingSpaces();
    java.lang.Character var11 = var9.getCommentMarker();
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse(" ", var9);
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var20 = var18.withRecordSeparator("Delimiter=< > SkipHeaderRecord:true");
    boolean var21 = var20.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var23 = var20.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var26 = var25.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var28 = var25.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var31 = var30.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var33 = var30.withNullString("");
    org.apache.commons.csv.CSVFormat var34 = var30.withIgnoreEmptyLines();
    java.lang.String[] var35 = var34.getHeaderComments();
    org.apache.commons.csv.CSVFormat var37 = var34.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var39 = var34.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var40 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var41 = var39.withHeaderComments((java.lang.Object[])var40);
    org.apache.commons.csv.CSVFormat var42 = var25.withHeaderComments((java.lang.Object[])var40);
    org.apache.commons.csv.CSVFormat var43 = var20.withHeaderComments((java.lang.Object[])var40);
    org.apache.commons.csv.CSVFormat var44 = var9.withHeaderComments((java.lang.Object[])var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test291");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    java.lang.Character var9 = var8.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var12 = var11.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var14 = var11.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var16 = var11.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var19 = var18.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = var18.withNullString("");
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreEmptyLines();
    java.lang.String var23 = var22.toString();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var26 = var25.withAllowMissingColumnNames();
    boolean var27 = var25.isNullStringSet();
    java.lang.String[] var29 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var30 = var25.withHeader(var29);
    org.apache.commons.csv.CSVFormat var31 = var22.withHeader(var29);
    org.apache.commons.csv.CSVFormat var32 = var11.withHeader(var29);
    org.apache.commons.csv.CSVFormat var33 = var32.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var34 = var32.withIgnoreEmptyLines();
    java.lang.String[] var35 = var32.getHeader();
    java.lang.String[] var36 = var32.getHeaderComments();
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var39 = var38.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var41 = var38.withNullString("");
    org.apache.commons.csv.CSVFormat var42 = var38.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var44 = var42.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var46 = var44.withSkipHeaderRecord(false);
    char var47 = var44.getDelimiter();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var50 = var49.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var52 = var49.withRecordSeparator("hi!");
    boolean var53 = var52.isCommentMarkerSet();
    java.lang.Character var54 = var52.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var56 = var52.withAllowMissingColumnNames(true);
    boolean var57 = var56.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var59 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var60 = var59.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var61 = var59.withSkipHeaderRecord();
    java.lang.String var62 = var61.toString();
    org.apache.commons.csv.CSVFormat var64 = var61.withNullString("");
    org.apache.commons.csv.CSVFormat var66 = var64.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var68 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var69 = var68.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var70 = var68.withSkipHeaderRecord();
    boolean var71 = var68.isCommentMarkerSet();
    boolean var72 = var68.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var74 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var75 = var74.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var77 = var74.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var79 = var74.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var80 = var79.withIgnoreSurroundingSpaces();
    java.lang.Object[] var81 = new java.lang.Object[] { var79};
    java.lang.String var82 = var68.format(var81);
    java.lang.String[] var84 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var85 = var68.withHeader(var84);
    org.apache.commons.csv.CSVFormat var86 = var64.withHeader(var84);
    java.lang.String var87 = var56.format((java.lang.Object[])var84);
    java.lang.String var88 = var44.format((java.lang.Object[])var84);
    java.lang.String var89 = var32.format((java.lang.Object[])var84);
    java.lang.String var90 = var8.format((java.lang.Object[])var84);
    org.apache.commons.csv.CSVFormat var92 = var8.withQuote((java.lang.Character)'a');
    java.lang.Character var93 = var92.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var23.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var62.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var82.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var87.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var88.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var89.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var90.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test292");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    boolean var7 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var5.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var14 = var13.withAllowMissingColumnNames();
    boolean var15 = var13.isNullStringSet();
    java.lang.String[] var17 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var18 = var13.withHeader(var17);
    org.apache.commons.csv.QuoteMode var19 = var18.getQuoteMode();
    org.apache.commons.csv.CSVFormat var21 = var18.withIgnoreEmptyLines(false);
    java.lang.String var22 = var21.toString();
    java.lang.Character var23 = var21.getEscapeCharacter();
    java.lang.String var24 = var21.getNullString();
    org.apache.commons.csv.CSVFormat var26 = var21.withNullString("Delimiter=< > SurroundingSpaces:ignored SkipHeaderRecord:true");
    boolean var27 = var11.equals((java.lang.Object)"Delimiter=< > SurroundingSpaces:ignored SkipHeaderRecord:true");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var22.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test293");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines(true);
    java.lang.String var9 = var1.toString();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var15 = var12.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var16 = org.apache.commons.csv.CSVParser.parse("", var15);
    long var17 = var16.getCurrentLineNumber();
    long var18 = var16.getCurrentLineNumber();
    var16.close();
    boolean var20 = var16.isClosed();
    java.util.Iterator var21 = var16.iterator();
    java.util.Iterator var22 = var16.iterator();
    var16.close();
    boolean var24 = var16.isClosed();
    boolean var25 = var1.equals((java.lang.Object)var16);
    boolean var26 = var1.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Delimiter=< > SkipHeaderRecord:false"+ "'", var9.equals("Delimiter=< > SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test294");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    boolean var5 = var2.isCommentMarkerSet();
    java.lang.Character var6 = var2.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var7 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withRecordSeparator('4');
    boolean var10 = var9.isQuoteCharacterSet();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:false Header:[]", var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test295");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    java.lang.String[] var17 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var16.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var22 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var23 = var21.withHeaderComments((java.lang.Object[])var22);
    boolean var24 = var10.equals((java.lang.Object)var23);
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var29 = var28.isCommentMarkerSet();
    boolean var30 = var28.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var31 = org.apache.commons.csv.CSVParser.parse("", var28);
    boolean var32 = var28.getSkipHeaderRecord();
    java.lang.Character var33 = var28.getEscapeCharacter();
    boolean var35 = var28.equals((java.lang.Object)100.0d);
    boolean var36 = var25.equals((java.lang.Object)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test296");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var15 = var12.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test297");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withDelimiter('4');
    boolean var21 = var20.isQuoteCharacterSet();
    java.lang.Character var22 = var20.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test298");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    char var10 = var7.getDelimiter();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withRecordSeparator("hi!");
    boolean var16 = var15.isCommentMarkerSet();
    java.lang.Character var17 = var15.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var19 = var15.withAllowMissingColumnNames(true);
    boolean var20 = var19.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    java.lang.String var25 = var24.toString();
    org.apache.commons.csv.CSVFormat var27 = var24.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var27.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord();
    boolean var34 = var31.isCommentMarkerSet();
    boolean var35 = var31.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var38 = var37.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var40 = var37.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var42 = var37.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var43 = var42.withIgnoreSurroundingSpaces();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.String var45 = var31.format(var44);
    java.lang.String[] var47 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var48 = var31.withHeader(var47);
    org.apache.commons.csv.CSVFormat var49 = var27.withHeader(var47);
    java.lang.String var50 = var19.format((java.lang.Object[])var47);
    java.lang.String var51 = var7.format((java.lang.Object[])var47);
    org.apache.commons.csv.CSVFormat var53 = var7.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var55 = var7.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var25.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var45.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var50.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var51.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test299");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("4");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test300");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreEmptyLines(true);
    java.lang.String[] var7 = var6.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test301");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var7 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:false", var2);
    java.util.List var8 = var7.getRecords();
    var7.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test302");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.isNullStringSet();
    java.lang.Character var7 = var3.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var8 = var3.withAllowMissingColumnNames();
    java.lang.String var9 = var3.toString();
    org.apache.commons.csv.CSVFormat var11 = var3.withIgnoreSurroundingSpaces(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var9.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test303");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var7 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var17 = var16.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var19 = var16.withNullString("");
    org.apache.commons.csv.CSVFormat var20 = var16.withIgnoreEmptyLines();
    java.lang.String var21 = var20.toString();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    boolean var25 = var23.isNullStringSet();
    java.lang.String[] var27 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var28 = var23.withHeader(var27);
    org.apache.commons.csv.CSVFormat var29 = var20.withHeader(var27);
    java.lang.String var30 = var13.format((java.lang.Object[])var27);
    org.apache.commons.csv.CSVFormat var31 = var6.withHeaderComments((java.lang.Object[])var27);
    org.apache.commons.csv.QuoteMode var32 = var31.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var21.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test304");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    boolean var5 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var8 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var1.withQuote((java.lang.Character)'4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var12 = var1.withQuote((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test305");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    boolean var9 = var6.isClosed();
    java.util.Map var10 = var6.getHeaderMap();
    java.util.Iterator var11 = var6.iterator();
    long var12 = var6.getCurrentLineNumber();
    long var13 = var6.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test306");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var12 = var11.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var14 = var11.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var16 = var11.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var17 = var16.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var20 = var19.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var23 = var21.withAllowMissingColumnNames(true);
    java.lang.String var24 = var23.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var27 = var26.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var29 = var26.withNullString("");
    org.apache.commons.csv.CSVFormat var30 = var26.withIgnoreEmptyLines();
    java.lang.String var31 = var30.toString();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    boolean var35 = var33.isNullStringSet();
    java.lang.String[] var37 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var38 = var33.withHeader(var37);
    org.apache.commons.csv.CSVFormat var39 = var30.withHeader(var37);
    java.lang.String var40 = var23.format((java.lang.Object[])var37);
    org.apache.commons.csv.CSVFormat var41 = var16.withHeaderComments((java.lang.Object[])var37);
    boolean var42 = var9.equals((java.lang.Object)var16);
    boolean var43 = var9.isCommentMarkerSet();
    boolean var44 = var9.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var31.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test307");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreSurroundingSpaces();
    java.lang.Character var3 = var1.getCommentMarker();
    org.apache.commons.csv.CSVFormat var4 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var7 = var6.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var9 = var6.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var11 = var6.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var12 = var11.getCommentMarker();
    org.apache.commons.csv.QuoteMode var13 = var11.getQuoteMode();
    org.apache.commons.csv.CSVFormat var15 = var11.withEscape((java.lang.Character)'a');
    boolean var16 = var15.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord();
    boolean var21 = var18.isCommentMarkerSet();
    boolean var22 = var18.getIgnoreHeaderCase();
    java.lang.String[] var24 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var25 = var18.withHeader(var24);
    org.apache.commons.csv.CSVFormat var26 = var15.withHeaderComments((java.lang.Object[])var24);
    java.lang.String var27 = var1.format((java.lang.Object[])var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var27.equals("Delimiter=< > SkipHeaderRecord:true"));

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test308");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var7 = var6.getCommentMarker();
    org.apache.commons.csv.QuoteMode var8 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    boolean var14 = var12.isNullStringSet();
    boolean var15 = var12.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var12.withCommentMarker((java.lang.Character)'4');
    boolean var18 = var10.equals((java.lang.Object)var12);
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var21 = var20.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var23 = var20.withNullString("");
    org.apache.commons.csv.CSVFormat var24 = var20.withIgnoreEmptyLines();
    java.lang.String[] var25 = var24.getHeaderComments();
    org.apache.commons.csv.CSVFormat var27 = var24.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var29 = var27.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var30 = var29.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var32 = var30.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var34 = var32.withCommentMarker((java.lang.Character)'4');
    java.lang.Character var35 = var34.getQuoteCharacter();
    boolean var36 = var34.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var39 = var38.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var40 = var38.withSkipHeaderRecord();
    java.lang.String var41 = var40.toString();
    java.lang.String[] var42 = var40.getHeader();
    org.apache.commons.csv.CSVFormat var43 = var40.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var46 = var45.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var47 = var45.withSkipHeaderRecord();
    java.lang.String var48 = var47.toString();
    org.apache.commons.csv.CSVFormat var50 = var47.withNullString("");
    org.apache.commons.csv.CSVFormat var52 = var50.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var55 = var54.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord();
    boolean var57 = var54.isCommentMarkerSet();
    boolean var58 = var54.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var60 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var61 = var60.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var63 = var60.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var65 = var60.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var66 = var65.withIgnoreSurroundingSpaces();
    java.lang.Object[] var67 = new java.lang.Object[] { var65};
    java.lang.String var68 = var54.format(var67);
    java.lang.String[] var70 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var71 = var54.withHeader(var70);
    org.apache.commons.csv.CSVFormat var72 = var50.withHeader(var70);
    java.lang.String var73 = var43.format((java.lang.Object[])var70);
    org.apache.commons.csv.CSVFormat var74 = var34.withHeader(var70);
    java.lang.String var75 = var10.format((java.lang.Object[])var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var41.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var48.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var68.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var73.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var75.equals("Default Excel MySQL RFC4180 TDF"));

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test309");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getRecordNumber();
    long var8 = var6.getRecordNumber();
    var6.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var10 = var6.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test310");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var8.withQuote('4');
    java.lang.String var13 = var8.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test311");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    boolean var7 = var1.isNullStringSet();
    org.apache.commons.csv.QuoteMode var8 = var1.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test312");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var2.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var2.withDelimiter('a');
    boolean var9 = var8.isCommentMarkerSet();
    org.apache.commons.csv.QuoteMode var10 = var8.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test313");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var7 = var6.isQuoteCharacterSet();
    java.lang.String[] var8 = var6.getHeader();
    org.apache.commons.csv.CSVFormat var10 = var6.withEscape('a');
    boolean var11 = var10.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var13 = var10.withAllowMissingColumnNames(false);
    char var14 = var13.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == ' ');

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test314");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = var10.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test315");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var6.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var13 = var10.withCommentMarker((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test316");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var15 = var10.withSkipHeaderRecord();
    java.lang.String[] var16 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var18 = var10.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var20 = var18.withEscape((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test317");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.QuoteMode var4 = var1.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test318");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withAllowMissingColumnNames(true);
    char var7 = var6.getDelimiter();
    boolean var8 = var6.isCommentMarkerSet();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false", var6);
    char var10 = var6.getDelimiter();
    boolean var11 = var6.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test319");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var9 = var7.withNullString("ALL MINIMAL NON_NUMERIC NONE");
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test320");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var3.withRecordSeparator(' ');
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = var12.withCommentMarker('a');
    org.apache.commons.csv.QuoteMode var16 = var15.getQuoteMode();
    boolean var17 = var15.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var13.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test321");


    org.apache.commons.csv.CSVFormat var3 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var4 = var3.isCommentMarkerSet();
    boolean var5 = var3.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var3);
    boolean var7 = var3.getSkipHeaderRecord();
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > CommentStart=<4> RecordSeparator=<Default Excel MySQL RFC4180 TDF> EmptyLines:ignored SkipHeaderRecord:true", var3);
    boolean var9 = var8.isClosed();
    java.util.Iterator var10 = var8.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test322");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    java.lang.String[] var5 = var1.getHeaderComments();
    char var6 = var1.getDelimiter();
    org.apache.commons.csv.CSVFormat var8 = var1.withDelimiter('a');
    java.lang.String var9 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Delimiter=< > SkipHeaderRecord:false"+ "'", var9.equals("Delimiter=< > SkipHeaderRecord:false"));

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test323");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=< > QuoteChar=<#> NullString=<Delimiter=< > SkipHeaderRecord:true> SurroundingSpaces:ignored SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test324");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    boolean var3 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('a');
    java.lang.String var8 = var7.getRecordSeparator();
    boolean var9 = var7.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test325");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    boolean var5 = var4.isCommentMarkerSet();
    boolean var6 = var4.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test326");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.Character var4 = var3.getCommentMarker();
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord(false);
    boolean var7 = var6.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test327");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var2.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var2.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var10 = var2.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var17 = var12.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var18 = var17.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var21 = var20.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var22.withAllowMissingColumnNames(true);
    java.lang.String var25 = var24.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var28 = var27.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var30 = var27.withNullString("");
    org.apache.commons.csv.CSVFormat var31 = var27.withIgnoreEmptyLines();
    java.lang.String var32 = var31.toString();
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var35 = var34.withAllowMissingColumnNames();
    boolean var36 = var34.isNullStringSet();
    java.lang.String[] var38 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var39 = var34.withHeader(var38);
    org.apache.commons.csv.CSVFormat var40 = var31.withHeader(var38);
    java.lang.String var41 = var24.format((java.lang.Object[])var38);
    org.apache.commons.csv.CSVFormat var42 = var17.withHeaderComments((java.lang.Object[])var38);
    java.lang.String var43 = var10.format((java.lang.Object[])var38);
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var46 = var45.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var47 = var45.withSkipHeaderRecord();
    boolean var48 = var45.isCommentMarkerSet();
    boolean var49 = var45.getIgnoreHeaderCase();
    java.lang.String[] var51 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var52 = var45.withHeader(var51);
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var55 = var54.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord();
    boolean var57 = var54.isCommentMarkerSet();
    boolean var58 = var54.getIgnoreHeaderCase();
    java.lang.String[] var60 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var61 = var54.withHeader(var60);
    org.apache.commons.csv.CSVFormat var62 = var45.withHeader(var60);
    org.apache.commons.csv.CSVFormat var64 = var62.withIgnoreSurroundingSpaces(true);
    java.lang.Character var65 = var62.getCommentMarker();
    org.apache.commons.csv.CSVFormat var66 = var62.withIgnoreEmptyLines();
    java.lang.String[] var67 = var62.getHeader();
    org.apache.commons.csv.CSVFormat var68 = var10.withHeader(var67);
    org.apache.commons.csv.CSVFormat var70 = var68.withCommentMarker((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var32.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test328");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    boolean var10 = var8.getIgnoreSurroundingSpaces();
    boolean var11 = var8.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord();
    java.lang.String var17 = var16.toString();
    org.apache.commons.csv.CSVFormat var19 = var16.withNullString("");
    org.apache.commons.csv.CSVFormat var21 = var16.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var22 = var21.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var23 = var22.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var24 = org.apache.commons.csv.CSVParser.parse("DefaultaExcelaMySQLaRFC4180aTDF", var22);
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var27 = var26.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var29 = var26.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var31 = var26.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var34 = var33.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var36 = var33.withNullString("");
    org.apache.commons.csv.CSVFormat var37 = var33.withIgnoreEmptyLines();
    java.lang.String var38 = var37.toString();
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var41 = var40.withAllowMissingColumnNames();
    boolean var42 = var40.isNullStringSet();
    java.lang.String[] var44 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var45 = var40.withHeader(var44);
    org.apache.commons.csv.CSVFormat var46 = var37.withHeader(var44);
    org.apache.commons.csv.CSVFormat var47 = var26.withHeader(var44);
    org.apache.commons.csv.CSVFormat var48 = var47.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode var49 = var48.getQuoteMode();
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var52 = var51.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var53 = var51.withSkipHeaderRecord();
    java.lang.String var54 = var53.toString();
    org.apache.commons.csv.CSVFormat var56 = var53.withNullString("");
    org.apache.commons.csv.CSVFormat var58 = var53.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var60 = var53.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var62 = var53.withRecordSeparator(' ');
    java.lang.String var63 = var62.toString();
    org.apache.commons.csv.CSVFormat var65 = var62.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var67 = var65.withEscape('4');
    org.apache.commons.csv.CSVFormat var69 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var70 = var69.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var71 = var69.withSkipHeaderRecord();
    java.lang.String var72 = var71.toString();
    org.apache.commons.csv.CSVFormat var74 = var71.withNullString("");
    org.apache.commons.csv.CSVFormat var76 = var71.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var78 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var79 = var78.withAllowMissingColumnNames();
    boolean var80 = var78.isNullStringSet();
    java.lang.String[] var82 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var83 = var78.withHeader(var82);
    java.lang.String var84 = var76.format((java.lang.Object[])var82);
    java.lang.String var85 = var67.format((java.lang.Object[])var82);
    org.apache.commons.csv.CSVFormat var86 = var48.withHeaderComments((java.lang.Object[])var82);
    java.lang.String var87 = var22.format((java.lang.Object[])var82);
    java.lang.String var88 = var8.format((java.lang.Object[])var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var17.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var38.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var54.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var63.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var72.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + ""+ "'", var84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + ""+ "'", var85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + ""+ "'", var88.equals(""));

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test329");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("", var13);
    boolean var15 = var13.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test330");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=< > NullString=<> SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test331");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = var10.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var15 = var13.withRecordSeparator("Default Excel MySQL RFC4180 TDFDelimiter=< > SkipHeaderRecord:true");
    java.lang.String[] var16 = var15.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test332");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    boolean var3 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('a');
    boolean var8 = var7.isNullStringSet();
    org.apache.commons.csv.CSVFormat var10 = var7.withNullString("Delimiter=< > RecordSeparator=<4> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var7.withRecordSeparator("ALL MINIMAL NON_NUMERIC NONEDelimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var13 = var7.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test333");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var22 = var18.withEscape('a');
    boolean var23 = var18.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var25 = var18.withQuote((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test334");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withRecordSeparator("#");
    org.apache.commons.csv.CSVFormat var5 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var5.withNullString("");
    boolean var9 = var5.isNullStringSet();
    boolean var10 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    java.lang.Character var16 = var12.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var17 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var12.withIgnoreEmptyLines(true);
    boolean var20 = var5.equals((java.lang.Object)var12);
    boolean var21 = var1.equals((java.lang.Object)var5);
    boolean var22 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord();
    java.lang.String var27 = var26.toString();
    org.apache.commons.csv.CSVFormat var29 = var26.withNullString("");
    org.apache.commons.csv.CSVFormat var31 = var26.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var33 = var26.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var35 = var26.withRecordSeparator(' ');
    java.lang.String var36 = var35.toString();
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var39 = var38.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var41 = var38.withRecordSeparator("hi!");
    boolean var42 = var41.isCommentMarkerSet();
    java.lang.Character var43 = var41.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var45 = var41.withAllowMissingColumnNames(true);
    boolean var46 = var45.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var49 = var48.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var50 = var48.withSkipHeaderRecord();
    java.lang.String var51 = var50.toString();
    org.apache.commons.csv.CSVFormat var53 = var50.withNullString("");
    org.apache.commons.csv.CSVFormat var55 = var53.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var58 = var57.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var59 = var57.withSkipHeaderRecord();
    boolean var60 = var57.isCommentMarkerSet();
    boolean var61 = var57.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var63 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var64 = var63.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var66 = var63.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var68 = var63.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var69 = var68.withIgnoreSurroundingSpaces();
    java.lang.Object[] var70 = new java.lang.Object[] { var68};
    java.lang.String var71 = var57.format(var70);
    java.lang.String[] var73 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var74 = var57.withHeader(var73);
    org.apache.commons.csv.CSVFormat var75 = var53.withHeader(var73);
    java.lang.String var76 = var45.format((java.lang.Object[])var73);
    java.lang.String var77 = var35.format((java.lang.Object[])var73);
    org.apache.commons.csv.CSVFormat var78 = var5.withHeaderComments((java.lang.Object[])var73);
    boolean var79 = var78.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var27.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var36.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var51.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var71.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var76.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var77.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test335");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    java.util.Map var9 = var6.getHeaderMap();
    long var10 = var6.getRecordNumber();
    long var11 = var6.getCurrentLineNumber();
    java.util.Map var12 = var6.getHeaderMap();
    java.util.List var13 = var6.getRecords();
    var6.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test336");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    boolean var5 = var4.isCommentMarkerSet();
    java.lang.Character var6 = var4.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(true);
    boolean var9 = var4.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    boolean var14 = var11.isCommentMarkerSet();
    java.lang.Character var15 = var11.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var16 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var11.withIgnoreEmptyLines(true);
    boolean var19 = var18.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var22 = var20.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var24 = var20.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var27 = var26.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var29 = var26.withNullString("");
    org.apache.commons.csv.CSVFormat var30 = var26.withIgnoreEmptyLines();
    java.lang.String[] var31 = var30.getHeaderComments();
    org.apache.commons.csv.CSVFormat var33 = var30.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var35 = var30.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var36 = var35.getQuoteMode();
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var39 = var38.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var40 = var38.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var42 = var40.withAllowMissingColumnNames(true);
    java.lang.String var43 = var42.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var46 = var45.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var48 = var45.withNullString("");
    org.apache.commons.csv.CSVFormat var49 = var45.withIgnoreEmptyLines();
    java.lang.String var50 = var49.toString();
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var53 = var52.withAllowMissingColumnNames();
    boolean var54 = var52.isNullStringSet();
    java.lang.String[] var56 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var57 = var52.withHeader(var56);
    org.apache.commons.csv.CSVFormat var58 = var49.withHeader(var56);
    java.lang.String var59 = var42.format((java.lang.Object[])var56);
    org.apache.commons.csv.CSVFormat var60 = var35.withHeader(var56);
    org.apache.commons.csv.CSVFormat var61 = var24.withHeader(var56);
    org.apache.commons.csv.CSVFormat var62 = var4.withHeaderComments((java.lang.Object[])var56);
    boolean var63 = var62.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var50.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test337");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var17 = var16.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var19 = var16.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var21 = var16.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var22 = var21.withIgnoreSurroundingSpaces();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.String var24 = var10.format(var23);
    java.lang.String[] var26 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var27 = var10.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var6.withHeader(var26);
    boolean var29 = var6.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var24.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test338");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var7 = var2.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var8 = var7.getCommentMarker();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("", var7);
    boolean var10 = var9.isClosed();
    long var11 = var9.getCurrentLineNumber();
    long var12 = var9.getRecordNumber();
    long var13 = var9.getRecordNumber();
    java.util.Map var14 = var9.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test339");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    boolean var9 = var6.isClosed();
    java.util.Iterator var10 = var6.iterator();
    java.util.Iterator var11 = var6.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test340");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    boolean var9 = var6.isClosed();
    java.util.Map var10 = var6.getHeaderMap();
    long var11 = var6.getRecordNumber();
    java.util.Map var12 = var6.getHeaderMap();
    java.util.List var13 = var6.getRecords();
    boolean var14 = var6.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test341");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote('#');
    org.apache.commons.csv.CSVFormat var9 = var6.withSkipHeaderRecord();
    char var10 = var9.getDelimiter();
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test342");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    java.lang.String[] var9 = var8.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test343");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    boolean var11 = var8.isCommentMarkerSet();
    boolean var12 = var8.getIgnoreHeaderCase();
    java.lang.String[] var14 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var15 = var8.withHeader(var14);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    boolean var20 = var17.isCommentMarkerSet();
    boolean var21 = var17.getIgnoreHeaderCase();
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var17.withHeader(var23);
    org.apache.commons.csv.CSVFormat var25 = var8.withHeader(var23);
    java.lang.String var26 = var6.format((java.lang.Object[])var23);
    org.apache.commons.csv.CSVFormat var28 = var6.withQuote('4');
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var31 = var30.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var33 = var30.withNullString("");
    org.apache.commons.csv.CSVFormat var34 = var30.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var36 = var34.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withQuote(' ');
    boolean var39 = var38.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var40 = var38.withAllowMissingColumnNames();
    boolean var41 = var6.equals((java.lang.Object)var38);
    org.apache.commons.csv.CSVFormat var42 = var38.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var45 = var44.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var46 = var44.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var48 = var46.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var49 = var46.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var51 = var49.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var53 = var51.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var55 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var56 = var55.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var58 = var55.withNullString("");
    org.apache.commons.csv.CSVFormat var59 = var55.withIgnoreEmptyLines();
    java.lang.String[] var60 = var59.getHeaderComments();
    org.apache.commons.csv.CSVFormat var62 = var59.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var64 = var59.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var65 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var66 = var64.withHeaderComments((java.lang.Object[])var65);
    boolean var67 = var53.equals((java.lang.Object)var66);
    org.apache.commons.csv.CSVFormat var68 = var66.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var70 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var71 = var70.getDelimiter();
    java.lang.String var72 = var70.getNullString();
    boolean var73 = var70.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var74 = var70.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var76 = var70.withNullString("");
    org.apache.commons.csv.CSVFormat var78 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var79 = var78.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var80 = var78.withSkipHeaderRecord();
    boolean var81 = var78.isCommentMarkerSet();
    boolean var82 = var78.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var84 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var85 = var84.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var87 = var84.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var89 = var84.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var90 = var89.withIgnoreSurroundingSpaces();
    java.lang.Object[] var91 = new java.lang.Object[] { var89};
    java.lang.String var92 = var78.format(var91);
    java.lang.String[] var94 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var95 = var78.withHeader(var94);
    org.apache.commons.csv.CSVFormat var96 = var70.withHeaderComments((java.lang.Object[])var94);
    org.apache.commons.csv.CSVFormat var97 = var66.withHeader(var94);
    java.lang.String[] var98 = var97.getHeader();
    org.apache.commons.csv.CSVFormat var99 = var38.withHeader(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var26.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var92.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test344");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames();
    boolean var4 = var3.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var5 = var3.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test345");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var7 = var6.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var9 = var6.withNullString("");
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreEmptyLines();
    java.lang.String[] var11 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var15 = var10.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var16 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var17 = var15.withHeaderComments((java.lang.Object[])var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeaderComments((java.lang.Object[])var16);
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var21 = var20.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var22.withIgnoreSurroundingSpaces(true);
    boolean var25 = var24.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    java.lang.String var30 = var29.toString();
    org.apache.commons.csv.CSVFormat var32 = var29.withNullString("");
    org.apache.commons.csv.CSVFormat var34 = var29.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var37 = var36.withAllowMissingColumnNames();
    boolean var38 = var36.isNullStringSet();
    java.lang.String[] var40 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var41 = var36.withHeader(var40);
    java.lang.String var42 = var34.format((java.lang.Object[])var40);
    org.apache.commons.csv.CSVFormat var43 = var24.withHeader(var40);
    java.lang.String var44 = var18.format((java.lang.Object[])var40);
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var48 = var46.withSkipHeaderRecord();
    java.lang.String var49 = var48.toString();
    java.lang.String[] var50 = var48.getHeader();
    org.apache.commons.csv.CSVFormat var51 = var48.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var53 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var54 = var53.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var55 = var53.withSkipHeaderRecord();
    java.lang.String var56 = var55.toString();
    org.apache.commons.csv.CSVFormat var58 = var55.withNullString("");
    org.apache.commons.csv.CSVFormat var60 = var58.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var62 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var63 = var62.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var64 = var62.withSkipHeaderRecord();
    boolean var65 = var62.isCommentMarkerSet();
    boolean var66 = var62.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var68 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var69 = var68.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var71 = var68.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var73 = var68.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var74 = var73.withIgnoreSurroundingSpaces();
    java.lang.Object[] var75 = new java.lang.Object[] { var73};
    java.lang.String var76 = var62.format(var75);
    java.lang.String[] var78 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var79 = var62.withHeader(var78);
    org.apache.commons.csv.CSVFormat var80 = var58.withHeader(var78);
    java.lang.String var81 = var51.format((java.lang.Object[])var78);
    org.apache.commons.csv.CSVFormat var82 = var18.withHeaderComments((java.lang.Object[])var78);
    java.lang.Character var83 = var18.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var30.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var49.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var56.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var76.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var81.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test346");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var8 = var7.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var7.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var12 = var7.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.String var15 = var1.format(var14);
    java.lang.String var16 = var1.getNullString();
    char var17 = var1.getDelimiter();
    java.lang.String var18 = var1.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var15.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test347");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreEmptyLines(false);
    java.lang.String[] var9 = var5.getHeader();
    org.apache.commons.csv.CSVFormat var11 = var5.withNullString("DefaultaExcelaMySQLaRFC4180aTDF");
    boolean var12 = var11.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test348");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var7 = var6.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord();
    java.lang.String var9 = var8.toString();
    java.lang.String[] var10 = var8.getHeader();
    org.apache.commons.csv.CSVFormat var11 = var8.withAllowMissingColumnNames();
    java.lang.String[] var12 = var11.getHeaderComments();
    org.apache.commons.csv.CSVFormat var14 = var11.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var17 = var16.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var19 = var16.withNullString("");
    org.apache.commons.csv.CSVFormat var20 = var16.withIgnoreEmptyLines();
    java.lang.String[] var21 = var20.getHeaderComments();
    org.apache.commons.csv.CSVFormat var23 = var20.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var25 = var20.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var26 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var27 = var25.withHeaderComments((java.lang.Object[])var26);
    org.apache.commons.csv.CSVFormat var28 = var11.withHeaderComments((java.lang.Object[])var26);
    boolean var29 = var28.getIgnoreSurroundingSpaces();
    boolean var30 = var4.equals((java.lang.Object)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var9.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test349");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = var10.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var18 = var6.equals((java.lang.Object)var17);
    org.apache.commons.csv.CSVFormat var20 = var6.withDelimiter('4');
    java.lang.String var21 = var20.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false"+ "'", var21.equals("Delimiter=<4> SkipHeaderRecord:false"));

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test350");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var7.withAllowMissingColumnNames(true);
    boolean var10 = var7.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var7.withEscape((java.lang.Character)'a');
    boolean var13 = var7.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test351");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var10 = var1.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var12 = var1.withDelimiter('4');
    boolean var13 = var12.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test352");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDF", var8);
    java.util.List var10 = var9.getRecords();
    long var11 = var9.getRecordNumber();
    boolean var12 = var9.isClosed();
    long var13 = var9.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test353");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreEmptyLines(false);
    char var11 = var10.getDelimiter();
    boolean var12 = var10.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test354");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreHeaderCase(false);
    boolean var10 = var7.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var7.withIgnoreEmptyLines(true);
    boolean var13 = var7.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test355");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.QuoteMode var11 = var8.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = var8.withQuote('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var14 = org.apache.commons.csv.CSVFormat.Predefined.values();
    java.lang.String var15 = var13.format((java.lang.Object[])var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Default Excel MySQL 4RFC441804 TDF"+ "'", var15.equals("Default Excel MySQL 4RFC441804 TDF"));

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test356");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    boolean var7 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var9 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator("Delimiter=< > SkipHeaderRecord:true Header:[]");
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test357");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    char var10 = var7.getDelimiter();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withRecordSeparator("hi!");
    boolean var16 = var15.isCommentMarkerSet();
    java.lang.Character var17 = var15.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var19 = var15.withAllowMissingColumnNames(true);
    boolean var20 = var19.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    java.lang.String var25 = var24.toString();
    org.apache.commons.csv.CSVFormat var27 = var24.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var27.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord();
    boolean var34 = var31.isCommentMarkerSet();
    boolean var35 = var31.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var38 = var37.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var40 = var37.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var42 = var37.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var43 = var42.withIgnoreSurroundingSpaces();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.String var45 = var31.format(var44);
    java.lang.String[] var47 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var48 = var31.withHeader(var47);
    org.apache.commons.csv.CSVFormat var49 = var27.withHeader(var47);
    java.lang.String var50 = var19.format((java.lang.Object[])var47);
    java.lang.String var51 = var7.format((java.lang.Object[])var47);
    java.lang.String var52 = var7.getNullString();
    org.apache.commons.csv.CSVFormat var54 = var7.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var56 = var54.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var25.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var45.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var50.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var51.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test358");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    boolean var16 = var12.getIgnoreHeaderCase();
    java.lang.String[] var18 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var19 = var12.withHeader(var18);
    org.apache.commons.csv.CSVFormat var20 = var5.withHeaderComments((java.lang.Object[])var18);
    org.apache.commons.csv.CSVFormat var22 = var20.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var24 = var22.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test359");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withRecordSeparator("hi!");
    boolean var6 = var5.isCommentMarkerSet();
    java.lang.String[] var7 = var5.getHeader();
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false", var5);
    java.util.Map var9 = var8.getHeaderMap();
    long var10 = var8.getRecordNumber();
    java.util.Map var11 = var8.getHeaderMap();
    long var12 = var8.getCurrentLineNumber();
    boolean var13 = var8.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test360");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    boolean var5 = var4.getIgnoreEmptyLines();
    boolean var6 = var4.getAllowMissingColumnNames();
    java.lang.String[] var7 = var4.getHeader();
    char var8 = var4.getDelimiter();
    boolean var9 = var4.getIgnoreSurroundingSpaces();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var11 = var4.withQuote((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test361");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var6.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = var6.withCommentMarker('a');
    java.lang.Character var13 = var12.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 'a'+ "'", var13.equals('a'));

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test362");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var3.withSkipHeaderRecord();
    boolean var6 = var5.getAllowMissingColumnNames();
    boolean var7 = var5.getAllowMissingColumnNames();
    char var8 = var5.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == ' ');

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test363");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.QuoteMode var11 = var8.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = var8.withQuote('4');
    boolean var14 = var13.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test364");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Default Excel MySQL RFC4180 TDFDelimiter=< > SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test365");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.isNullStringSet();
    java.lang.Character var7 = var3.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var8 = var3.withAllowMissingColumnNames();
    boolean var9 = var3.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var11 = var3.withRecordSeparator("ALL MINIMAL NON_NUMERIC NONEDelimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var13 = var3.withRecordSeparator("Delimiter=< > SkipHeaderRecord:false");
    boolean var14 = var13.isCommentMarkerSet();
    boolean var15 = var13.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test366");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    java.lang.Character var3 = var1.getEscapeCharacter();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var5 = var1.withQuote(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test367");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    boolean var7 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var5.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator("hi!");
    boolean var12 = var9.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test368");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withAllowMissingColumnNames(true);
    char var7 = var6.getDelimiter();
    boolean var8 = var6.isCommentMarkerSet();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false", var6);
    java.util.Map var10 = var9.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test369");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    boolean var5 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    boolean var10 = var7.isCommentMarkerSet();
    boolean var11 = var7.getIgnoreHeaderCase();
    java.lang.String[] var13 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var14 = var7.withHeader(var13);
    org.apache.commons.csv.CSVFormat var15 = var4.withHeaderComments((java.lang.Object[])var13);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var18 = var17.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = var17.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var22 = var17.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var25 = var24.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var27 = var24.withNullString("");
    org.apache.commons.csv.CSVFormat var28 = var24.withIgnoreEmptyLines();
    java.lang.String var29 = var28.toString();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    boolean var33 = var31.isNullStringSet();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var31.withHeader(var35);
    org.apache.commons.csv.CSVFormat var37 = var28.withHeader(var35);
    org.apache.commons.csv.CSVFormat var38 = var17.withHeader(var35);
    java.lang.String var39 = var38.toString();
    java.lang.String[] var40 = var38.getHeader();
    org.apache.commons.csv.CSVFormat var41 = var15.withHeader(var40);
    java.lang.String var42 = var41.getNullString();
    java.lang.Character var43 = var41.getQuoteCharacter();
    boolean var44 = var41.getSkipHeaderRecord();
    java.lang.String[] var45 = var41.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var29.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var39.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test370");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    boolean var8 = var6.isClosed();
    java.util.List var9 = var6.getRecords();
    var6.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test371");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker((java.lang.Character)'4');
    boolean var16 = var15.getAllowMissingColumnNames();
    java.lang.String var17 = var15.toString();
    org.apache.commons.csv.CSVFormat var18 = var15.withSkipHeaderRecord();
    org.apache.commons.csv.QuoteMode var19 = var18.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Delimiter=< > CommentStart=<4> RecordSeparator=<Default Excel MySQL RFC4180 TDF> EmptyLines:ignored SkipHeaderRecord:true"+ "'", var17.equals("Delimiter=< > CommentStart=<4> RecordSeparator=<Default Excel MySQL RFC4180 TDF> EmptyLines:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test372");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var3.withEscape('a');
    org.apache.commons.csv.CSVFormat var10 = var3.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test373");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=< > RecordSeparator=<#> EmptyLines:ignored SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test374");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > SkipHeaderRecord:true Header:[]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test375");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var8 = var1.withQuote((java.lang.Character)'4');
    java.lang.String[] var9 = var8.getHeader();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    java.lang.String var15 = var14.toString();
    org.apache.commons.csv.CSVFormat var17 = var14.withNullString("");
    org.apache.commons.csv.CSVFormat var19 = var14.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var20 = var19.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = var20.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var22 = org.apache.commons.csv.CSVParser.parse("DefaultaExcelaMySQLaRFC4180aTDF", var20);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var25 = var24.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var27 = var24.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var29 = var24.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var32 = var31.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var34 = var31.withNullString("");
    org.apache.commons.csv.CSVFormat var35 = var31.withIgnoreEmptyLines();
    java.lang.String var36 = var35.toString();
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var39 = var38.withAllowMissingColumnNames();
    boolean var40 = var38.isNullStringSet();
    java.lang.String[] var42 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var43 = var38.withHeader(var42);
    org.apache.commons.csv.CSVFormat var44 = var35.withHeader(var42);
    org.apache.commons.csv.CSVFormat var45 = var24.withHeader(var42);
    org.apache.commons.csv.CSVFormat var46 = var45.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode var47 = var46.getQuoteMode();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var50 = var49.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var51 = var49.withSkipHeaderRecord();
    java.lang.String var52 = var51.toString();
    org.apache.commons.csv.CSVFormat var54 = var51.withNullString("");
    org.apache.commons.csv.CSVFormat var56 = var51.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var58 = var51.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var60 = var51.withRecordSeparator(' ');
    java.lang.String var61 = var60.toString();
    org.apache.commons.csv.CSVFormat var63 = var60.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var65 = var63.withEscape('4');
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var68 = var67.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var69 = var67.withSkipHeaderRecord();
    java.lang.String var70 = var69.toString();
    org.apache.commons.csv.CSVFormat var72 = var69.withNullString("");
    org.apache.commons.csv.CSVFormat var74 = var69.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var76 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var77 = var76.withAllowMissingColumnNames();
    boolean var78 = var76.isNullStringSet();
    java.lang.String[] var80 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var81 = var76.withHeader(var80);
    java.lang.String var82 = var74.format((java.lang.Object[])var80);
    java.lang.String var83 = var65.format((java.lang.Object[])var80);
    org.apache.commons.csv.CSVFormat var84 = var46.withHeaderComments((java.lang.Object[])var80);
    java.lang.String var85 = var20.format((java.lang.Object[])var80);
    org.apache.commons.csv.CSVFormat var86 = var8.withHeaderComments((java.lang.Object[])var80);
    java.lang.String[] var87 = var8.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var15.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var36.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var52.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var61.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var70.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + ""+ "'", var82.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + ""+ "'", var83.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + ""+ "'", var85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test376");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    boolean var11 = var8.isCommentMarkerSet();
    boolean var12 = var8.getIgnoreHeaderCase();
    java.lang.String[] var14 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var15 = var8.withHeader(var14);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    boolean var20 = var17.isCommentMarkerSet();
    boolean var21 = var17.getIgnoreHeaderCase();
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var17.withHeader(var23);
    org.apache.commons.csv.CSVFormat var25 = var8.withHeader(var23);
    java.lang.String var26 = var6.format((java.lang.Object[])var23);
    org.apache.commons.csv.CSVFormat var28 = var6.withQuote('4');
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var31 = var30.getDelimiter();
    java.lang.String var32 = var30.getNullString();
    boolean var33 = var30.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var34 = var30.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var37 = var36.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var39 = var36.withNullString("");
    org.apache.commons.csv.CSVFormat var40 = var36.withIgnoreEmptyLines();
    java.lang.String[] var41 = var40.getHeaderComments();
    org.apache.commons.csv.CSVFormat var43 = var40.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var45 = var40.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var47 = var45.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var50 = var49.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var51 = var49.withSkipHeaderRecord();
    boolean var52 = var49.isCommentMarkerSet();
    boolean var53 = var49.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var55 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var56 = var55.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var58 = var55.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var60 = var55.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var61 = var60.withIgnoreSurroundingSpaces();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.String var63 = var49.format(var62);
    java.lang.String[] var65 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var66 = var49.withHeader(var65);
    org.apache.commons.csv.CSVFormat var67 = var45.withHeader(var65);
    org.apache.commons.csv.CSVFormat var68 = var45.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var70 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var71 = var70.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var72 = var70.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var74 = var72.withIgnoreSurroundingSpaces(true);
    boolean var75 = var74.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var77 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var78 = var77.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var79 = var77.withSkipHeaderRecord();
    java.lang.String var80 = var79.toString();
    org.apache.commons.csv.CSVFormat var82 = var79.withNullString("");
    org.apache.commons.csv.CSVFormat var84 = var79.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var86 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var87 = var86.withAllowMissingColumnNames();
    boolean var88 = var86.isNullStringSet();
    java.lang.String[] var90 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var91 = var86.withHeader(var90);
    java.lang.String var92 = var84.format((java.lang.Object[])var90);
    org.apache.commons.csv.CSVFormat var93 = var74.withHeader(var90);
    org.apache.commons.csv.CSVFormat var94 = var45.withHeaderComments((java.lang.Object[])var90);
    org.apache.commons.csv.CSVFormat var95 = var34.withHeader(var90);
    java.lang.String var96 = var28.format((java.lang.Object[])var90);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var98 = var28.withEscape((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var26.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var63.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var80.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + ""+ "'", var92.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "4444"+ "'", var96.equals("4444"));

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test377");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var7 = var2.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var8 = var7.getCommentMarker();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("", var7);
    org.apache.commons.csv.CSVFormat var11 = var7.withCommentMarker('a');
    boolean var12 = var11.getIgnoreHeaderCase();
    boolean var13 = var11.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test378");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var7 = var2.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var8 = var7.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines(false);
    java.lang.String[] var11 = var10.getHeader();
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("", var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test379");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreSurroundingSpaces();
    java.lang.Character var3 = var1.getCommentMarker();
    java.lang.String var4 = var1.getNullString();
    java.lang.Character var5 = var1.getCommentMarker();
    boolean var6 = var1.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var8 = var1.withCommentMarker((java.lang.Character)'a');
    boolean var9 = var8.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test380");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var5.isClosed();
    java.util.Map var7 = var5.getHeaderMap();
    java.util.List var8 = var5.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test381");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    java.lang.Character var4 = var2.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    boolean var13 = var10.getAllowMissingColumnNames();
    boolean var14 = var6.equals((java.lang.Object)var10);
    org.apache.commons.csv.CSVParser var15 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false", var6);
    org.apache.commons.csv.CSVFormat var17 = var6.withRecordSeparator("Delimiter=< > SkipHeaderRecord:false Header:[]");
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test382");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var2.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var2.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var10 = var2.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var11 = var2.withAllowMissingColumnNames();
    boolean var12 = var2.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test383");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var7 = var6.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var9 = var6.withNullString("");
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreEmptyLines();
    java.lang.String[] var11 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var15 = var10.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var16 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var17 = var15.withHeaderComments((java.lang.Object[])var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeaderComments((java.lang.Object[])var16);
    org.apache.commons.csv.CSVFormat var20 = var1.withRecordSeparator("Delimiter=< > QuoteChar=<a> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var21 = var1.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test384");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    java.lang.String var5 = var4.toString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("");
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false", var9);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var17 = var16.getDelimiter();
    java.lang.String var18 = var16.getNullString();
    boolean var19 = var16.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var22 = var16.withNullString("");
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord();
    boolean var27 = var24.isCommentMarkerSet();
    boolean var28 = var24.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var31 = var30.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var33 = var30.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var35 = var30.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var36 = var35.withIgnoreSurroundingSpaces();
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.String var38 = var24.format(var37);
    java.lang.String[] var40 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var41 = var24.withHeader(var40);
    org.apache.commons.csv.CSVFormat var42 = var16.withHeaderComments((java.lang.Object[])var40);
    org.apache.commons.csv.CSVFormat var43 = var9.withHeader(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var38.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test385");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    boolean var10 = var8.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var12 = var8.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var14 = var8.withAllowMissingColumnNames(true);
    java.lang.String[] var15 = var8.getHeader();
    java.lang.Character var16 = var8.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test386");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    java.lang.String[] var17 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var19.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var22 = var21.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var22.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var26 = var24.withCommentMarker((java.lang.Character)'4');
    java.lang.Character var27 = var26.getQuoteCharacter();
    boolean var28 = var26.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var32 = var30.withSkipHeaderRecord();
    boolean var33 = var30.isCommentMarkerSet();
    java.lang.Character var34 = var30.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var35 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var37 = var30.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var39 = var30.withDelimiter(' ');
    java.lang.String var40 = var30.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var43 = var42.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var45 = var42.withRecordSeparator("hi!");
    boolean var46 = var45.isCommentMarkerSet();
    boolean var47 = var45.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var50 = var49.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var52 = var49.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var54 = var49.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var57 = var56.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var59 = var56.withNullString("");
    org.apache.commons.csv.CSVFormat var60 = var56.withIgnoreEmptyLines();
    java.lang.String var61 = var60.toString();
    org.apache.commons.csv.CSVFormat var63 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var64 = var63.withAllowMissingColumnNames();
    boolean var65 = var63.isNullStringSet();
    java.lang.String[] var67 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var68 = var63.withHeader(var67);
    org.apache.commons.csv.CSVFormat var69 = var60.withHeader(var67);
    org.apache.commons.csv.CSVFormat var70 = var49.withHeader(var67);
    org.apache.commons.csv.CSVFormat var71 = var45.withHeaderComments((java.lang.Object[])var67);
    org.apache.commons.csv.CSVFormat var72 = var30.withHeaderComments((java.lang.Object[])var67);
    org.apache.commons.csv.CSVFormat var73 = var26.withHeaderComments((java.lang.Object[])var67);
    org.apache.commons.csv.CSVFormat var74 = var8.withHeader(var67);
    java.lang.String var75 = var74.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var77 = var74.withQuote(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var61.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "Delimiter=< > SurroundingSpaces:ignored SkipHeaderRecord:true Header:[]"+ "'", var75.equals("Delimiter=< > SurroundingSpaces:ignored SkipHeaderRecord:true Header:[]"));

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test387");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var2.getSkipHeaderRecord();
    java.lang.Character var7 = var2.getEscapeCharacter();
    char var8 = var2.getDelimiter();
    org.apache.commons.csv.CSVFormat var10 = var2.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    java.lang.String[] var17 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var16.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var22 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var23 = var21.withHeaderComments((java.lang.Object[])var22);
    org.apache.commons.csv.CSVFormat var25 = var21.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord();
    java.lang.String var36 = var35.toString();
    org.apache.commons.csv.CSVFormat var38 = var35.withNullString("");
    org.apache.commons.csv.CSVFormat var40 = var35.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var43 = var42.withAllowMissingColumnNames();
    boolean var44 = var42.isNullStringSet();
    java.lang.String[] var46 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var47 = var42.withHeader(var46);
    java.lang.String var48 = var40.format((java.lang.Object[])var46);
    java.lang.String var49 = var31.format((java.lang.Object[])var46);
    org.apache.commons.csv.CSVFormat var50 = var25.withHeader(var46);
    org.apache.commons.csv.CSVFormat var51 = var10.withHeader(var46);
    char var52 = var51.getDelimiter();
    boolean var53 = var51.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var36.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test388");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker((java.lang.Character)'4');
    boolean var16 = var15.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var15.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test389");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getRecordNumber();
    java.util.List var8 = var6.getRecords();
    java.util.Map var9 = var6.getHeaderMap();
    boolean var10 = var6.isClosed();
    java.util.List var11 = var6.getRecords();
    java.util.List var12 = var6.getRecords();
    boolean var13 = var6.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test390");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var8 = var1.withCommentMarker((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test391");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    boolean var5 = var4.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    boolean var10 = var7.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var12 = var7.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var14 = var7.withQuote((java.lang.Character)'4');
    boolean var15 = var14.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var14.withDelimiter('#');
    boolean var18 = var4.equals((java.lang.Object)var14);
    org.apache.commons.csv.CSVFormat var20 = var14.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test392");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote('#');
    boolean var9 = var8.getIgnoreSurroundingSpaces();
    java.lang.Character var10 = var8.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var8.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test393");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = var10.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var18 = var6.equals((java.lang.Object)var17);
    org.apache.commons.csv.CSVFormat var19 = var17.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = var17.withNullString("Delimiter=< > SkipHeaderRecord:trueDelimiter=< > SkipHeaderRecord:true");
    boolean var22 = var17.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test394");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var1.withQuote('4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var8 = var1.withEscape(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test395");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withDelimiter('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test396");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var7 = var2.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var9 = var7.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var11 = var7.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var13 = var7.withNullString("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var14 = var13.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var13.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var17 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVParser var18 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDFDelimiter=< > SkipHeaderRecord:true", var13);
    org.apache.commons.csv.CSVFormat var19 = var13.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test397");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var7 = var6.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var9 = var6.withNullString("");
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreEmptyLines();
    java.lang.String[] var11 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var15 = var10.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var16 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var17 = var15.withHeaderComments((java.lang.Object[])var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeaderComments((java.lang.Object[])var16);
    java.lang.String[] var19 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var21 = var1.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var23 = var1.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test398");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var7 = var2.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var8 = var7.isQuoteCharacterSet();
    java.lang.String[] var9 = var7.getHeader();
    org.apache.commons.csv.CSVFormat var11 = var7.withEscape('a');
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:trueDelimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false Header:[]", var11);
    java.lang.String var13 = var11.getNullString();
    java.lang.Character var14 = var11.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var13.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test399");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var17 = var12.withCommentMarker((java.lang.Character)'a');
    boolean var18 = var10.equals((java.lang.Object)var17);
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var22 = var20.withRecordSeparator("#");
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var25 = var24.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var27 = var24.withCommentMarker('#');
    java.lang.String[] var28 = var24.getHeaderComments();
    org.apache.commons.csv.CSVFormat var30 = var24.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var33 = var32.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord();
    boolean var35 = var32.isCommentMarkerSet();
    boolean var36 = var32.getIgnoreHeaderCase();
    java.lang.String[] var38 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var39 = var32.withHeader(var38);
    org.apache.commons.csv.CSVFormat var40 = var24.withHeader(var38);
    java.lang.String var41 = var22.format((java.lang.Object[])var38);
    org.apache.commons.csv.CSVFormat var42 = var17.withHeaderComments((java.lang.Object[])var38);
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var45 = var44.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var47 = var44.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var49 = var44.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var52 = var51.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var54 = var51.withNullString("");
    org.apache.commons.csv.CSVFormat var55 = var51.withIgnoreEmptyLines();
    java.lang.String var56 = var55.toString();
    org.apache.commons.csv.CSVFormat var58 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var59 = var58.withAllowMissingColumnNames();
    boolean var60 = var58.isNullStringSet();
    java.lang.String[] var62 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var63 = var58.withHeader(var62);
    org.apache.commons.csv.CSVFormat var64 = var55.withHeader(var62);
    org.apache.commons.csv.CSVFormat var65 = var44.withHeader(var62);
    org.apache.commons.csv.CSVFormat var66 = var65.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var67 = var65.withIgnoreEmptyLines();
    java.lang.String[] var68 = var65.getHeader();
    java.lang.String var69 = var17.format((java.lang.Object[])var68);
    org.apache.commons.csv.CSVFormat var71 = var17.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var73 = var71.withRecordSeparator('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Delimiter=< > SkipHeaderRecord:true#"+ "'", var41.equals("Delimiter=< > SkipHeaderRecord:true#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var56.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test400");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord();
    boolean var17 = var14.isCommentMarkerSet();
    boolean var18 = var14.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var21 = var20.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var23 = var20.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var25 = var20.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var26 = var25.withIgnoreSurroundingSpaces();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.String var28 = var14.format(var27);
    java.lang.String[] var30 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var31 = var14.withHeader(var30);
    org.apache.commons.csv.CSVFormat var32 = var10.withHeader(var30);
    org.apache.commons.csv.CSVFormat var33 = var10.withSkipHeaderRecord();
    java.lang.Character var34 = var10.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var28.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test401");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withRecordSeparator("#");
    org.apache.commons.csv.CSVFormat var5 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var5.withNullString("");
    org.apache.commons.csv.CSVFormat var9 = var5.withIgnoreEmptyLines();
    java.lang.String[] var10 = var9.getHeaderComments();
    org.apache.commons.csv.CSVFormat var12 = var9.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var14 = var9.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord();
    java.lang.String var19 = var18.toString();
    org.apache.commons.csv.CSVFormat var21 = var18.withNullString("");
    org.apache.commons.csv.CSVFormat var23 = var18.withIgnoreSurroundingSpaces(true);
    boolean var24 = var18.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var26 = var18.withQuote('a');
    org.apache.commons.csv.CSVFormat var28 = var26.withNullString("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var31 = var30.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var33 = var30.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var35 = var30.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var38 = var37.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var40 = var37.withNullString("");
    org.apache.commons.csv.CSVFormat var41 = var37.withIgnoreEmptyLines();
    java.lang.String var42 = var41.toString();
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var45 = var44.withAllowMissingColumnNames();
    boolean var46 = var44.isNullStringSet();
    java.lang.String[] var48 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var49 = var44.withHeader(var48);
    org.apache.commons.csv.CSVFormat var50 = var41.withHeader(var48);
    org.apache.commons.csv.CSVFormat var51 = var30.withHeader(var48);
    java.lang.String var52 = var51.toString();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var55 = var54.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var57 = var54.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var59 = var54.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var61 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var62 = var61.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var64 = var61.withNullString("");
    org.apache.commons.csv.CSVFormat var65 = var61.withIgnoreEmptyLines();
    java.lang.String var66 = var65.toString();
    org.apache.commons.csv.CSVFormat var68 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var69 = var68.withAllowMissingColumnNames();
    boolean var70 = var68.isNullStringSet();
    java.lang.String[] var72 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var73 = var68.withHeader(var72);
    org.apache.commons.csv.CSVFormat var74 = var65.withHeader(var72);
    org.apache.commons.csv.CSVFormat var75 = var54.withHeader(var72);
    java.lang.String var76 = var51.format((java.lang.Object[])var72);
    org.apache.commons.csv.CSVFormat var77 = var26.withHeader(var72);
    java.lang.String var78 = var14.format((java.lang.Object[])var72);
    java.lang.String var79 = var1.format((java.lang.Object[])var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var19.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var42.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var52.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var66.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "4"+ "'", var78.equals("4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + ""+ "'", var79.equals(""));

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test402");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreEmptyLines(false);
    java.lang.String[] var9 = var5.getHeader();
    char var10 = var5.getDelimiter();
    boolean var11 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    boolean var14 = var12.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test403");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var3.withRecordSeparator(' ');
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = var12.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker('4');
    java.lang.String var18 = var15.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var13.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + " "+ "'", var18.equals(" "));

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test404");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=< > QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test405");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var1.withQuote((java.lang.Character)'a');
    java.lang.String var8 = var7.getRecordSeparator();
    boolean var9 = var7.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var7.withRecordSeparator("Delimiter=< > SkipHeaderRecord:false Header:[Default Excel MySQL RFC4180 TDF]");
    org.apache.commons.csv.CSVFormat var13 = var7.withIgnoreHeaderCase(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test406");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=< > SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test407");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    boolean var5 = var4.isCommentMarkerSet();
    java.lang.Character var6 = var4.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(true);
    boolean var9 = var4.getIgnoreSurroundingSpaces();
    java.lang.String var10 = var4.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test408");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    boolean var3 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var7 = var5.withIgnoreSurroundingSpaces(true);
    boolean var8 = var5.isCommentMarkerSet();
    char var9 = var5.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == ' ');

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test409");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreEmptyLines(true);
    char var15 = var10.getDelimiter();
    org.apache.commons.csv.CSVFormat var17 = var10.withRecordSeparator('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test410");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    boolean var3 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.QuoteMode var6 = var1.getQuoteMode();
    boolean var7 = var1.isCommentMarkerSet();
    boolean var8 = var1.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test411");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getRecordNumber();
    long var8 = var6.getRecordNumber();
    var6.close();
    boolean var10 = var6.isClosed();
    java.util.Map var11 = var6.getHeaderMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var12 = var6.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test412");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var2.getSkipHeaderRecord();
    java.lang.Character var7 = var2.getEscapeCharacter();
    char var8 = var2.getDelimiter();
    org.apache.commons.csv.CSVFormat var10 = var2.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var14 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var13.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var17 = org.apache.commons.csv.CSVParser.parse("", var16);
    long var18 = var17.getCurrentLineNumber();
    long var19 = var17.getCurrentLineNumber();
    var17.close();
    var17.close();
    java.util.Map var22 = var17.getHeaderMap();
    boolean var23 = var10.equals((java.lang.Object)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test413");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var6.withRecordSeparator('4');
    boolean var9 = var8.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreEmptyLines();
    java.lang.String[] var11 = var8.getHeader();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var13 = var8.withCommentMarker(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test414");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = var8.withQuote('#');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    boolean var16 = var12.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var19 = var18.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = var18.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var23 = var18.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var24 = var23.withIgnoreSurroundingSpaces();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.String var26 = var12.format(var25);
    java.lang.String var27 = var8.format(var25);
    org.apache.commons.csv.CSVFormat var29 = var8.withCommentMarker('a');
    boolean var30 = var8.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var26.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var27.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test415");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    boolean var11 = var8.isCommentMarkerSet();
    boolean var12 = var8.getIgnoreHeaderCase();
    java.lang.String[] var14 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var15 = var8.withHeader(var14);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    boolean var20 = var17.isCommentMarkerSet();
    boolean var21 = var17.getIgnoreHeaderCase();
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var17.withHeader(var23);
    org.apache.commons.csv.CSVFormat var25 = var8.withHeader(var23);
    java.lang.String var26 = var6.format((java.lang.Object[])var23);
    org.apache.commons.csv.CSVFormat var28 = var6.withDelimiter('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var26.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test416");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.String[] var7 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    boolean var12 = var9.isCommentMarkerSet();
    boolean var13 = var9.getIgnoreHeaderCase();
    java.lang.String[] var15 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var16 = var9.withHeader(var15);
    org.apache.commons.csv.CSVFormat var17 = var1.withHeader(var15);
    java.lang.String[] var18 = var17.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test417");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    java.lang.String var5 = var4.getNullString();
    boolean var6 = var4.getIgnoreHeaderCase();
    java.lang.Character var7 = var4.getCommentMarker();
    java.lang.Character var8 = var4.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines(true);
    java.lang.Character var11 = var10.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '#'+ "'", var7.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test418");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var2.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var2.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var10 = var2.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var17 = var12.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var18 = var17.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var21 = var20.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var22.withAllowMissingColumnNames(true);
    java.lang.String var25 = var24.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var28 = var27.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var30 = var27.withNullString("");
    org.apache.commons.csv.CSVFormat var31 = var27.withIgnoreEmptyLines();
    java.lang.String var32 = var31.toString();
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var35 = var34.withAllowMissingColumnNames();
    boolean var36 = var34.isNullStringSet();
    java.lang.String[] var38 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var39 = var34.withHeader(var38);
    org.apache.commons.csv.CSVFormat var40 = var31.withHeader(var38);
    java.lang.String var41 = var24.format((java.lang.Object[])var38);
    org.apache.commons.csv.CSVFormat var42 = var17.withHeaderComments((java.lang.Object[])var38);
    java.lang.String var43 = var10.format((java.lang.Object[])var38);
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var46 = var45.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var47 = var45.withSkipHeaderRecord();
    boolean var48 = var45.isCommentMarkerSet();
    boolean var49 = var45.getIgnoreHeaderCase();
    java.lang.String[] var51 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var52 = var45.withHeader(var51);
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var55 = var54.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord();
    boolean var57 = var54.isCommentMarkerSet();
    boolean var58 = var54.getIgnoreHeaderCase();
    java.lang.String[] var60 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var61 = var54.withHeader(var60);
    org.apache.commons.csv.CSVFormat var62 = var45.withHeader(var60);
    org.apache.commons.csv.CSVFormat var64 = var62.withIgnoreSurroundingSpaces(true);
    java.lang.Character var65 = var62.getCommentMarker();
    org.apache.commons.csv.CSVFormat var66 = var62.withIgnoreEmptyLines();
    java.lang.String[] var67 = var62.getHeader();
    org.apache.commons.csv.CSVFormat var68 = var10.withHeader(var67);
    boolean var69 = var68.isCommentMarkerSet();
    java.lang.Character var70 = var68.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var32.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test419");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    java.util.Map var9 = var6.getHeaderMap();
    java.util.List var10 = var6.getRecords();
    java.util.List var11 = var6.getRecords();
    var6.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var13 = var6.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test420");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var3.withEscape('#');
    org.apache.commons.csv.CSVFormat var10 = var3.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var18 = var16.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord(false);
    char var21 = var18.getDelimiter();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var24 = var23.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var26 = var23.withRecordSeparator("hi!");
    boolean var27 = var26.isCommentMarkerSet();
    java.lang.Character var28 = var26.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var30 = var26.withAllowMissingColumnNames(true);
    boolean var31 = var30.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord();
    java.lang.String var36 = var35.toString();
    org.apache.commons.csv.CSVFormat var38 = var35.withNullString("");
    org.apache.commons.csv.CSVFormat var40 = var38.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var43 = var42.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var44 = var42.withSkipHeaderRecord();
    boolean var45 = var42.isCommentMarkerSet();
    boolean var46 = var42.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var49 = var48.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var51 = var48.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var53 = var48.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var54 = var53.withIgnoreSurroundingSpaces();
    java.lang.Object[] var55 = new java.lang.Object[] { var53};
    java.lang.String var56 = var42.format(var55);
    java.lang.String[] var58 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var59 = var42.withHeader(var58);
    org.apache.commons.csv.CSVFormat var60 = var38.withHeader(var58);
    java.lang.String var61 = var30.format((java.lang.Object[])var58);
    java.lang.String var62 = var18.format((java.lang.Object[])var58);
    org.apache.commons.csv.CSVFormat var63 = var10.withHeaderComments((java.lang.Object[])var58);
    org.apache.commons.csv.CSVFormat var65 = var63.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var66 = var65.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var67 = var66.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var36.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var56.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var61.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var62.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test421");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreSurroundingSpaces();
    java.lang.Character var3 = var1.getCommentMarker();
    org.apache.commons.csv.CSVFormat var4 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker((java.lang.Character)'4');
    boolean var7 = var4.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreSurroundingSpaces();
    boolean var9 = var8.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test422");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    char var5 = var1.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == ' ');

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test423");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator("Delimiter=< > QuoteChar=<a> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var10.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var14 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test424");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test425");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    boolean var6 = var5.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var9 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withEscape((java.lang.Character)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test426");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var8 = var1.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var10 = var1.withRecordSeparator("aa");
    boolean var11 = var10.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test427");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    boolean var7 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var9 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var11 = var9.withEscape((java.lang.Character)'#');
    boolean var12 = var9.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test428");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var16 = var14.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var19 = var18.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = var18.withNullString("");
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var24 = var22.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord(false);
    char var27 = var24.getDelimiter();
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var30 = var29.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var32 = var29.withRecordSeparator("hi!");
    boolean var33 = var32.isCommentMarkerSet();
    java.lang.Character var34 = var32.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var36 = var32.withAllowMissingColumnNames(true);
    boolean var37 = var36.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var40 = var39.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var41 = var39.withSkipHeaderRecord();
    java.lang.String var42 = var41.toString();
    org.apache.commons.csv.CSVFormat var44 = var41.withNullString("");
    org.apache.commons.csv.CSVFormat var46 = var44.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var49 = var48.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var50 = var48.withSkipHeaderRecord();
    boolean var51 = var48.isCommentMarkerSet();
    boolean var52 = var48.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var55 = var54.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var57 = var54.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var59 = var54.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var60 = var59.withIgnoreSurroundingSpaces();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.String var62 = var48.format(var61);
    java.lang.String[] var64 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var65 = var48.withHeader(var64);
    org.apache.commons.csv.CSVFormat var66 = var44.withHeader(var64);
    java.lang.String var67 = var36.format((java.lang.Object[])var64);
    java.lang.String var68 = var24.format((java.lang.Object[])var64);
    org.apache.commons.csv.CSVFormat var69 = var16.withHeader(var64);
    org.apache.commons.csv.CSVFormat var71 = var16.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var42.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var62.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var67.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var68.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test429");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var9 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var8.withNullString("");
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreEmptyLines();
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    boolean var17 = var15.isNullStringSet();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var15.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var12.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = var1.withHeader(var19);
    java.lang.String var23 = var22.toString();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var26 = var25.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var28 = var25.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var30 = var25.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var33 = var32.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var35 = var32.withNullString("");
    org.apache.commons.csv.CSVFormat var36 = var32.withIgnoreEmptyLines();
    java.lang.String var37 = var36.toString();
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var40 = var39.withAllowMissingColumnNames();
    boolean var41 = var39.isNullStringSet();
    java.lang.String[] var43 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var44 = var39.withHeader(var43);
    org.apache.commons.csv.CSVFormat var45 = var36.withHeader(var43);
    org.apache.commons.csv.CSVFormat var46 = var25.withHeader(var43);
    java.lang.String var47 = var22.format((java.lang.Object[])var43);
    org.apache.commons.csv.CSVFormat var49 = var22.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var51 = var49.withQuote((java.lang.Character)'4');
    java.lang.Character var52 = var51.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var13.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var23.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var37.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + '4'+ "'", var52.equals('4'));

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test430");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var11 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var12 = var10.withHeaderComments((java.lang.Object[])var11);
    boolean var13 = var12.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord();
    boolean var19 = var16.isCommentMarkerSet();
    boolean var20 = var16.getIgnoreHeaderCase();
    java.lang.String[] var22 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var23 = var16.withHeader(var22);
    org.apache.commons.csv.QuoteMode[] var24 = org.apache.commons.csv.QuoteMode.values();
    java.lang.String var25 = var16.format((java.lang.Object[])var24);
    boolean var26 = var14.equals((java.lang.Object)var16);
    org.apache.commons.csv.CSVFormat var27 = var16.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ALL MINIMAL NON_NUMERIC NONE"+ "'", var25.equals("ALL MINIMAL NON_NUMERIC NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test431");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    java.lang.Character var4 = var2.getQuoteCharacter();
    char var5 = var2.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = var2.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withIgnoreSurroundingSpaces();
    java.lang.Character var11 = var9.getCommentMarker();
    java.lang.String var12 = var9.getNullString();
    org.apache.commons.csv.CSVFormat var13 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    boolean var17 = var15.isNullStringSet();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var15.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    boolean var25 = var22.isCommentMarkerSet();
    boolean var26 = var22.getIgnoreHeaderCase();
    java.lang.String[] var28 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var29 = var22.withHeader(var28);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord();
    boolean var34 = var31.isCommentMarkerSet();
    boolean var35 = var31.getIgnoreHeaderCase();
    java.lang.String[] var37 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var38 = var31.withHeader(var37);
    org.apache.commons.csv.CSVFormat var39 = var22.withHeader(var37);
    java.lang.String var40 = var20.format((java.lang.Object[])var37);
    org.apache.commons.csv.CSVFormat var41 = var13.withHeader(var37);
    org.apache.commons.csv.CSVFormat var42 = var2.withHeader(var37);
    org.apache.commons.csv.CSVParser var43 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > RecordSeparator=<#> EmptyLines:ignored SkipHeaderRecord:false", var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var40.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test432");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Map var8 = var6.getHeaderMap();
    long var9 = var6.getCurrentLineNumber();
    var6.close();
    boolean var11 = var6.isClosed();
    long var12 = var6.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test433");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withDelimiter('#');
    boolean var10 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var6.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test434");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    java.lang.String[] var17 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var16.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var22 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var23 = var21.withHeaderComments((java.lang.Object[])var22);
    boolean var24 = var10.equals((java.lang.Object)var23);
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var28 = var27.getDelimiter();
    java.lang.String var29 = var27.getNullString();
    boolean var30 = var27.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var31 = var27.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var33 = var27.withNullString("");
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var36 = var35.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var37 = var35.withSkipHeaderRecord();
    boolean var38 = var35.isCommentMarkerSet();
    boolean var39 = var35.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var42 = var41.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var44 = var41.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var46 = var41.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var47 = var46.withIgnoreSurroundingSpaces();
    java.lang.Object[] var48 = new java.lang.Object[] { var46};
    java.lang.String var49 = var35.format(var48);
    java.lang.String[] var51 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var52 = var35.withHeader(var51);
    org.apache.commons.csv.CSVFormat var53 = var27.withHeaderComments((java.lang.Object[])var51);
    org.apache.commons.csv.CSVFormat var54 = var23.withHeader(var51);
    java.lang.String var55 = var23.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var49.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "4"+ "'", var55.equals("4"));

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test435");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    java.lang.String var14 = var13.toString();
    org.apache.commons.csv.CSVFormat var16 = var13.withNullString("");
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var20 = var18.withQuote('#');
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    boolean var25 = var22.isCommentMarkerSet();
    boolean var26 = var22.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var29 = var28.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var31 = var28.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var33 = var28.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var34 = var33.withIgnoreSurroundingSpaces();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.String var36 = var22.format(var35);
    java.lang.String var37 = var18.format(var35);
    org.apache.commons.csv.CSVFormat var38 = var9.withHeaderComments(var35);
    boolean var39 = var38.getIgnoreHeaderCase();
    java.lang.String[] var40 = var38.getHeader();
    java.lang.Character var41 = var38.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var14.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var36.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var37.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test436");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withIgnoreSurroundingSpaces();
    java.lang.Character var13 = var11.getCommentMarker();
    java.lang.String var14 = var11.getNullString();
    org.apache.commons.csv.CSVFormat var15 = var11.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    boolean var19 = var17.isNullStringSet();
    java.lang.String[] var21 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var22 = var17.withHeader(var21);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord();
    boolean var27 = var24.isCommentMarkerSet();
    boolean var28 = var24.getIgnoreHeaderCase();
    java.lang.String[] var30 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var31 = var24.withHeader(var30);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord();
    boolean var36 = var33.isCommentMarkerSet();
    boolean var37 = var33.getIgnoreHeaderCase();
    java.lang.String[] var39 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var40 = var33.withHeader(var39);
    org.apache.commons.csv.CSVFormat var41 = var24.withHeader(var39);
    java.lang.String var42 = var22.format((java.lang.Object[])var39);
    org.apache.commons.csv.CSVFormat var43 = var15.withHeader(var39);
    java.lang.String var44 = var8.format((java.lang.Object[])var39);
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var48 = var46.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var50 = var48.withAllowMissingColumnNames(true);
    java.lang.String var51 = var50.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var53 = var50.withIgnoreEmptyLines(false);
    java.lang.String[] var54 = var50.getHeader();
    char var55 = var50.getDelimiter();
    boolean var56 = var8.equals((java.lang.Object)var55);
    org.apache.commons.csv.CSVFormat var57 = var8.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var42.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var44.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test437");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var2.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var2.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var10 = var2.withIgnoreSurroundingSpaces(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var12 = var2.withCommentMarker(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test438");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker((java.lang.Character)'4');
    boolean var7 = var6.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    java.lang.String var12 = var11.toString();
    org.apache.commons.csv.CSVFormat var14 = var11.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var11.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var18 = var11.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var20 = var11.withIgnoreSurroundingSpaces(false);
    java.lang.Character var21 = var20.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord();
    java.lang.String var26 = var25.toString();
    java.lang.String[] var27 = var25.getHeader();
    org.apache.commons.csv.CSVFormat var28 = var25.withAllowMissingColumnNames();
    java.lang.String[] var29 = var28.getHeaderComments();
    org.apache.commons.csv.CSVFormat var31 = var28.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord();
    java.lang.String var36 = var35.toString();
    org.apache.commons.csv.CSVFormat var38 = var35.withNullString("");
    org.apache.commons.csv.CSVFormat var40 = var38.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var42 = var40.withQuote('#');
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var45 = var44.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var46 = var44.withSkipHeaderRecord();
    boolean var47 = var44.isCommentMarkerSet();
    boolean var48 = var44.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var51 = var50.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var53 = var50.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var55 = var50.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var56 = var55.withIgnoreSurroundingSpaces();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.String var58 = var44.format(var57);
    java.lang.String var59 = var40.format(var57);
    org.apache.commons.csv.CSVFormat var60 = var31.withHeaderComments(var57);
    java.lang.String var61 = var20.format(var57);
    org.apache.commons.csv.CSVFormat var62 = var6.withHeaderComments(var57);
    java.lang.Character var63 = var6.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var12.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var26.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var36.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var58.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var59.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var61.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test439");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var8.withSkipHeaderRecord(false);
    boolean var12 = var8.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test440");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=< > QuoteChar=<#> CommentStart=<4> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test441");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var9 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var8.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var13 = var8.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var14 = var13.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord();
    java.lang.String var19 = var18.toString();
    org.apache.commons.csv.CSVFormat var21 = var18.withNullString("");
    org.apache.commons.csv.CSVFormat var23 = var18.withIgnoreSurroundingSpaces(true);
    boolean var24 = var18.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var26 = var18.withQuote('a');
    org.apache.commons.csv.CSVFormat var28 = var26.withNullString("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var31 = var30.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var33 = var30.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var35 = var30.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var38 = var37.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var40 = var37.withNullString("");
    org.apache.commons.csv.CSVFormat var41 = var37.withIgnoreEmptyLines();
    java.lang.String var42 = var41.toString();
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var45 = var44.withAllowMissingColumnNames();
    boolean var46 = var44.isNullStringSet();
    java.lang.String[] var48 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var49 = var44.withHeader(var48);
    org.apache.commons.csv.CSVFormat var50 = var41.withHeader(var48);
    org.apache.commons.csv.CSVFormat var51 = var30.withHeader(var48);
    java.lang.String var52 = var51.toString();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var55 = var54.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var57 = var54.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var59 = var54.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var61 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var62 = var61.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var64 = var61.withNullString("");
    org.apache.commons.csv.CSVFormat var65 = var61.withIgnoreEmptyLines();
    java.lang.String var66 = var65.toString();
    org.apache.commons.csv.CSVFormat var68 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var69 = var68.withAllowMissingColumnNames();
    boolean var70 = var68.isNullStringSet();
    java.lang.String[] var72 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var73 = var68.withHeader(var72);
    org.apache.commons.csv.CSVFormat var74 = var65.withHeader(var72);
    org.apache.commons.csv.CSVFormat var75 = var54.withHeader(var72);
    java.lang.String var76 = var51.format((java.lang.Object[])var72);
    org.apache.commons.csv.CSVFormat var77 = var26.withHeader(var72);
    org.apache.commons.csv.CSVFormat var78 = var13.withHeaderComments((java.lang.Object[])var72);
    org.apache.commons.csv.CSVFormat var79 = var6.withHeader(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var19.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var42.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var52.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var66.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test442");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var16 = var14.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var18 = var16.withNullString("Delimiter=< > QuoteChar=<#> NullString=<Delimiter=< > SkipHeaderRecord:true> SurroundingSpaces:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreHeaderCase(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test443");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.isNullStringSet();
    java.lang.Character var7 = var3.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var8 = var3.withAllowMissingColumnNames();
    boolean var9 = var3.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var11 = var3.withRecordSeparator("ALL MINIMAL NON_NUMERIC NONEDelimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var13 = var3.withRecordSeparator("Delimiter=< > SkipHeaderRecord:false");
    boolean var14 = var13.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var16 = var13.withQuote('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test444");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getCurrentLineNumber();
    var6.close();
    var6.close();
    java.util.Iterator var10 = var6.iterator();
    boolean var11 = var6.isClosed();
    var6.close();
    var6.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test445");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withSkipHeaderRecord(false);
    boolean var9 = var1.isNullStringSet();
    java.lang.Character var10 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var12 = var1.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test446");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var3.withRecordSeparator(' ');
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = var12.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var17 = var15.withEscape('4');
    java.lang.String var18 = var17.getRecordSeparator();
    java.lang.Character var19 = var17.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var13.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + " "+ "'", var18.equals(" "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test447");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat.Predefined[] var7 = org.apache.commons.csv.CSVFormat.Predefined.values();
    java.lang.String var8 = var6.format((java.lang.Object[])var7);
    java.lang.String var9 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var8.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Delimiter=< > CommentStart=<a> SkipHeaderRecord:false"+ "'", var9.equals("Delimiter=< > CommentStart=<a> SkipHeaderRecord:false"));

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test448");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreSurroundingSpaces();
    java.lang.Character var3 = var1.getCommentMarker();
    java.lang.String var4 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var7 = var1.withDelimiter(' ');
    java.lang.Character var8 = var1.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test449");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    boolean var5 = var2.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var7 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var9 = var2.withQuote((java.lang.Character)'4');
    boolean var10 = var9.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > RecordSeparator=<hi!> SkipHeaderRecord:false", var9);
    var11.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test450");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = var10.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var14 = var13.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var16 = var13.withEscape((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test451");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var16 = var14.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var18 = var14.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var20 = var14.withEscape((java.lang.Character)'a');
    boolean var21 = var14.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test452");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    boolean var5 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    boolean var10 = var7.isCommentMarkerSet();
    boolean var11 = var7.getIgnoreHeaderCase();
    java.lang.String[] var13 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var14 = var7.withHeader(var13);
    org.apache.commons.csv.CSVFormat var15 = var4.withHeaderComments((java.lang.Object[])var13);
    java.lang.String[] var16 = var4.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test453");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withIgnoreSurroundingSpaces();
    java.lang.Character var4 = var2.getCommentMarker();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("hi!", var2);
    boolean var6 = var5.isClosed();
    java.util.Iterator var7 = var5.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test454");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    boolean var5 = var4.isCommentMarkerSet();
    java.lang.Character var6 = var4.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var12 = var10.withDelimiter('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test455");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=< > EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test456");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var1.withRecordSeparator("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var11 = var10.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var13 = var10.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var15 = var10.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var18 = var17.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = var17.withNullString("");
    org.apache.commons.csv.CSVFormat var21 = var17.withIgnoreEmptyLines();
    java.lang.String var22 = var21.toString();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    boolean var26 = var24.isNullStringSet();
    java.lang.String[] var28 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var29 = var24.withHeader(var28);
    org.apache.commons.csv.CSVFormat var30 = var21.withHeader(var28);
    org.apache.commons.csv.CSVFormat var31 = var10.withHeader(var28);
    java.lang.String var32 = var31.toString();
    java.lang.String[] var33 = var31.getHeader();
    java.lang.String var34 = var8.format((java.lang.Object[])var33);
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var37 = var36.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var39 = var36.withNullString("");
    org.apache.commons.csv.CSVFormat var40 = var36.withIgnoreEmptyLines();
    java.lang.String[] var41 = var40.getHeaderComments();
    org.apache.commons.csv.CSVFormat var43 = var40.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var45 = var40.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var46 = var45.getQuoteMode();
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var49 = var48.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var50 = var48.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var52 = var50.withAllowMissingColumnNames(true);
    java.lang.String var53 = var52.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var55 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var56 = var55.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var58 = var55.withNullString("");
    org.apache.commons.csv.CSVFormat var59 = var55.withIgnoreEmptyLines();
    java.lang.String var60 = var59.toString();
    org.apache.commons.csv.CSVFormat var62 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var63 = var62.withAllowMissingColumnNames();
    boolean var64 = var62.isNullStringSet();
    java.lang.String[] var66 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var67 = var62.withHeader(var66);
    org.apache.commons.csv.CSVFormat var68 = var59.withHeader(var66);
    java.lang.String var69 = var52.format((java.lang.Object[])var66);
    org.apache.commons.csv.CSVFormat var70 = var45.withHeader(var66);
    org.apache.commons.csv.CSVFormat var71 = var8.withHeaderComments((java.lang.Object[])var66);
    java.lang.String var72 = var8.getNullString();
    boolean var73 = var8.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var22.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var32.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var34.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var60.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test457");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreEmptyLines(true);
    boolean var7 = var6.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var9.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test458");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines(true);
    boolean var9 = var8.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = var16.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var20 = var18.withQuote((java.lang.Character)'4');
    boolean var21 = var20.getIgnoreHeaderCase();
    boolean var22 = var20.isEscapeCharacterSet();
    boolean var23 = var20.isQuoteCharacterSet();
    boolean var24 = var12.equals((java.lang.Object)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test459");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var7 = var6.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var9 = var6.withNullString("");
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreEmptyLines();
    java.lang.String[] var11 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var15 = var10.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var16 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var17 = var15.withHeaderComments((java.lang.Object[])var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeaderComments((java.lang.Object[])var16);
    org.apache.commons.csv.CSVFormat var20 = var1.withEscape('a');
    java.lang.String var21 = var20.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test460");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getCurrentLineNumber();
    var6.close();
    var6.close();
    java.util.Iterator var10 = var6.iterator();
    long var11 = var6.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test461");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    java.lang.String var5 = var4.toString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("");
    org.apache.commons.csv.CSVFormat var9 = var7.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote('#');
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var14 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord();
    boolean var16 = var13.isCommentMarkerSet();
    boolean var17 = var13.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var20 = var19.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var22 = var19.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var24 = var19.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var25 = var24.withIgnoreSurroundingSpaces();
    java.lang.Object[] var26 = new java.lang.Object[] { var24};
    java.lang.String var27 = var13.format(var26);
    java.lang.String var28 = var9.format(var26);
    org.apache.commons.csv.CSVFormat var30 = var9.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var31 = var9.withAllowMissingColumnNames();
    java.lang.String var32 = var31.getRecordSeparator();
    org.apache.commons.csv.CSVParser var33 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SurroundingSpaces:ignored SkipHeaderRecord:true", var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var35 = var31.withCommentMarker('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var27.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var28.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test462");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    boolean var5 = var4.getIgnoreEmptyLines();
    boolean var6 = var4.getAllowMissingColumnNames();
    java.lang.String[] var7 = var4.getHeader();
    char var8 = var4.getDelimiter();
    boolean var9 = var4.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var4.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var4.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var14 = var12.withCommentMarker('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test463");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    boolean var6 = var5.isCommentMarkerSet();
    boolean var7 = var5.getSkipHeaderRecord();
    java.lang.String[] var8 = var5.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test464");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.Character var3 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    boolean var12 = var9.getAllowMissingColumnNames();
    boolean var13 = var5.equals((java.lang.Object)var9);
    java.lang.Character var14 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var16 = var5.withRecordSeparator("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var20 = var19.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord();
    boolean var22 = var19.isCommentMarkerSet();
    java.lang.Character var23 = var19.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var24 = var19.withSkipHeaderRecord();
    java.lang.Character var25 = var24.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var27 = var24.withIgnoreHeaderCase(false);
    boolean var28 = var16.equals((java.lang.Object)var24);
    boolean var29 = var24.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test465");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var15 = var10.withSkipHeaderRecord();
    boolean var16 = var15.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreEmptyLines();
    boolean var18 = var17.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test466");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    boolean var13 = var11.isNullStringSet();
    java.lang.String[] var15 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var16 = var11.withHeader(var15);
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord();
    boolean var21 = var18.isCommentMarkerSet();
    boolean var22 = var18.getIgnoreHeaderCase();
    java.lang.String[] var24 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var25 = var18.withHeader(var24);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    boolean var30 = var27.isCommentMarkerSet();
    boolean var31 = var27.getIgnoreHeaderCase();
    java.lang.String[] var33 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var34 = var27.withHeader(var33);
    org.apache.commons.csv.CSVFormat var35 = var18.withHeader(var33);
    java.lang.String var36 = var16.format((java.lang.Object[])var33);
    org.apache.commons.csv.CSVFormat var37 = var9.withHeader(var33);
    java.lang.String var38 = var9.getRecordSeparator();
    java.lang.Character var39 = var9.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var36.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test467");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    java.util.Map var9 = var6.getHeaderMap();
    java.util.List var10 = var6.getRecords();
    java.util.List var11 = var6.getRecords();
    var6.close();
    long var13 = var6.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test468");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    boolean var9 = var5.isQuoteCharacterSet();
    java.lang.String[] var10 = var5.getHeaderComments();
    boolean var11 = var5.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test469");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = var8.withQuote('#');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    boolean var16 = var12.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var19 = var18.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = var18.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var23 = var18.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var24 = var23.withIgnoreSurroundingSpaces();
    java.lang.Object[] var25 = new java.lang.Object[] { var23};
    java.lang.String var26 = var12.format(var25);
    java.lang.String var27 = var8.format(var25);
    org.apache.commons.csv.CSVFormat var29 = var8.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var30 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var32 = var30.withNullString("4Default Excel MySQL RFC4180 TDF4");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var26.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var27.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test470");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.Character var4 = var3.getCommentMarker();
    org.apache.commons.csv.CSVFormat var6 = var3.withIgnoreEmptyLines(false);
    java.lang.String var7 = var3.toString();
    org.apache.commons.csv.CSVFormat var9 = var3.withDelimiter('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var7.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test471");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    boolean var5 = var4.getIgnoreEmptyLines();
    boolean var6 = var4.getAllowMissingColumnNames();
    java.lang.String[] var7 = var4.getHeader();
    char var8 = var4.getDelimiter();
    boolean var9 = var4.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var4.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var4.withCommentMarker((java.lang.Character)'a');
    boolean var13 = var4.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test472");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var12 = var6.withDelimiter('a');
    java.lang.String[] var13 = var12.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test473");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > NullString=<> SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test474");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames();
    boolean var4 = var3.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var6 = var3.withCommentMarker((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test475");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    boolean var5 = var4.isCommentMarkerSet();
    java.lang.Character var6 = var4.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var4.withEscape((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test476");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote((java.lang.Character)'a');
    java.lang.Character var9 = var8.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var11 = var8.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var8.withDelimiter('4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var15 = var8.withQuote((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 'a'+ "'", var9.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test477");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var11 = var7.withQuote('4');
    org.apache.commons.csv.CSVFormat var13 = var7.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var15 = var7.withEscape('4');
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    boolean var22 = var19.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var19.withEscape('#');
    org.apache.commons.csv.CSVFormat var26 = var19.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var29 = var28.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var31 = var28.withNullString("");
    org.apache.commons.csv.CSVFormat var32 = var28.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var34 = var32.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var36 = var34.withSkipHeaderRecord(false);
    char var37 = var34.getDelimiter();
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var40 = var39.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var42 = var39.withRecordSeparator("hi!");
    boolean var43 = var42.isCommentMarkerSet();
    java.lang.Character var44 = var42.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var46 = var42.withAllowMissingColumnNames(true);
    boolean var47 = var46.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var50 = var49.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var51 = var49.withSkipHeaderRecord();
    java.lang.String var52 = var51.toString();
    org.apache.commons.csv.CSVFormat var54 = var51.withNullString("");
    org.apache.commons.csv.CSVFormat var56 = var54.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var58 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var59 = var58.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var60 = var58.withSkipHeaderRecord();
    boolean var61 = var58.isCommentMarkerSet();
    boolean var62 = var58.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var64 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var65 = var64.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var67 = var64.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var69 = var64.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var70 = var69.withIgnoreSurroundingSpaces();
    java.lang.Object[] var71 = new java.lang.Object[] { var69};
    java.lang.String var72 = var58.format(var71);
    java.lang.String[] var74 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var75 = var58.withHeader(var74);
    org.apache.commons.csv.CSVFormat var76 = var54.withHeader(var74);
    java.lang.String var77 = var46.format((java.lang.Object[])var74);
    java.lang.String var78 = var34.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var79 = var26.withHeaderComments((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var80 = var15.withHeaderComments((java.lang.Object[])var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var52.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var72.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var77.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var78.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test478");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker((java.lang.Character)'4');
    boolean var16 = var15.getAllowMissingColumnNames();
    java.lang.String var17 = var15.toString();
    java.lang.Character var18 = var15.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var19 = var15.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Delimiter=< > CommentStart=<4> RecordSeparator=<Default Excel MySQL RFC4180 TDF> EmptyLines:ignored SkipHeaderRecord:true"+ "'", var17.equals("Delimiter=< > CommentStart=<4> RecordSeparator=<Default Excel MySQL RFC4180 TDF> EmptyLines:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test479");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var7 = var2.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var8 = var7.getCommentMarker();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("", var7);
    boolean var10 = var9.isClosed();
    long var11 = var9.getCurrentLineNumber();
    long var12 = var9.getRecordNumber();
    boolean var13 = var9.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test480");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = var10.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var19 = var10.withRecordSeparator(' ');
    java.lang.String var20 = var19.toString();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var23 = var22.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var25 = var22.withRecordSeparator("hi!");
    boolean var26 = var25.isCommentMarkerSet();
    java.lang.Character var27 = var25.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var29 = var25.withAllowMissingColumnNames(true);
    boolean var30 = var29.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var33 = var32.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord();
    java.lang.String var35 = var34.toString();
    org.apache.commons.csv.CSVFormat var37 = var34.withNullString("");
    org.apache.commons.csv.CSVFormat var39 = var37.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var42 = var41.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord();
    boolean var44 = var41.isCommentMarkerSet();
    boolean var45 = var41.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var48 = var47.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var50 = var47.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var52 = var47.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var53 = var52.withIgnoreSurroundingSpaces();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.String var55 = var41.format(var54);
    java.lang.String[] var57 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var58 = var41.withHeader(var57);
    org.apache.commons.csv.CSVFormat var59 = var37.withHeader(var57);
    java.lang.String var60 = var29.format((java.lang.Object[])var57);
    java.lang.String var61 = var19.format((java.lang.Object[])var57);
    org.apache.commons.csv.CSVFormat var62 = var6.withHeader(var57);
    boolean var63 = var6.getSkipHeaderRecord();
    boolean var64 = var6.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var20.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var35.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var55.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var60.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var61.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test481");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = var10.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var18 = var6.equals((java.lang.Object)var17);
    org.apache.commons.csv.CSVFormat var20 = var17.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var21 = var20.withIgnoreEmptyLines();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var23 = var20.withCommentMarker(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test482");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withIgnoreSurroundingSpaces();
    java.lang.Character var13 = var11.getCommentMarker();
    java.lang.String var14 = var11.getNullString();
    org.apache.commons.csv.CSVFormat var15 = var11.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    boolean var19 = var17.isNullStringSet();
    java.lang.String[] var21 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var22 = var17.withHeader(var21);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord();
    boolean var27 = var24.isCommentMarkerSet();
    boolean var28 = var24.getIgnoreHeaderCase();
    java.lang.String[] var30 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var31 = var24.withHeader(var30);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord();
    boolean var36 = var33.isCommentMarkerSet();
    boolean var37 = var33.getIgnoreHeaderCase();
    java.lang.String[] var39 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var40 = var33.withHeader(var39);
    org.apache.commons.csv.CSVFormat var41 = var24.withHeader(var39);
    java.lang.String var42 = var22.format((java.lang.Object[])var39);
    org.apache.commons.csv.CSVFormat var43 = var15.withHeader(var39);
    java.lang.String var44 = var8.format((java.lang.Object[])var39);
    org.apache.commons.csv.CSVFormat var46 = var8.withEscape('4');
    org.apache.commons.csv.CSVFormat var48 = var8.withEscape('#');
    boolean var49 = var8.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var42.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var44.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test483");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getCurrentLineNumber();
    long var8 = var6.getCurrentLineNumber();
    java.util.Map var9 = var6.getHeaderMap();
    long var10 = var6.getRecordNumber();
    long var11 = var6.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test484");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    java.lang.String var5 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var7 = var1.withSkipHeaderRecord(true);
    java.lang.Character var8 = var1.getQuoteCharacter();
    boolean var9 = var1.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test485");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var11 = var9.withEscape('4');
    boolean var12 = var9.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord();
    java.lang.String var17 = var16.toString();
    org.apache.commons.csv.CSVFormat var19 = var16.withNullString("");
    org.apache.commons.csv.CSVFormat var21 = var16.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var22 = var21.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var23 = var21.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var25 = var21.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var27 = var25.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var30 = var29.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var32 = var29.withCommentMarker('#');
    boolean var33 = var32.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var36 = var35.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var37 = var35.withSkipHeaderRecord();
    boolean var38 = var35.isCommentMarkerSet();
    boolean var39 = var35.getIgnoreHeaderCase();
    java.lang.String[] var41 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var42 = var35.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var32.withHeaderComments((java.lang.Object[])var41);
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var46 = var45.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var48 = var45.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var50 = var45.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var53 = var52.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var55 = var52.withNullString("");
    org.apache.commons.csv.CSVFormat var56 = var52.withIgnoreEmptyLines();
    java.lang.String var57 = var56.toString();
    org.apache.commons.csv.CSVFormat var59 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var60 = var59.withAllowMissingColumnNames();
    boolean var61 = var59.isNullStringSet();
    java.lang.String[] var63 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var64 = var59.withHeader(var63);
    org.apache.commons.csv.CSVFormat var65 = var56.withHeader(var63);
    org.apache.commons.csv.CSVFormat var66 = var45.withHeader(var63);
    java.lang.String var67 = var66.toString();
    java.lang.String[] var68 = var66.getHeader();
    org.apache.commons.csv.CSVFormat var69 = var43.withHeader(var68);
    org.apache.commons.csv.CSVFormat var70 = var27.withHeader(var68);
    org.apache.commons.csv.CSVFormat var71 = var9.withHeader(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var17.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var57.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var67.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test486");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote((java.lang.Character)'a');
    boolean var9 = var8.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreEmptyLines();
    java.lang.String[] var11 = var8.getHeader();
    boolean var12 = var8.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test487");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    boolean var5 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var9 = var1.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test488");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = var13.withNullString("");
    org.apache.commons.csv.CSVFormat var17 = var13.withIgnoreEmptyLines();
    java.lang.String[] var18 = var17.getHeaderComments();
    org.apache.commons.csv.CSVFormat var20 = var17.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var22 = var17.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var24 = var22.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var27 = var26.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var28 = var26.withSkipHeaderRecord();
    boolean var29 = var26.isCommentMarkerSet();
    boolean var30 = var26.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var33 = var32.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var35 = var32.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var37 = var32.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var38 = var37.withIgnoreSurroundingSpaces();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.String var40 = var26.format(var39);
    java.lang.String[] var42 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var43 = var26.withHeader(var42);
    org.apache.commons.csv.CSVFormat var44 = var22.withHeader(var42);
    org.apache.commons.csv.CSVParser var45 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:false Header:[]", var44);
    org.apache.commons.csv.CSVFormat var46 = var44.withIgnoreSurroundingSpaces();
    java.lang.String[] var47 = var46.getHeader();
    org.apache.commons.csv.CSVFormat var48 = var10.withHeader(var47);
    org.apache.commons.csv.CSVFormat var49 = var48.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var40.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test489");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var8 = var1.withDelimiter('4');
    boolean var9 = var1.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test490");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var5 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withAllowMissingColumnNames();
    boolean var7 = var5.isNullStringSet();
    java.lang.String[] var9 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var14 = var10.withSkipHeaderRecord();
    boolean var15 = var1.equals((java.lang.Object)var14);
    boolean var16 = var14.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var18 = var14.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreEmptyLines(true);
    java.lang.String var21 = var20.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test491");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    boolean var9 = var6.isClosed();
    java.util.List var10 = var6.getRecords();
    java.util.Iterator var11 = var6.iterator();
    long var12 = var6.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test492");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    boolean var5 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreSurroundingSpaces(false);
    java.lang.Character var8 = var7.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var12 = var7.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test493");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withQuote((java.lang.Character)'4');
    char var8 = var7.getDelimiter();
    boolean var9 = var7.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var7.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var13 = var7.withSkipHeaderRecord(true);
    boolean var14 = var13.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test494");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreSurroundingSpaces();
    java.lang.Character var3 = var1.getCommentMarker();
    java.lang.String var4 = var1.getNullString();
    org.apache.commons.csv.QuoteMode var5 = var1.getQuoteMode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var7 = var1.withQuote((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test495");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var15 = var10.withSkipHeaderRecord();
    boolean var16 = var15.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var20 = var19.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord();
    boolean var22 = var19.isCommentMarkerSet();
    java.lang.Character var23 = var19.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var24 = var19.withSkipHeaderRecord();
    java.lang.Character var25 = var24.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var27 = var24.withIgnoreEmptyLines(true);
    boolean var28 = var27.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var32 = var30.withSkipHeaderRecord();
    boolean var33 = var30.isCommentMarkerSet();
    boolean var34 = var30.getIgnoreHeaderCase();
    java.lang.String[] var36 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var37 = var30.withHeader(var36);
    org.apache.commons.csv.CSVFormat var38 = var27.withHeader(var36);
    boolean var39 = var17.equals((java.lang.Object)var27);
    boolean var40 = var17.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test496");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    java.lang.Character var11 = var10.getQuoteCharacter();
    boolean var12 = var10.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var10.withEscape((java.lang.Character)'a');
    java.lang.String var15 = var14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=< > Escape=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"+ "'", var15.equals("Delimiter=< > Escape=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"));

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test497");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    boolean var9 = var6.isClosed();
    java.util.Map var10 = var6.getHeaderMap();
    long var11 = var6.getRecordNumber();
    java.util.Map var12 = var6.getHeaderMap();
    long var13 = var6.getCurrentLineNumber();
    java.util.Map var14 = var6.getHeaderMap();
    var6.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var16 = var6.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test498");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    boolean var5 = var4.isCommentMarkerSet();
    java.lang.Character var6 = var4.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(true);
    boolean var9 = var8.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    java.lang.String var14 = var13.toString();
    org.apache.commons.csv.CSVFormat var16 = var13.withNullString("");
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var21 = var20.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord();
    boolean var23 = var20.isCommentMarkerSet();
    boolean var24 = var20.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var27 = var26.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var29 = var26.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var31 = var26.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var32 = var31.withIgnoreSurroundingSpaces();
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.String var34 = var20.format(var33);
    java.lang.String[] var36 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var37 = var20.withHeader(var36);
    org.apache.commons.csv.CSVFormat var38 = var16.withHeader(var36);
    java.lang.String var39 = var8.format((java.lang.Object[])var36);
    org.apache.commons.csv.CSVFormat var40 = var8.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var41 = var40.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var42 = var41.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var43 = var42.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var14.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var34.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var39.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test499");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var2.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var2.withIgnoreEmptyLines(false);
    boolean var9 = var8.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test500");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var1.withQuote((java.lang.Character)'a');
    java.lang.String var8 = var7.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreSurroundingSpaces(true);
    boolean var11 = var10.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

}
