package randoop;

import junit.framework.*;

public class RandoopTest3 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test1");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    java.lang.Character var6 = var1.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test2");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var10 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test3");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    boolean var9 = var3.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var11 = var3.withQuote('a');
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var15 = var14.isCommentMarkerSet();
    boolean var16 = var14.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var17 = org.apache.commons.csv.CSVParser.parse("", var14);
    boolean var18 = var14.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var14.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var22 = var14.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var25 = var24.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var27 = var24.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var29 = var24.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var30 = var29.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var33 = var32.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = var34.withAllowMissingColumnNames(true);
    java.lang.String var37 = var36.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var40 = var39.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var42 = var39.withNullString("");
    org.apache.commons.csv.CSVFormat var43 = var39.withIgnoreEmptyLines();
    java.lang.String var44 = var43.toString();
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    boolean var48 = var46.isNullStringSet();
    java.lang.String[] var50 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var51 = var46.withHeader(var50);
    org.apache.commons.csv.CSVFormat var52 = var43.withHeader(var50);
    java.lang.String var53 = var36.format((java.lang.Object[])var50);
    org.apache.commons.csv.CSVFormat var54 = var29.withHeaderComments((java.lang.Object[])var50);
    java.lang.String var55 = var22.format((java.lang.Object[])var50);
    org.apache.commons.csv.CSVFormat var56 = var11.withHeader(var50);
    java.lang.String var57 = var11.getNullString();
    org.apache.commons.csv.CSVFormat var59 = var11.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var61 = var59.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var44.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test4");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    boolean var5 = var4.getAllowMissingColumnNames();
    java.lang.Character var6 = var4.getQuoteCharacter();
    boolean var7 = var4.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreSurroundingSpaces(true);
    java.lang.String var10 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > CommentStart=<#> SkipHeaderRecord:false"+ "'", var10.equals("Delimiter=< > CommentStart=<#> SkipHeaderRecord:false"));

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test5");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(true);
    java.lang.String[] var10 = var6.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test6");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test7");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    java.lang.String var9 = var6.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test8");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var22 = var20.withEscape('a');
    java.lang.Character var23 = var22.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test9");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    boolean var3 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreEmptyLines(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var11 = var9.withEscape('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test10");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreSurroundingSpaces();
    java.lang.Character var3 = var1.getCommentMarker();
    java.lang.String var4 = var1.getNullString();
    char var5 = var1.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == ' ');

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test11");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var11 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var12 = var10.withHeaderComments((java.lang.Object[])var11);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    java.lang.String var25 = var24.toString();
    org.apache.commons.csv.CSVFormat var27 = var24.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var24.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    boolean var33 = var31.isNullStringSet();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var31.withHeader(var35);
    java.lang.String var37 = var29.format((java.lang.Object[])var35);
    java.lang.String var38 = var20.format((java.lang.Object[])var35);
    org.apache.commons.csv.CSVFormat var39 = var14.withHeader(var35);
    org.apache.commons.csv.CSVFormat var41 = var39.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var43 = var39.withRecordSeparator("Delimiter=< > SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var44 = var39.withIgnoreEmptyLines();
    boolean var45 = var39.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var25.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test12");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var11 = var7.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test13");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var17 = var12.withCommentMarker((java.lang.Character)'a');
    boolean var18 = var10.equals((java.lang.Object)var17);
    org.apache.commons.csv.QuoteMode var19 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var21 = var10.withCommentMarker('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test14");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreSurroundingSpaces(true);
    java.lang.String[] var13 = var12.getHeaderComments();
    org.apache.commons.csv.CSVFormat var15 = var12.withQuote((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test15");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var6.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = var6.withNullString("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var12.withRecordSeparator('a');
    java.lang.String var16 = var15.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var16.equals("Default Excel MySQL RFC4180 TDF"));

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test16");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    boolean var9 = var3.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var11 = var3.withQuote('a');
    org.apache.commons.csv.CSVFormat var13 = var11.withNullString("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true");
    java.lang.Character var14 = var11.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 'a'+ "'", var14.equals('a'));

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test17");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreHeaderCase(false);
    boolean var10 = var7.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var7.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreEmptyLines(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test18");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var2.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var2.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var9 = var8.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test19");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var11 = var6.withSkipHeaderRecord(false);
    java.lang.String[] var12 = var11.getHeaderComments();
    java.lang.Character var13 = var11.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test20");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape((java.lang.Character)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test21");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    boolean var9 = var8.isNullStringSet();
    org.apache.commons.csv.CSVFormat var11 = var8.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test22");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var7 = var6.getCommentMarker();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames();
    boolean var9 = var6.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var11 = var6.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test23");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Default Excel MySQL 4RFC441804 TDF");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test24");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var5.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote('a');
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDFhi!", var9);
    char var11 = var9.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == ' ');

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test25");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines(true);
    boolean var9 = var8.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator("ALL MINIMAL NON_NUMERIC NONEDelimiter=< > SkipHeaderRecord:true");
    boolean var13 = var10.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test26");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    java.lang.Character var7 = var5.getCommentMarker();
    org.apache.commons.csv.CSVFormat var9 = var5.withEscape('4');
    java.lang.String var10 = var9.getNullString();
    org.apache.commons.csv.CSVFormat var12 = var9.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test27");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withEscape('a');
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test28");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreSurroundingSpaces();
    java.lang.Character var3 = var1.getCommentMarker();
    java.lang.String var4 = var1.getNullString();
    java.lang.Character var5 = var1.getCommentMarker();
    boolean var6 = var1.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test29");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var8 = var1.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var1.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var14 = var13.getRecordSeparator();
    java.lang.Character var15 = var13.getCommentMarker();
    boolean var16 = var13.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var18 = var13.withIgnoreSurroundingSpaces(false);
    boolean var19 = var1.equals((java.lang.Object)var13);
    java.lang.Character var20 = var1.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test30");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var12 = var11.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var14 = var11.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var16 = var11.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var17 = var16.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var20 = var19.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var23 = var21.withAllowMissingColumnNames(true);
    java.lang.String var24 = var23.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var27 = var26.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var29 = var26.withNullString("");
    org.apache.commons.csv.CSVFormat var30 = var26.withIgnoreEmptyLines();
    java.lang.String var31 = var30.toString();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    boolean var35 = var33.isNullStringSet();
    java.lang.String[] var37 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var38 = var33.withHeader(var37);
    org.apache.commons.csv.CSVFormat var39 = var30.withHeader(var37);
    java.lang.String var40 = var23.format((java.lang.Object[])var37);
    org.apache.commons.csv.CSVFormat var41 = var16.withHeaderComments((java.lang.Object[])var37);
    boolean var42 = var9.equals((java.lang.Object)var16);
    boolean var43 = var9.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var44 = var9.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var31.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test31");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    java.lang.String var5 = var4.toString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("");
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false", var9);
    org.apache.commons.csv.CSVFormat var15 = var9.withIgnoreEmptyLines();
    boolean var16 = var15.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test32");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var8 = var1.withQuote((java.lang.Character)'4');
    boolean var9 = var8.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = var8.withDelimiter('#');
    boolean var12 = var8.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test33");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = var10.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker('4');
    java.lang.Character var16 = var15.getCommentMarker();
    java.lang.Character var17 = var15.getEscapeCharacter();
    boolean var18 = var15.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + '4'+ "'", var16.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test34");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDF", var8);
    java.util.List var10 = var9.getRecords();
    long var11 = var9.getRecordNumber();
    java.util.Iterator var12 = var9.iterator();
    java.util.Iterator var13 = var9.iterator();
    var9.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test35");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var6.withRecordSeparator('4');
    boolean var9 = var8.isQuoteCharacterSet();
    org.apache.commons.csv.QuoteMode var10 = var8.getQuoteMode();
    org.apache.commons.csv.CSVFormat var11 = var8.withSkipHeaderRecord();
    boolean var12 = var8.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var8.withQuote('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test36");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String var6 = var5.toString();
    org.apache.commons.csv.CSVFormat var7 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var7.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var6.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test37");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var9 = var7.withNullString("ALL MINIMAL NON_NUMERIC NONE");
    boolean var10 = var7.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var7.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var13 = var12.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test38");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    java.lang.Character var7 = var5.getCommentMarker();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var11 = var10.isCommentMarkerSet();
    java.lang.String[] var12 = var10.getHeaderComments();
    java.lang.String[] var13 = var10.getHeader();
    boolean var14 = var10.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var17.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var21 = org.apache.commons.csv.CSVParser.parse("", var20);
    long var22 = var21.getCurrentLineNumber();
    long var23 = var21.getCurrentLineNumber();
    var21.close();
    java.util.Iterator var25 = var21.iterator();
    long var26 = var21.getRecordNumber();
    boolean var27 = var10.equals((java.lang.Object)var21);
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var30 = var29.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var32 = var29.withNullString("");
    org.apache.commons.csv.CSVFormat var33 = var29.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var35 = var33.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var37 = var35.withSkipHeaderRecord(false);
    char var38 = var35.getDelimiter();
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var41 = var40.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var43 = var40.withRecordSeparator("hi!");
    boolean var44 = var43.isCommentMarkerSet();
    java.lang.Character var45 = var43.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var47 = var43.withAllowMissingColumnNames(true);
    boolean var48 = var47.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var51 = var50.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var52 = var50.withSkipHeaderRecord();
    java.lang.String var53 = var52.toString();
    org.apache.commons.csv.CSVFormat var55 = var52.withNullString("");
    org.apache.commons.csv.CSVFormat var57 = var55.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var59 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var60 = var59.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var61 = var59.withSkipHeaderRecord();
    boolean var62 = var59.isCommentMarkerSet();
    boolean var63 = var59.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var65 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var66 = var65.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var68 = var65.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var70 = var65.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var71 = var70.withIgnoreSurroundingSpaces();
    java.lang.Object[] var72 = new java.lang.Object[] { var70};
    java.lang.String var73 = var59.format(var72);
    java.lang.String[] var75 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var76 = var59.withHeader(var75);
    org.apache.commons.csv.CSVFormat var77 = var55.withHeader(var75);
    java.lang.String var78 = var47.format((java.lang.Object[])var75);
    java.lang.String var79 = var35.format((java.lang.Object[])var75);
    java.lang.String var80 = var10.format((java.lang.Object[])var75);
    java.lang.String var81 = var5.format((java.lang.Object[])var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var53.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var73.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var78.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var79.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var80.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var81.equals("Default Excel MySQL RFC4180 TDF"));

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test39");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var7 = var6.getCommentMarker();
    org.apache.commons.csv.QuoteMode var8 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var6.withSkipHeaderRecord(false);
    java.lang.String var11 = var6.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test40");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var2.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var7 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > QuoteChar=<#> CommentStart=<4> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false", var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test41");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    java.lang.Character var21 = var18.getCommentMarker();
    org.apache.commons.csv.CSVFormat var23 = var18.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test42");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker((java.lang.Character)'4');
    boolean var8 = var7.isEscapeCharacterSet();
    boolean var9 = var7.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test43");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var7 = var2.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote('#');
    boolean var10 = var9.getIgnoreSurroundingSpaces();
    java.lang.Character var11 = var9.getCommentMarker();
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse(" ", var9);
    java.util.List var13 = var12.getRecords();
    java.util.List var14 = var12.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test44");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    java.lang.Character var4 = var2.getQuoteCharacter();
    char var5 = var2.getDelimiter();
    java.lang.Character var6 = var2.getEscapeCharacter();
    org.apache.commons.csv.CSVParser var7 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false> SkipHeaderRecord:true", var2);
    java.util.Iterator var8 = var7.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test45");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.Character var3 = var1.getQuoteCharacter();
    char var4 = var1.getDelimiter();
    org.apache.commons.csv.CSVFormat var6 = var1.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape('a');
    java.lang.String var9 = var6.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test46");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    boolean var10 = var8.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var12 = var8.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var14 = var8.withAllowMissingColumnNames(true);
    java.lang.String[] var15 = var8.getHeader();
    java.lang.Character var16 = var8.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test47");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var9 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var8.withNullString("");
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreEmptyLines();
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    boolean var17 = var15.isNullStringSet();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var15.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var12.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = var1.withHeader(var19);
    org.apache.commons.csv.CSVFormat var23 = var22.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode var24 = var23.getQuoteMode();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var27 = var26.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var28 = var26.withSkipHeaderRecord();
    java.lang.String var29 = var28.toString();
    org.apache.commons.csv.CSVFormat var31 = var28.withNullString("");
    org.apache.commons.csv.CSVFormat var33 = var28.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var35 = var28.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var37 = var28.withRecordSeparator(' ');
    java.lang.String var38 = var37.toString();
    org.apache.commons.csv.CSVFormat var40 = var37.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var42 = var40.withEscape('4');
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var45 = var44.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var46 = var44.withSkipHeaderRecord();
    java.lang.String var47 = var46.toString();
    org.apache.commons.csv.CSVFormat var49 = var46.withNullString("");
    org.apache.commons.csv.CSVFormat var51 = var46.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var53 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var54 = var53.withAllowMissingColumnNames();
    boolean var55 = var53.isNullStringSet();
    java.lang.String[] var57 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var58 = var53.withHeader(var57);
    java.lang.String var59 = var51.format((java.lang.Object[])var57);
    java.lang.String var60 = var42.format((java.lang.Object[])var57);
    org.apache.commons.csv.CSVFormat var61 = var23.withHeaderComments((java.lang.Object[])var57);
    org.apache.commons.csv.CSVFormat var63 = var23.withDelimiter('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var13.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var29.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var38.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var47.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test48");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var3 = var2.getDelimiter();
    boolean var4 = var2.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("hi!", var2);
    java.lang.String var6 = var2.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test49");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var7 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var10 = var6.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test50");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = var10.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker('4');
    java.lang.Character var16 = var15.getCommentMarker();
    java.lang.String var17 = var15.toString();
    boolean var18 = var15.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + '4'+ "'", var16.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Delimiter=< > QuoteChar=<#> CommentStart=<4> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var17.equals("Delimiter=< > QuoteChar=<#> CommentStart=<4> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test51");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getRecordNumber();
    long var8 = var6.getRecordNumber();
    var6.close();
    java.util.Iterator var10 = var6.iterator();
    boolean var11 = var6.isClosed();
    var6.close();
    var6.close();
    long var14 = var6.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0L);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test52");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var14 = var13.getDelimiter();
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord();
    java.lang.String var21 = var20.toString();
    org.apache.commons.csv.CSVFormat var23 = var20.withNullString("");
    org.apache.commons.csv.CSVFormat var25 = var20.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var26 = var25.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var27 = var26.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var28 = org.apache.commons.csv.CSVParser.parse("DefaultaExcelaMySQLaRFC4180aTDF", var26);
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var31 = var30.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var33 = var30.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var35 = var30.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var38 = var37.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var40 = var37.withNullString("");
    org.apache.commons.csv.CSVFormat var41 = var37.withIgnoreEmptyLines();
    java.lang.String var42 = var41.toString();
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var45 = var44.withAllowMissingColumnNames();
    boolean var46 = var44.isNullStringSet();
    java.lang.String[] var48 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var49 = var44.withHeader(var48);
    org.apache.commons.csv.CSVFormat var50 = var41.withHeader(var48);
    org.apache.commons.csv.CSVFormat var51 = var30.withHeader(var48);
    org.apache.commons.csv.CSVFormat var52 = var51.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode var53 = var52.getQuoteMode();
    org.apache.commons.csv.CSVFormat var55 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var56 = var55.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var57 = var55.withSkipHeaderRecord();
    java.lang.String var58 = var57.toString();
    org.apache.commons.csv.CSVFormat var60 = var57.withNullString("");
    org.apache.commons.csv.CSVFormat var62 = var57.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var64 = var57.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var66 = var57.withRecordSeparator(' ');
    java.lang.String var67 = var66.toString();
    org.apache.commons.csv.CSVFormat var69 = var66.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var71 = var69.withEscape('4');
    org.apache.commons.csv.CSVFormat var73 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var74 = var73.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var75 = var73.withSkipHeaderRecord();
    java.lang.String var76 = var75.toString();
    org.apache.commons.csv.CSVFormat var78 = var75.withNullString("");
    org.apache.commons.csv.CSVFormat var80 = var75.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var82 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var83 = var82.withAllowMissingColumnNames();
    boolean var84 = var82.isNullStringSet();
    java.lang.String[] var86 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var87 = var82.withHeader(var86);
    java.lang.String var88 = var80.format((java.lang.Object[])var86);
    java.lang.String var89 = var71.format((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var90 = var52.withHeaderComments((java.lang.Object[])var86);
    java.lang.String var91 = var26.format((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var92 = var13.withHeader(var86);
    org.apache.commons.csv.CSVFormat var93 = var11.withHeader(var86);
    org.apache.commons.csv.CSVFormat var95 = var11.withQuote((java.lang.Character)'a');
    boolean var96 = var11.isQuoteCharacterSet();
    java.lang.String var97 = var11.toString();
    org.apache.commons.csv.CSVFormat var99 = var11.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var21.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var42.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var58.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var67.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var76.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + ""+ "'", var88.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + ""+ "'", var91.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:true"+ "'", var97.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test53");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var3.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var13 = var3.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker((java.lang.Character)'a');
    boolean var16 = var13.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test54");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var6 = var4.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var8 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var12 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var14 = var12.withCommentMarker((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test55");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var11 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var12 = var10.withHeaderComments((java.lang.Object[])var11);
    boolean var13 = var12.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord();
    boolean var19 = var16.isCommentMarkerSet();
    boolean var20 = var16.getIgnoreHeaderCase();
    java.lang.String[] var22 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var23 = var16.withHeader(var22);
    org.apache.commons.csv.QuoteMode[] var24 = org.apache.commons.csv.QuoteMode.values();
    java.lang.String var25 = var16.format((java.lang.Object[])var24);
    boolean var26 = var14.equals((java.lang.Object)var16);
    org.apache.commons.csv.CSVFormat var27 = var16.withAllowMissingColumnNames();
    java.lang.String var28 = var27.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ALL MINIMAL NON_NUMERIC NONE"+ "'", var25.equals("ALL MINIMAL NON_NUMERIC NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test56");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    boolean var5 = var2.isCommentMarkerSet();
    java.lang.Character var6 = var2.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var7 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var2.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var10 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var9.withSkipHeaderRecord(false);
    char var13 = var9.getDelimiter();
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > QuoteChar=<#> NullString=<Delimiter=< > QuoteChar=<#> NullString=<Delimiter=< > SkipHeaderRecord:true> SurroundingSpaces:ignored SkipHeaderRecord:false> SurroundingSpaces:ignored SkipHeaderRecord:true", var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test57");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var7 = var2.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var8 = var7.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:trueDelimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false Header:[]", var10);
    java.util.List var12 = var11.getRecords();
    java.util.List var13 = var11.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test58");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    boolean var7 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var9 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var12 = var11.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var14 = var11.withCommentMarker('#');
    boolean var15 = var14.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    boolean var20 = var17.isCommentMarkerSet();
    boolean var21 = var17.getIgnoreHeaderCase();
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var17.withHeader(var23);
    org.apache.commons.csv.CSVFormat var25 = var14.withHeaderComments((java.lang.Object[])var23);
    org.apache.commons.csv.CSVFormat var26 = var9.withHeader(var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var28 = var26.withQuote(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test59");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.getAllowMissingColumnNames();
    boolean var7 = var3.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var9 = var3.withCommentMarker('4');
    boolean var10 = var3.getIgnoreSurroundingSpaces();
    java.lang.Character var11 = var3.getQuoteCharacter();
    java.lang.Character var12 = var3.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test60");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    java.lang.String var15 = var14.toString();
    org.apache.commons.csv.CSVFormat var17 = var14.withNullString("");
    org.apache.commons.csv.CSVFormat var19 = var14.withIgnoreSurroundingSpaces(true);
    boolean var20 = var14.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var22 = var14.withQuote('a');
    org.apache.commons.csv.CSVFormat var24 = var22.withNullString("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var27 = var26.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var29 = var26.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var31 = var26.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var34 = var33.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var36 = var33.withNullString("");
    org.apache.commons.csv.CSVFormat var37 = var33.withIgnoreEmptyLines();
    java.lang.String var38 = var37.toString();
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var41 = var40.withAllowMissingColumnNames();
    boolean var42 = var40.isNullStringSet();
    java.lang.String[] var44 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var45 = var40.withHeader(var44);
    org.apache.commons.csv.CSVFormat var46 = var37.withHeader(var44);
    org.apache.commons.csv.CSVFormat var47 = var26.withHeader(var44);
    java.lang.String var48 = var47.toString();
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var51 = var50.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var53 = var50.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var55 = var50.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var58 = var57.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var60 = var57.withNullString("");
    org.apache.commons.csv.CSVFormat var61 = var57.withIgnoreEmptyLines();
    java.lang.String var62 = var61.toString();
    org.apache.commons.csv.CSVFormat var64 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var65 = var64.withAllowMissingColumnNames();
    boolean var66 = var64.isNullStringSet();
    java.lang.String[] var68 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var69 = var64.withHeader(var68);
    org.apache.commons.csv.CSVFormat var70 = var61.withHeader(var68);
    org.apache.commons.csv.CSVFormat var71 = var50.withHeader(var68);
    java.lang.String var72 = var47.format((java.lang.Object[])var68);
    org.apache.commons.csv.CSVFormat var73 = var22.withHeader(var68);
    java.lang.String var74 = var10.format((java.lang.Object[])var68);
    org.apache.commons.csv.CSVFormat var75 = var10.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var15.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var38.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var48.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var62.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + ""+ "'", var72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "4"+ "'", var74.equals("4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test61");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Map var7 = var6.getHeaderMap();
    var6.close();
    boolean var9 = var6.isClosed();
    java.util.Iterator var10 = var6.iterator();
    java.util.Map var11 = var6.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test62");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    org.apache.commons.csv.CSVFormat var3 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator("#");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test63");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord();
    boolean var17 = var14.isCommentMarkerSet();
    boolean var18 = var14.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var21 = var20.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var23 = var20.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var25 = var20.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var26 = var25.withIgnoreSurroundingSpaces();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.String var28 = var14.format(var27);
    java.lang.String[] var30 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var31 = var14.withHeader(var30);
    org.apache.commons.csv.CSVFormat var32 = var10.withHeader(var30);
    org.apache.commons.csv.CSVFormat var34 = var32.withEscape('4');
    java.lang.Character var35 = var34.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var28.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test64");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    java.lang.Character var4 = var2.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    boolean var13 = var10.getAllowMissingColumnNames();
    boolean var14 = var6.equals((java.lang.Object)var10);
    org.apache.commons.csv.CSVParser var15 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false", var6);
    var15.close();
    java.util.Iterator var17 = var15.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test65");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    boolean var9 = var3.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var11 = var3.withQuote('a');
    org.apache.commons.csv.CSVFormat var13 = var3.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var15 = var13.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var17 = var13.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var19 = var13.withRecordSeparator("aa");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test66");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote('#');
    org.apache.commons.csv.CSVFormat var10 = var8.withEscape('4');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    java.lang.Character var16 = var12.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var17 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var12.withIgnoreEmptyLines(true);
    java.lang.String var20 = var12.toString();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var23.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var27 = org.apache.commons.csv.CSVParser.parse("", var26);
    long var28 = var27.getCurrentLineNumber();
    long var29 = var27.getCurrentLineNumber();
    var27.close();
    boolean var31 = var27.isClosed();
    java.util.Iterator var32 = var27.iterator();
    java.util.Iterator var33 = var27.iterator();
    var27.close();
    boolean var35 = var27.isClosed();
    boolean var36 = var12.equals((java.lang.Object)var27);
    boolean var37 = var8.equals((java.lang.Object)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=< > SkipHeaderRecord:false"+ "'", var20.equals("Delimiter=< > SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test67");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    java.lang.Character var3 = var1.getCommentMarker();
    boolean var4 = var1.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreSurroundingSpaces();
    boolean var8 = var7.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test68");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote(' ');
    boolean var10 = var9.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var9.withSkipHeaderRecord();
    java.lang.Character var13 = var12.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ' '+ "'", var13.equals(' '));

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test69");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var8 = var2.withQuote((java.lang.Character)'a');
    boolean var9 = var2.isQuoteCharacterSet();
    boolean var10 = var2.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false", var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test70");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var6.withSkipHeaderRecord();
    boolean var11 = var10.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test71");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    java.util.List var6 = var5.getRecords();
    java.util.Map var7 = var5.getHeaderMap();
    java.util.List var8 = var5.getRecords();
    java.util.Map var9 = var5.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test72");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var15 = var10.withSkipHeaderRecord();
    boolean var16 = var15.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var19 = var15.withEscape('a');
    org.apache.commons.csv.CSVFormat var21 = var15.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var23 = var15.withIgnoreHeaderCase(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test73");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    boolean var9 = var3.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var11 = var3.withQuote('a');
    org.apache.commons.csv.CSVFormat var13 = var3.withNullString("Delimiter=< > Escape=<a> NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test74");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var2.getSkipHeaderRecord();
    java.lang.Character var7 = var2.getEscapeCharacter();
    char var8 = var2.getDelimiter();
    org.apache.commons.csv.CSVFormat var10 = var2.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    java.lang.String[] var17 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var16.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var22 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var23 = var21.withHeaderComments((java.lang.Object[])var22);
    org.apache.commons.csv.CSVFormat var25 = var21.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord();
    java.lang.String var36 = var35.toString();
    org.apache.commons.csv.CSVFormat var38 = var35.withNullString("");
    org.apache.commons.csv.CSVFormat var40 = var35.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var43 = var42.withAllowMissingColumnNames();
    boolean var44 = var42.isNullStringSet();
    java.lang.String[] var46 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var47 = var42.withHeader(var46);
    java.lang.String var48 = var40.format((java.lang.Object[])var46);
    java.lang.String var49 = var31.format((java.lang.Object[])var46);
    org.apache.commons.csv.CSVFormat var50 = var25.withHeader(var46);
    org.apache.commons.csv.CSVFormat var51 = var10.withHeader(var46);
    org.apache.commons.csv.CSVFormat var53 = var51.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var55 = var53.withIgnoreHeaderCase(false);
    boolean var56 = var55.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var36.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test75");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withIgnoreSurroundingSpaces();
    java.lang.Character var4 = var2.getCommentMarker();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("hi!", var2);
    boolean var6 = var5.isClosed();
    java.util.Map var7 = var5.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test76");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var1.withRecordSeparator("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var11 = var10.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var13 = var10.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var15 = var10.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var18 = var17.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = var17.withNullString("");
    org.apache.commons.csv.CSVFormat var21 = var17.withIgnoreEmptyLines();
    java.lang.String var22 = var21.toString();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    boolean var26 = var24.isNullStringSet();
    java.lang.String[] var28 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var29 = var24.withHeader(var28);
    org.apache.commons.csv.CSVFormat var30 = var21.withHeader(var28);
    org.apache.commons.csv.CSVFormat var31 = var10.withHeader(var28);
    java.lang.String var32 = var31.toString();
    java.lang.String[] var33 = var31.getHeader();
    java.lang.String var34 = var8.format((java.lang.Object[])var33);
    org.apache.commons.csv.CSVFormat var35 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var41 = var40.isCommentMarkerSet();
    boolean var42 = var40.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var43 = org.apache.commons.csv.CSVParser.parse("", var40);
    boolean var44 = var40.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var46 = var40.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var48 = var40.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var51 = var50.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var53 = var50.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var55 = var50.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var56 = var55.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var58 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var59 = var58.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var60 = var58.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var62 = var60.withAllowMissingColumnNames(true);
    java.lang.String var63 = var62.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var65 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var66 = var65.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var68 = var65.withNullString("");
    org.apache.commons.csv.CSVFormat var69 = var65.withIgnoreEmptyLines();
    java.lang.String var70 = var69.toString();
    org.apache.commons.csv.CSVFormat var72 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var73 = var72.withAllowMissingColumnNames();
    boolean var74 = var72.isNullStringSet();
    java.lang.String[] var76 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var77 = var72.withHeader(var76);
    org.apache.commons.csv.CSVFormat var78 = var69.withHeader(var76);
    java.lang.String var79 = var62.format((java.lang.Object[])var76);
    org.apache.commons.csv.CSVFormat var80 = var55.withHeaderComments((java.lang.Object[])var76);
    java.lang.String var81 = var48.format((java.lang.Object[])var76);
    java.lang.String var82 = var37.format((java.lang.Object[])var76);
    org.apache.commons.csv.CSVFormat var84 = var37.withAllowMissingColumnNames(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var86 = var84.withQuote(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var22.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var32.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var34.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var70.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + ""+ "'", var79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + ""+ "'", var81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var82.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test77");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    boolean var10 = var8.getIgnoreSurroundingSpaces();
    java.lang.Character var11 = var8.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var13 = var8.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var16 = var15.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var18 = var15.withRecordSeparator("hi!");
    boolean var19 = var18.isCommentMarkerSet();
    java.lang.Character var20 = var18.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var22 = var18.withAllowMissingColumnNames(true);
    boolean var23 = var22.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var26 = var25.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var27 = var25.withSkipHeaderRecord();
    java.lang.String var28 = var27.toString();
    org.apache.commons.csv.CSVFormat var30 = var27.withNullString("");
    org.apache.commons.csv.CSVFormat var32 = var30.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var35 = var34.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var36 = var34.withSkipHeaderRecord();
    boolean var37 = var34.isCommentMarkerSet();
    boolean var38 = var34.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var41 = var40.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var43 = var40.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var45 = var40.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var46 = var45.withIgnoreSurroundingSpaces();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.String var48 = var34.format(var47);
    java.lang.String[] var50 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var51 = var34.withHeader(var50);
    org.apache.commons.csv.CSVFormat var52 = var30.withHeader(var50);
    java.lang.String var53 = var22.format((java.lang.Object[])var50);
    org.apache.commons.csv.CSVFormat var54 = var8.withHeaderComments((java.lang.Object[])var50);
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var28.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var48.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var53.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test78");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var3.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var13 = var3.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var3.withNullString("Delimiter=< > SkipHeaderRecord:true#");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test79");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    java.lang.Character var5 = var1.getCommentMarker();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.Character var8 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var1.withNullString("Delimiter=< > RecordSeparator=<#> EmptyLines:ignored SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test80");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    java.lang.String var7 = var1.getNullString();
    org.apache.commons.csv.QuoteMode var8 = var1.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var1.withCommentMarker('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test81");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    java.lang.Character var21 = var18.getCommentMarker();
    java.lang.Character var22 = var18.getCommentMarker();
    org.apache.commons.csv.CSVFormat var24 = var18.withRecordSeparator("ALL MINIMAL NON_NUMERIC NONEDelimiter=< > SkipHeaderRecord:true");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test82");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var3 = var2.getDelimiter();
    org.apache.commons.csv.CSVFormat var5 = var2.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > CommentStart=<4> RecordSeparator=<Default Excel MySQL RFC4180 TDF> EmptyLines:ignored SkipHeaderRecord:true", var7);
    java.util.Iterator var9 = var8.iterator();
    java.util.List var10 = var8.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test83");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord();
    boolean var17 = var14.isCommentMarkerSet();
    boolean var18 = var14.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var21 = var20.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var23 = var20.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var25 = var20.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var26 = var25.withIgnoreSurroundingSpaces();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.String var28 = var14.format(var27);
    java.lang.String[] var30 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var31 = var14.withHeader(var30);
    org.apache.commons.csv.CSVFormat var32 = var10.withHeader(var30);
    org.apache.commons.csv.CSVFormat var33 = var10.withSkipHeaderRecord();
    boolean var34 = var33.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var28.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test84");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    java.lang.Character var21 = var18.getCommentMarker();
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreEmptyLines();
    java.lang.String[] var23 = var18.getHeader();
    org.apache.commons.csv.CSVFormat var24 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.QuoteMode var25 = var24.getQuoteMode();
    org.apache.commons.csv.CSVFormat var27 = var24.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test85");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var9 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var8.withNullString("");
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreEmptyLines();
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    boolean var17 = var15.isNullStringSet();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var15.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var12.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = var1.withHeader(var19);
    java.lang.String var23 = var22.toString();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var26 = var25.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var28 = var25.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var30 = var25.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var33 = var32.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var35 = var32.withNullString("");
    org.apache.commons.csv.CSVFormat var36 = var32.withIgnoreEmptyLines();
    java.lang.String var37 = var36.toString();
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var40 = var39.withAllowMissingColumnNames();
    boolean var41 = var39.isNullStringSet();
    java.lang.String[] var43 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var44 = var39.withHeader(var43);
    org.apache.commons.csv.CSVFormat var45 = var36.withHeader(var43);
    org.apache.commons.csv.CSVFormat var46 = var25.withHeader(var43);
    java.lang.String var47 = var22.format((java.lang.Object[])var43);
    java.lang.String var48 = var22.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var50 = var22.withNullString("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var13.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var23.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var37.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test86");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withDelimiter('#');
    java.lang.Character var10 = var9.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test87");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var7 = var2.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var8 = var7.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines(false);
    java.lang.String[] var11 = var10.getHeader();
    org.apache.commons.csv.CSVFormat var13 = var10.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var14 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVParser var15 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDF#", var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test88");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    boolean var9 = var7.isNullStringSet();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var7.withHeader(var11);
    org.apache.commons.csv.QuoteMode var13 = var12.getQuoteMode();
    org.apache.commons.csv.CSVFormat var15 = var12.withIgnoreEmptyLines(false);
    java.lang.String var16 = var15.toString();
    java.lang.Character var17 = var15.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var19 = var15.withRecordSeparator('4');
    java.lang.Character var20 = var15.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var22 = var15.withQuote('4');
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var25 = var24.getDelimiter();
    java.lang.String var26 = var24.getNullString();
    boolean var27 = var24.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var28 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var30 = var24.withNullString("");
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var33 = var32.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord();
    boolean var35 = var32.isCommentMarkerSet();
    boolean var36 = var32.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var39 = var38.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var41 = var38.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var43 = var38.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var44 = var43.withIgnoreSurroundingSpaces();
    java.lang.Object[] var45 = new java.lang.Object[] { var43};
    java.lang.String var46 = var32.format(var45);
    java.lang.String[] var48 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var49 = var32.withHeader(var48);
    org.apache.commons.csv.CSVFormat var50 = var24.withHeaderComments((java.lang.Object[])var48);
    org.apache.commons.csv.CSVFormat var51 = var15.withHeader(var48);
    java.lang.String var52 = var1.format((java.lang.Object[])var48);
    boolean var53 = var1.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var16.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var46.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var52.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test89");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withIgnoreSurroundingSpaces(true);
    boolean var5 = var1.isCommentMarkerSet();
    java.lang.Character var6 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var8 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var12 = var8.withCommentMarker('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test90");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isEscapeCharacterSet();
    boolean var3 = var1.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test91");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator("Delimiter=< > SkipHeaderRecord:true");
    boolean var8 = var7.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var7.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var15 = var12.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var18 = var17.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = var17.withNullString("");
    org.apache.commons.csv.CSVFormat var21 = var17.withIgnoreEmptyLines();
    java.lang.String[] var22 = var21.getHeaderComments();
    org.apache.commons.csv.CSVFormat var24 = var21.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var26 = var21.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var27 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var28 = var26.withHeaderComments((java.lang.Object[])var27);
    org.apache.commons.csv.CSVFormat var29 = var12.withHeaderComments((java.lang.Object[])var27);
    org.apache.commons.csv.CSVFormat var30 = var7.withHeaderComments((java.lang.Object[])var27);
    org.apache.commons.csv.CSVFormat var31 = var7.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test92");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator("#");
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var15 = var14.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var17 = var14.withNullString("");
    boolean var18 = var14.isNullStringSet();
    boolean var19 = var14.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var22 = var21.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord();
    boolean var24 = var21.isCommentMarkerSet();
    java.lang.Character var25 = var21.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var26 = var21.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var28 = var21.withIgnoreEmptyLines(true);
    boolean var29 = var14.equals((java.lang.Object)var21);
    boolean var30 = var10.equals((java.lang.Object)var14);
    boolean var31 = var14.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var34 = var33.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var36 = var33.withNullString("");
    org.apache.commons.csv.CSVFormat var37 = var33.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var39 = var37.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var41 = var39.withSkipHeaderRecord(false);
    char var42 = var39.getDelimiter();
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var45 = var44.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var47 = var44.withRecordSeparator("hi!");
    boolean var48 = var47.isCommentMarkerSet();
    java.lang.Character var49 = var47.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var51 = var47.withAllowMissingColumnNames(true);
    boolean var52 = var51.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var55 = var54.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord();
    java.lang.String var57 = var56.toString();
    org.apache.commons.csv.CSVFormat var59 = var56.withNullString("");
    org.apache.commons.csv.CSVFormat var61 = var59.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var63 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var64 = var63.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var65 = var63.withSkipHeaderRecord();
    boolean var66 = var63.isCommentMarkerSet();
    boolean var67 = var63.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var69 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var70 = var69.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var72 = var69.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var74 = var69.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var75 = var74.withIgnoreSurroundingSpaces();
    java.lang.Object[] var76 = new java.lang.Object[] { var74};
    java.lang.String var77 = var63.format(var76);
    java.lang.String[] var79 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var80 = var63.withHeader(var79);
    org.apache.commons.csv.CSVFormat var81 = var59.withHeader(var79);
    java.lang.String var82 = var51.format((java.lang.Object[])var79);
    java.lang.String var83 = var39.format((java.lang.Object[])var79);
    org.apache.commons.csv.CSVFormat var84 = var14.withHeader(var79);
    org.apache.commons.csv.CSVFormat var85 = var8.withHeader(var79);
    boolean var86 = var8.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var88 = var8.withEscape('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var57.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var77.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var82.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var83.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test93");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    boolean var16 = var12.getIgnoreHeaderCase();
    java.lang.String[] var18 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var19 = var12.withHeader(var18);
    org.apache.commons.csv.CSVFormat var20 = var5.withHeaderComments((java.lang.Object[])var18);
    org.apache.commons.csv.CSVFormat var22 = var20.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var24 = var22.withIgnoreHeaderCase(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test94");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    java.lang.String var10 = var9.toString();
    org.apache.commons.csv.CSVFormat var12 = var9.withNullString("");
    org.apache.commons.csv.CSVFormat var14 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    boolean var18 = var16.isNullStringSet();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var16.withHeader(var20);
    java.lang.String var22 = var14.format((java.lang.Object[])var20);
    java.lang.String var23 = var5.format((java.lang.Object[])var20);
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var26 = var25.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var28 = var25.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var25.withIgnoreEmptyLines();
    java.lang.String[] var30 = var29.getHeaderComments();
    org.apache.commons.csv.CSVFormat var32 = var29.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var34 = var29.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var37 = var36.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord();
    boolean var39 = var36.isCommentMarkerSet();
    boolean var40 = var36.getIgnoreHeaderCase();
    java.lang.String[] var42 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var43 = var36.withHeader(var42);
    org.apache.commons.csv.CSVFormat var44 = var29.withHeaderComments((java.lang.Object[])var42);
    java.lang.String var45 = var5.format((java.lang.Object[])var42);
    boolean var46 = var5.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var48 = var5.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var50 = var48.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var51 = var50.withIgnoreEmptyLines();
    boolean var52 = var50.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var45.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test95");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    java.lang.String var5 = var4.toString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("");
    org.apache.commons.csv.CSVFormat var9 = var7.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    boolean var14 = var11.isCommentMarkerSet();
    boolean var15 = var11.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var18 = var17.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = var17.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var22 = var17.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var23 = var22.withIgnoreSurroundingSpaces();
    java.lang.Object[] var24 = new java.lang.Object[] { var22};
    java.lang.String var25 = var11.format(var24);
    java.lang.String[] var27 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var28 = var11.withHeader(var27);
    org.apache.commons.csv.CSVFormat var29 = var7.withHeader(var27);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord();
    boolean var34 = var31.isCommentMarkerSet();
    java.lang.Character var35 = var31.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var36 = var31.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var38 = var36.withQuote((java.lang.Character)'a');
    boolean var39 = var38.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var40 = var38.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var41 = var40.withIgnoreEmptyLines();
    boolean var42 = var29.equals((java.lang.Object)var40);
    org.apache.commons.csv.CSVParser var43 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:false HeaderComments:[] Header:[Delimiter=< > SkipHeaderRecord:true]", var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var25.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test96");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getCurrentLineNumber();
    long var8 = var6.getCurrentLineNumber();
    java.util.List var9 = var6.getRecords();
    long var10 = var6.getCurrentLineNumber();
    long var11 = var6.getRecordNumber();
    boolean var12 = var6.isClosed();
    long var13 = var6.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test97");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var17 = var12.withCommentMarker((java.lang.Character)'a');
    boolean var18 = var10.equals((java.lang.Object)var17);
    org.apache.commons.csv.QuoteMode var19 = var10.getQuoteMode();
    boolean var20 = var10.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var22 = var10.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test98");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withRecordSeparator("hi!");
    boolean var6 = var5.isCommentMarkerSet();
    java.lang.String[] var7 = var5.getHeader();
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false", var5);
    java.util.Map var9 = var8.getHeaderMap();
    long var10 = var8.getRecordNumber();
    java.util.List var11 = var8.getRecords();
    long var12 = var8.getRecordNumber();
    long var13 = var8.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1L);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test99");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var11 = var9.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var13 = var11.withNullString("ALL MINIMAL NON_NUMERIC NONE");
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var16 = var15.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var18 = var15.withRecordSeparator("hi!");
    boolean var19 = var18.isCommentMarkerSet();
    java.lang.Character var20 = var18.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var22 = var18.withAllowMissingColumnNames(true);
    boolean var23 = var22.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var26 = var25.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var28 = var25.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var30 = var25.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var31 = var30.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(true);
    java.lang.String var38 = var37.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var41 = var40.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var43 = var40.withNullString("");
    org.apache.commons.csv.CSVFormat var44 = var40.withIgnoreEmptyLines();
    java.lang.String var45 = var44.toString();
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var48 = var47.withAllowMissingColumnNames();
    boolean var49 = var47.isNullStringSet();
    java.lang.String[] var51 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var52 = var47.withHeader(var51);
    org.apache.commons.csv.CSVFormat var53 = var44.withHeader(var51);
    java.lang.String var54 = var37.format((java.lang.Object[])var51);
    org.apache.commons.csv.CSVFormat var55 = var30.withHeaderComments((java.lang.Object[])var51);
    org.apache.commons.csv.CSVFormat var56 = var22.withHeader(var51);
    org.apache.commons.csv.CSVFormat var57 = var11.withHeader(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var45.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ""+ "'", var54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test100");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    boolean var5 = var2.isCommentMarkerSet();
    java.lang.Character var6 = var2.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var7 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    java.lang.String var12 = var11.toString();
    org.apache.commons.csv.CSVFormat var14 = var11.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var11.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var18 = var11.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var19 = var7.equals((java.lang.Object)var18);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var21 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDF#", var18);
    var21.close();
    var21.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var12.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test101");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreHeaderCase(false);
    boolean var10 = var7.getIgnoreEmptyLines();
    char var11 = var7.getDelimiter();
    boolean var12 = var7.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test102");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=< > SurroundingSpaces:ignored SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test103");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDF", var8);
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var8.withQuote('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test104");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String var6 = var5.toString();
    org.apache.commons.csv.CSVFormat var7 = var5.withIgnoreSurroundingSpaces();
    java.lang.Character var8 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var11 = var10.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreEmptyLines();
    java.lang.String[] var15 = var14.getHeaderComments();
    org.apache.commons.csv.CSVFormat var17 = var14.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var19 = var14.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var20 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var21 = var19.withHeaderComments((java.lang.Object[])var20);
    java.lang.String var22 = var5.format((java.lang.Object[])var20);
    org.apache.commons.csv.CSVFormat var24 = var5.withQuote((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var6.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var22.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test105");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    org.apache.commons.csv.CSVFormat var4 = var1.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote('4');
    java.lang.Character var9 = var4.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test106");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var11 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var12 = var10.withHeaderComments((java.lang.Object[])var11);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var16 = var10.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var18 = var10.withIgnoreSurroundingSpaces(false);
    boolean var19 = var18.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test107");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = var10.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker('4');
    java.lang.Character var16 = var15.getCommentMarker();
    java.lang.String var17 = var15.toString();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var20 = var19.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord();
    java.lang.String var22 = var21.toString();
    org.apache.commons.csv.CSVFormat var24 = var21.withNullString("");
    org.apache.commons.csv.CSVFormat var26 = var21.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var27 = var26.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var28 = var26.withIgnoreSurroundingSpaces();
    java.lang.Character var29 = var28.getQuoteCharacter();
    boolean var30 = var15.equals((java.lang.Object)var28);
    boolean var31 = var28.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + '4'+ "'", var16.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Delimiter=< > QuoteChar=<#> CommentStart=<4> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var17.equals("Delimiter=< > QuoteChar=<#> CommentStart=<4> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var22.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test108");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var6.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces(false);
    boolean var11 = var6.getIgnoreHeaderCase();
    java.lang.String[] var12 = var6.getHeader();
    java.lang.Character var13 = var6.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test109");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    char var10 = var7.getDelimiter();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withRecordSeparator("hi!");
    boolean var16 = var15.isCommentMarkerSet();
    java.lang.Character var17 = var15.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var19 = var15.withAllowMissingColumnNames(true);
    boolean var20 = var19.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    java.lang.String var25 = var24.toString();
    org.apache.commons.csv.CSVFormat var27 = var24.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var27.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord();
    boolean var34 = var31.isCommentMarkerSet();
    boolean var35 = var31.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var38 = var37.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var40 = var37.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var42 = var37.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var43 = var42.withIgnoreSurroundingSpaces();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.String var45 = var31.format(var44);
    java.lang.String[] var47 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var48 = var31.withHeader(var47);
    org.apache.commons.csv.CSVFormat var49 = var27.withHeader(var47);
    java.lang.String var50 = var19.format((java.lang.Object[])var47);
    java.lang.String var51 = var7.format((java.lang.Object[])var47);
    org.apache.commons.csv.CSVFormat var53 = var7.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var54 = var7.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var56 = var7.withNullString("Delimiter=< > SkipHeaderRecord:true#");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var25.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var45.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var50.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var51.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test110");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote((java.lang.Character)'a');
    java.lang.Character var9 = var8.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var11 = var8.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var8.withEscape((java.lang.Character)'4');
    java.lang.Character var14 = var8.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 'a'+ "'", var9.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test111");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var11 = var9.withEscape((java.lang.Character)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test112");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.getAllowMissingColumnNames();
    boolean var7 = var3.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var9 = var3.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test113");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var2.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var7 = var2.withRecordSeparator('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test114");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    java.lang.String var5 = var4.toString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("");
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var15 = var13.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var17 = var15.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var19 = var15.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var21 = var15.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVParser var22 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SurroundingSpaces:ignored SkipHeaderRecord:true", var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test115");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    char var6 = var1.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == ' ');

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test116");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var9 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var8.withNullString("");
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreEmptyLines();
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    boolean var17 = var15.isNullStringSet();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var15.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var12.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = var1.withHeader(var19);
    java.lang.String var23 = var22.toString();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var26 = var25.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var28 = var25.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var30 = var25.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var33 = var32.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var35 = var32.withNullString("");
    org.apache.commons.csv.CSVFormat var36 = var32.withIgnoreEmptyLines();
    java.lang.String var37 = var36.toString();
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var40 = var39.withAllowMissingColumnNames();
    boolean var41 = var39.isNullStringSet();
    java.lang.String[] var43 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var44 = var39.withHeader(var43);
    org.apache.commons.csv.CSVFormat var45 = var36.withHeader(var43);
    org.apache.commons.csv.CSVFormat var46 = var25.withHeader(var43);
    java.lang.String var47 = var22.format((java.lang.Object[])var43);
    org.apache.commons.csv.CSVFormat var49 = var22.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var51 = var22.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var13.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var23.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var37.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test117");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String var6 = var5.toString();
    org.apache.commons.csv.CSVFormat var7 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var5.withNullString("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var11 = var5.withEscape((java.lang.Character)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var6.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test118");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var9 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var8.withNullString("");
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreEmptyLines();
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    boolean var17 = var15.isNullStringSet();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var15.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var12.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = var1.withHeader(var19);
    java.lang.String var23 = var22.toString();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var26 = var25.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var28 = var25.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var30 = var25.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var33 = var32.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var35 = var32.withNullString("");
    org.apache.commons.csv.CSVFormat var36 = var32.withIgnoreEmptyLines();
    java.lang.String var37 = var36.toString();
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var40 = var39.withAllowMissingColumnNames();
    boolean var41 = var39.isNullStringSet();
    java.lang.String[] var43 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var44 = var39.withHeader(var43);
    org.apache.commons.csv.CSVFormat var45 = var36.withHeader(var43);
    org.apache.commons.csv.CSVFormat var46 = var25.withHeader(var43);
    java.lang.String var47 = var22.format((java.lang.Object[])var43);
    org.apache.commons.csv.CSVFormat var49 = var22.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var51 = var49.withSkipHeaderRecord(true);
    java.lang.String var52 = var51.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var13.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var23.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var37.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test119");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.Character var4 = var3.getCommentMarker();
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var7 = var6.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    boolean var11 = var8.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var8.withEscape('#');
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord();
    boolean var18 = var15.isCommentMarkerSet();
    boolean var19 = var15.getIgnoreHeaderCase();
    java.lang.String[] var21 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var22 = var15.withHeader(var21);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord();
    boolean var27 = var24.isCommentMarkerSet();
    boolean var28 = var24.getIgnoreHeaderCase();
    java.lang.String[] var30 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var31 = var24.withHeader(var30);
    org.apache.commons.csv.CSVFormat var32 = var15.withHeader(var30);
    org.apache.commons.csv.CSVFormat var34 = var32.withIgnoreSurroundingSpaces(true);
    java.lang.Character var35 = var32.getCommentMarker();
    org.apache.commons.csv.CSVFormat var36 = var32.withIgnoreEmptyLines();
    java.lang.String[] var37 = var32.getHeader();
    java.lang.String var38 = var8.format((java.lang.Object[])var37);
    org.apache.commons.csv.CSVFormat var39 = var3.withHeader(var37);
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var42 = var41.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var44 = var41.withNullString("");
    org.apache.commons.csv.CSVFormat var45 = var41.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var47 = var45.withDelimiter('4');
    boolean var48 = var47.getAllowMissingColumnNames();
    java.lang.String var49 = var47.getRecordSeparator();
    boolean var50 = var47.getAllowMissingColumnNames();
    java.lang.Character var51 = var47.getCommentMarker();
    org.apache.commons.csv.CSVFormat var53 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var54 = var53.withAllowMissingColumnNames();
    boolean var55 = var53.isNullStringSet();
    java.lang.String[] var57 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var58 = var53.withHeader(var57);
    org.apache.commons.csv.QuoteMode var59 = var58.getQuoteMode();
    org.apache.commons.csv.CSVFormat var61 = var58.withIgnoreEmptyLines(false);
    java.lang.String var62 = var61.toString();
    java.lang.Character var63 = var61.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var65 = var61.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var68 = var67.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var70 = var67.withCommentMarker('#');
    java.lang.String[] var71 = var67.getHeaderComments();
    org.apache.commons.csv.CSVFormat var73 = var67.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var75 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var76 = var75.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var77 = var75.withSkipHeaderRecord();
    boolean var78 = var75.isCommentMarkerSet();
    boolean var79 = var75.getIgnoreHeaderCase();
    java.lang.String[] var81 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var82 = var75.withHeader(var81);
    org.apache.commons.csv.CSVFormat var83 = var67.withHeader(var81);
    org.apache.commons.csv.CSVFormat var84 = var61.withHeader(var81);
    org.apache.commons.csv.CSVFormat var85 = var47.withHeaderComments((java.lang.Object[])var81);
    org.apache.commons.csv.CSVFormat var86 = var39.withHeaderComments((java.lang.Object[])var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var38.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var62.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test120");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.String[] var3 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator('4');
    boolean var6 = var5.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var7 = var5.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test121");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = var10.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var18 = var6.equals((java.lang.Object)var17);
    org.apache.commons.csv.CSVFormat var20 = var17.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:false");
    java.lang.Character var21 = var17.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test122");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var10 = var6.withAllowMissingColumnNames();
    java.lang.String[] var11 = var6.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test123");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var8 = var1.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var10 = var1.withNullString("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test124");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker((java.lang.Character)'a');
    java.lang.String[] var11 = var10.getHeader();
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test125");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var10 = var1.withDelimiter(' ');
    java.lang.String var11 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = var13.withRecordSeparator("hi!");
    boolean var17 = var16.isCommentMarkerSet();
    boolean var18 = var16.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var21 = var20.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var23 = var20.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var25 = var20.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var28 = var27.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var30 = var27.withNullString("");
    org.apache.commons.csv.CSVFormat var31 = var27.withIgnoreEmptyLines();
    java.lang.String var32 = var31.toString();
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var35 = var34.withAllowMissingColumnNames();
    boolean var36 = var34.isNullStringSet();
    java.lang.String[] var38 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var39 = var34.withHeader(var38);
    org.apache.commons.csv.CSVFormat var40 = var31.withHeader(var38);
    org.apache.commons.csv.CSVFormat var41 = var20.withHeader(var38);
    org.apache.commons.csv.CSVFormat var42 = var16.withHeaderComments((java.lang.Object[])var38);
    org.apache.commons.csv.CSVFormat var43 = var1.withHeaderComments((java.lang.Object[])var38);
    org.apache.commons.csv.CSVFormat var45 = var1.withIgnoreEmptyLines(false);
    java.lang.Character var46 = var1.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var32.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test126");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var16 = var14.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var19 = var18.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = var18.withNullString("");
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var24 = var22.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord(false);
    char var27 = var24.getDelimiter();
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var30 = var29.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var32 = var29.withRecordSeparator("hi!");
    boolean var33 = var32.isCommentMarkerSet();
    java.lang.Character var34 = var32.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var36 = var32.withAllowMissingColumnNames(true);
    boolean var37 = var36.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var40 = var39.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var41 = var39.withSkipHeaderRecord();
    java.lang.String var42 = var41.toString();
    org.apache.commons.csv.CSVFormat var44 = var41.withNullString("");
    org.apache.commons.csv.CSVFormat var46 = var44.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var49 = var48.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var50 = var48.withSkipHeaderRecord();
    boolean var51 = var48.isCommentMarkerSet();
    boolean var52 = var48.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var55 = var54.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var57 = var54.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var59 = var54.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var60 = var59.withIgnoreSurroundingSpaces();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.String var62 = var48.format(var61);
    java.lang.String[] var64 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var65 = var48.withHeader(var64);
    org.apache.commons.csv.CSVFormat var66 = var44.withHeader(var64);
    java.lang.String var67 = var36.format((java.lang.Object[])var64);
    java.lang.String var68 = var24.format((java.lang.Object[])var64);
    org.apache.commons.csv.CSVFormat var69 = var16.withHeader(var64);
    org.apache.commons.csv.CSVFormat var71 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var72 = var71.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var73 = var71.withSkipHeaderRecord();
    boolean var74 = var71.isCommentMarkerSet();
    boolean var75 = var71.getIgnoreHeaderCase();
    java.lang.String[] var77 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var78 = var71.withHeader(var77);
    org.apache.commons.csv.CSVFormat var80 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var81 = var80.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var82 = var80.withSkipHeaderRecord();
    boolean var83 = var80.isCommentMarkerSet();
    boolean var84 = var80.getIgnoreHeaderCase();
    java.lang.String[] var86 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var87 = var80.withHeader(var86);
    org.apache.commons.csv.CSVFormat var88 = var71.withHeader(var86);
    org.apache.commons.csv.CSVFormat var90 = var88.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var92 = var88.withEscape('a');
    org.apache.commons.csv.CSVFormat var93 = var92.withIgnoreSurroundingSpaces();
    boolean var94 = var16.equals((java.lang.Object)var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var42.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var62.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var67.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var68.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test127");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDF", var8);
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var10.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("Delimiter=< > SkipHeaderRecord:truehi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test128");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var12 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var12.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var22 = var20.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord();
    java.lang.String var27 = var26.toString();
    org.apache.commons.csv.CSVFormat var29 = var26.withNullString("");
    org.apache.commons.csv.CSVFormat var31 = var26.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    boolean var35 = var33.isNullStringSet();
    java.lang.String[] var37 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var38 = var33.withHeader(var37);
    java.lang.String var39 = var31.format((java.lang.Object[])var37);
    java.lang.String var40 = var22.format((java.lang.Object[])var37);
    java.lang.String var41 = var16.format((java.lang.Object[])var37);
    org.apache.commons.csv.CSVFormat var42 = var5.withHeader(var37);
    boolean var43 = var42.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var27.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "#"+ "'", var41.equals("#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test129");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    boolean var11 = var8.isCommentMarkerSet();
    boolean var12 = var8.getIgnoreHeaderCase();
    java.lang.String[] var14 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var15 = var8.withHeader(var14);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    boolean var20 = var17.isCommentMarkerSet();
    boolean var21 = var17.getIgnoreHeaderCase();
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var17.withHeader(var23);
    org.apache.commons.csv.CSVFormat var25 = var8.withHeader(var23);
    java.lang.String var26 = var6.format((java.lang.Object[])var23);
    org.apache.commons.csv.CSVFormat var28 = var6.withQuote('4');
    org.apache.commons.csv.CSVFormat var29 = var28.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var26.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test130");


    org.apache.commons.csv.CSVFormat var3 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var4 = var3.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var7 = var3.withIgnoreEmptyLines();
    java.lang.String[] var8 = var7.getHeaderComments();
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = var7.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var14 = var12.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVParser var16 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true", var14);
    org.apache.commons.csv.CSVParser var17 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL 4RFC441804 TDF", var14);
    java.util.List var18 = var17.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test131");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var8.withCommentMarker((java.lang.Character)'4');
    java.lang.Character var12 = var8.getCommentMarker();
    boolean var13 = var8.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test132");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    java.lang.String var5 = var1.getRecordSeparator();
    java.lang.String var6 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var10 = var1.withRecordSeparator('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test133");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    boolean var11 = var8.isCommentMarkerSet();
    boolean var12 = var8.getIgnoreHeaderCase();
    java.lang.String[] var14 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var15 = var8.withHeader(var14);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    boolean var20 = var17.isCommentMarkerSet();
    boolean var21 = var17.getIgnoreHeaderCase();
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var17.withHeader(var23);
    org.apache.commons.csv.CSVFormat var25 = var8.withHeader(var23);
    java.lang.String var26 = var6.format((java.lang.Object[])var23);
    org.apache.commons.csv.CSVFormat var28 = var6.withQuote('4');
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var31 = var30.getDelimiter();
    java.lang.String var32 = var30.getNullString();
    boolean var33 = var30.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var34 = var30.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var37 = var36.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var39 = var36.withNullString("");
    org.apache.commons.csv.CSVFormat var40 = var36.withIgnoreEmptyLines();
    java.lang.String[] var41 = var40.getHeaderComments();
    org.apache.commons.csv.CSVFormat var43 = var40.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var45 = var40.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var47 = var45.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var50 = var49.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var51 = var49.withSkipHeaderRecord();
    boolean var52 = var49.isCommentMarkerSet();
    boolean var53 = var49.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var55 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var56 = var55.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var58 = var55.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var60 = var55.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var61 = var60.withIgnoreSurroundingSpaces();
    java.lang.Object[] var62 = new java.lang.Object[] { var60};
    java.lang.String var63 = var49.format(var62);
    java.lang.String[] var65 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var66 = var49.withHeader(var65);
    org.apache.commons.csv.CSVFormat var67 = var45.withHeader(var65);
    org.apache.commons.csv.CSVFormat var68 = var45.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var70 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var71 = var70.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var72 = var70.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var74 = var72.withIgnoreSurroundingSpaces(true);
    boolean var75 = var74.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var77 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var78 = var77.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var79 = var77.withSkipHeaderRecord();
    java.lang.String var80 = var79.toString();
    org.apache.commons.csv.CSVFormat var82 = var79.withNullString("");
    org.apache.commons.csv.CSVFormat var84 = var79.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var86 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var87 = var86.withAllowMissingColumnNames();
    boolean var88 = var86.isNullStringSet();
    java.lang.String[] var90 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var91 = var86.withHeader(var90);
    java.lang.String var92 = var84.format((java.lang.Object[])var90);
    org.apache.commons.csv.CSVFormat var93 = var74.withHeader(var90);
    org.apache.commons.csv.CSVFormat var94 = var45.withHeaderComments((java.lang.Object[])var90);
    org.apache.commons.csv.CSVFormat var95 = var34.withHeader(var90);
    java.lang.String var96 = var28.format((java.lang.Object[])var90);
    org.apache.commons.csv.CSVFormat var98 = var28.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var26.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var63.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var80.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + ""+ "'", var92.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "4444"+ "'", var96.equals("4444"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test134");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withRecordSeparator("#");
    org.apache.commons.csv.CSVFormat var5 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var5.withNullString("");
    boolean var9 = var5.isNullStringSet();
    boolean var10 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    java.lang.Character var16 = var12.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var17 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var12.withIgnoreEmptyLines(true);
    boolean var20 = var5.equals((java.lang.Object)var12);
    boolean var21 = var1.equals((java.lang.Object)var5);
    java.lang.Character var22 = var5.getQuoteCharacter();
    boolean var23 = var5.isNullStringSet();
    java.lang.String var24 = var5.getRecordSeparator();
    boolean var25 = var5.getIgnoreEmptyLines();
    java.lang.Character var26 = var5.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test135");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var14 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var13.withSkipHeaderRecord(true);
    boolean var17 = var10.equals((java.lang.Object)true);
    org.apache.commons.csv.CSVFormat var19 = var10.withEscape((java.lang.Character)'a');
    java.lang.String var20 = var19.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=< > Escape=<a> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var20.equals("Delimiter=< > Escape=<a> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false"));

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test136");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    java.util.Map var9 = var6.getHeaderMap();
    long var10 = var6.getRecordNumber();
    boolean var11 = var6.isClosed();
    boolean var12 = var6.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test137");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withRecordSeparator("ALL MINIMAL NON_NUMERIC NONE");
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = var10.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreHeaderCase(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test138");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var11 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var12 = var10.withHeaderComments((java.lang.Object[])var11);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    java.lang.String var25 = var24.toString();
    org.apache.commons.csv.CSVFormat var27 = var24.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var24.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    boolean var33 = var31.isNullStringSet();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var31.withHeader(var35);
    java.lang.String var37 = var29.format((java.lang.Object[])var35);
    java.lang.String var38 = var20.format((java.lang.Object[])var35);
    org.apache.commons.csv.CSVFormat var39 = var14.withHeader(var35);
    org.apache.commons.csv.CSVFormat var41 = var39.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var43 = var39.withRecordSeparator("Delimiter=< > SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var44 = var39.withIgnoreEmptyLines();
    boolean var45 = var44.isNullStringSet();
    org.apache.commons.csv.CSVFormat var47 = var44.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var25.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test139");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var7 = var6.isCommentMarkerSet();
    java.lang.Character var8 = var6.getQuoteCharacter();
    char var9 = var6.getDelimiter();
    java.lang.Character var10 = var6.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    java.lang.String[] var17 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var16.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var22 = var21.getQuoteMode();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var28 = var26.withAllowMissingColumnNames(true);
    java.lang.String var29 = var28.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var32 = var31.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var34 = var31.withNullString("");
    org.apache.commons.csv.CSVFormat var35 = var31.withIgnoreEmptyLines();
    java.lang.String var36 = var35.toString();
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var39 = var38.withAllowMissingColumnNames();
    boolean var40 = var38.isNullStringSet();
    java.lang.String[] var42 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var43 = var38.withHeader(var42);
    org.apache.commons.csv.CSVFormat var44 = var35.withHeader(var42);
    java.lang.String var45 = var28.format((java.lang.Object[])var42);
    org.apache.commons.csv.CSVFormat var46 = var21.withHeader(var42);
    boolean var47 = var46.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var50 = var49.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var51 = var49.withSkipHeaderRecord();
    java.lang.String var52 = var51.toString();
    java.lang.String[] var53 = var51.getHeader();
    org.apache.commons.csv.CSVFormat var54 = var51.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var57 = var56.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord();
    java.lang.String var59 = var58.toString();
    org.apache.commons.csv.CSVFormat var61 = var58.withNullString("");
    org.apache.commons.csv.CSVFormat var63 = var61.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var65 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var66 = var65.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var67 = var65.withSkipHeaderRecord();
    boolean var68 = var65.isCommentMarkerSet();
    boolean var69 = var65.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var71 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var72 = var71.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var74 = var71.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var76 = var71.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var77 = var76.withIgnoreSurroundingSpaces();
    java.lang.Object[] var78 = new java.lang.Object[] { var76};
    java.lang.String var79 = var65.format(var78);
    java.lang.String[] var81 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var82 = var65.withHeader(var81);
    org.apache.commons.csv.CSVFormat var83 = var61.withHeader(var81);
    java.lang.String var84 = var54.format((java.lang.Object[])var81);
    java.lang.String var85 = var46.format((java.lang.Object[])var81);
    java.lang.String var86 = var6.format((java.lang.Object[])var81);
    org.apache.commons.csv.CSVFormat var87 = var3.withHeader(var81);
    org.apache.commons.csv.CSVFormat var89 = var87.withRecordSeparator("Delimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var36.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var52.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var59.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var79.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var84.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "4Default Excel MySQL RFC4180 TDF4"+ "'", var85.equals("4Default Excel MySQL RFC4180 TDF4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var86.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test140");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    boolean var9 = var6.isClosed();
    java.util.Map var10 = var6.getHeaderMap();
    long var11 = var6.getRecordNumber();
    java.util.Map var12 = var6.getHeaderMap();
    long var13 = var6.getCurrentLineNumber();
    java.util.Map var14 = var6.getHeaderMap();
    var6.close();
    java.util.Iterator var16 = var6.iterator();
    long var17 = var6.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0L);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test141");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('4');
    java.lang.String[] var8 = var5.getHeaderComments();
    char var9 = var5.getDelimiter();
    boolean var10 = var5.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test142");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    boolean var5 = var4.getAllowMissingColumnNames();
    java.lang.Character var6 = var4.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var8 = var4.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test143");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = var10.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var18 = var6.equals((java.lang.Object)var17);
    org.apache.commons.csv.CSVFormat var19 = var17.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = var17.withNullString("Delimiter=< > SkipHeaderRecord:trueDelimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var23 = var21.withIgnoreHeaderCase(false);
    org.apache.commons.csv.QuoteMode var24 = var23.getQuoteMode();
    boolean var25 = var23.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var27 = var23.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var29 = var27.withRecordSeparator("Delimiter=< > Escape=<4> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var31 = var29.withQuote((java.lang.Character)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test144");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var15 = var10.withSkipHeaderRecord();
    boolean var16 = var15.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = var18.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var23 = var21.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var26 = var25.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var28 = var25.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var30 = var25.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var32 = var30.withQuote('#');
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var35 = var34.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var37 = var34.withRecordSeparator("hi!");
    boolean var38 = var37.isCommentMarkerSet();
    java.lang.String[] var39 = var37.getHeader();
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var42 = var41.withIgnoreSurroundingSpaces();
    java.lang.Character var43 = var41.getCommentMarker();
    java.lang.String var44 = var41.getNullString();
    org.apache.commons.csv.CSVFormat var45 = var41.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var48 = var47.withAllowMissingColumnNames();
    boolean var49 = var47.isNullStringSet();
    java.lang.String[] var51 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var52 = var47.withHeader(var51);
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var55 = var54.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord();
    boolean var57 = var54.isCommentMarkerSet();
    boolean var58 = var54.getIgnoreHeaderCase();
    java.lang.String[] var60 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var61 = var54.withHeader(var60);
    org.apache.commons.csv.CSVFormat var63 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var64 = var63.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var65 = var63.withSkipHeaderRecord();
    boolean var66 = var63.isCommentMarkerSet();
    boolean var67 = var63.getIgnoreHeaderCase();
    java.lang.String[] var69 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var70 = var63.withHeader(var69);
    org.apache.commons.csv.CSVFormat var71 = var54.withHeader(var69);
    java.lang.String var72 = var52.format((java.lang.Object[])var69);
    org.apache.commons.csv.CSVFormat var73 = var45.withHeader(var69);
    java.lang.String var74 = var37.format((java.lang.Object[])var69);
    org.apache.commons.csv.CSVFormat var75 = var32.withHeader(var69);
    org.apache.commons.csv.CSVFormat var76 = var21.withHeaderComments((java.lang.Object[])var69);
    java.lang.String var77 = var15.format((java.lang.Object[])var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var72.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "Delimiter=< > SkipHeaderRecord:truehi!"+ "'", var74.equals("Delimiter=< > SkipHeaderRecord:truehi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "Delimiter=< > SkipHeaderRecord:true4"+ "'", var77.equals("Delimiter=< > SkipHeaderRecord:true4"));

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test145");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var8 = var7.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var7.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var12 = var7.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.String var15 = var1.format(var14);
    java.lang.String var16 = var1.getNullString();
    boolean var17 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var19 = var1.withQuote('a');
    org.apache.commons.csv.CSVFormat var20 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var22 = var1.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var15.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test146");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreEmptyLines(true);
    char var10 = var7.getDelimiter();
    org.apache.commons.csv.CSVFormat var12 = var7.withSkipHeaderRecord(true);
    java.lang.String[] var13 = var7.getHeader();
    org.apache.commons.csv.CSVFormat var15 = var7.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var16 = var15.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test147");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator("Delimiter=< > QuoteChar=<a> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var10.withDelimiter('#');
    boolean var13 = var10.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test148");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var7 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var8 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var12 = var8.withRecordSeparator("Delimiter=< > NullString=<> SkipHeaderRecord:false");
    boolean var13 = var8.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test149");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    java.lang.Character var4 = var2.getQuoteCharacter();
    char var5 = var2.getDelimiter();
    java.lang.Character var6 = var2.getEscapeCharacter();
    org.apache.commons.csv.CSVParser var7 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false> SkipHeaderRecord:true", var2);
    boolean var8 = var2.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test150");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    boolean var9 = var5.equals((java.lang.Object)10.0f);
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote((java.lang.Character)'#');
    java.lang.Character var12 = var11.getEscapeCharacter();
    boolean var13 = var11.isEscapeCharacterSet();
    java.lang.String var14 = var11.getNullString();
    org.apache.commons.csv.CSVFormat var16 = var11.withIgnoreHeaderCase(false);
    boolean var17 = var11.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test151");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var16 = var14.withIgnoreEmptyLines(true);
    boolean var17 = var16.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test152");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var2.getSkipHeaderRecord();
    java.lang.Character var7 = var2.getEscapeCharacter();
    char var8 = var2.getDelimiter();
    org.apache.commons.csv.CSVFormat var10 = var2.withCommentMarker((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test153");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var17 = var16.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var19 = var16.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var21 = var16.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var22 = var21.withIgnoreSurroundingSpaces();
    java.lang.Object[] var23 = new java.lang.Object[] { var21};
    java.lang.String var24 = var10.format(var23);
    java.lang.String[] var26 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var27 = var10.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var6.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var28.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var31 = var28.withIgnoreHeaderCase(false);
    char var32 = var31.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var24.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == ' ');

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test154");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var7 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var17 = var16.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var19 = var16.withNullString("");
    org.apache.commons.csv.CSVFormat var20 = var16.withIgnoreEmptyLines();
    java.lang.String var21 = var20.toString();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    boolean var25 = var23.isNullStringSet();
    java.lang.String[] var27 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var28 = var23.withHeader(var27);
    org.apache.commons.csv.CSVFormat var29 = var20.withHeader(var27);
    java.lang.String var30 = var13.format((java.lang.Object[])var27);
    org.apache.commons.csv.CSVFormat var31 = var6.withHeaderComments((java.lang.Object[])var27);
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(false);
    java.lang.String var34 = var31.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var21.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test155");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    boolean var9 = var3.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var11 = var3.withQuote('a');
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var15 = var14.isCommentMarkerSet();
    boolean var16 = var14.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var17 = org.apache.commons.csv.CSVParser.parse("", var14);
    boolean var18 = var14.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var14.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var22 = var14.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var25 = var24.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var27 = var24.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var29 = var24.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var30 = var29.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var33 = var32.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = var34.withAllowMissingColumnNames(true);
    java.lang.String var37 = var36.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var40 = var39.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var42 = var39.withNullString("");
    org.apache.commons.csv.CSVFormat var43 = var39.withIgnoreEmptyLines();
    java.lang.String var44 = var43.toString();
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    boolean var48 = var46.isNullStringSet();
    java.lang.String[] var50 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var51 = var46.withHeader(var50);
    org.apache.commons.csv.CSVFormat var52 = var43.withHeader(var50);
    java.lang.String var53 = var36.format((java.lang.Object[])var50);
    org.apache.commons.csv.CSVFormat var54 = var29.withHeaderComments((java.lang.Object[])var50);
    java.lang.String var55 = var22.format((java.lang.Object[])var50);
    org.apache.commons.csv.CSVFormat var56 = var11.withHeader(var50);
    java.lang.String var57 = var11.getNullString();
    org.apache.commons.csv.CSVFormat var59 = var11.withIgnoreEmptyLines(true);
    boolean var60 = var11.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var44.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test156");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var7 = var2.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote('#');
    boolean var10 = var9.getIgnoreSurroundingSpaces();
    java.lang.Character var11 = var9.getCommentMarker();
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse(" ", var9);
    org.apache.commons.csv.CSVFormat var14 = var9.withEscape('4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var16 = var14.withQuote((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test157");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    org.apache.commons.csv.CSVFormat var4 = var1.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote('4');
    java.lang.String[] var9 = var8.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test158");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var3.withEscape('#');
    java.lang.String var9 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var9.equals("Delimiter=< > SkipHeaderRecord:true"));

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test159");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    boolean var3 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('a');
    boolean var8 = var7.isNullStringSet();
    org.apache.commons.csv.CSVFormat var10 = var7.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test160");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    java.lang.String var14 = var13.toString();
    java.lang.String[] var15 = var13.getHeader();
    org.apache.commons.csv.CSVFormat var16 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord();
    java.lang.String var21 = var20.toString();
    org.apache.commons.csv.CSVFormat var23 = var20.withNullString("");
    org.apache.commons.csv.CSVFormat var25 = var23.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    boolean var30 = var27.isCommentMarkerSet();
    boolean var31 = var27.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var34 = var33.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var36 = var33.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var38 = var33.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var39 = var38.withIgnoreSurroundingSpaces();
    java.lang.Object[] var40 = new java.lang.Object[] { var38};
    java.lang.String var41 = var27.format(var40);
    java.lang.String[] var43 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var44 = var27.withHeader(var43);
    org.apache.commons.csv.CSVFormat var45 = var23.withHeader(var43);
    java.lang.String var46 = var16.format((java.lang.Object[])var43);
    org.apache.commons.csv.CSVFormat var47 = var9.withHeader(var43);
    java.lang.String var48 = var47.toString();
    org.apache.commons.csv.CSVFormat var50 = var47.withRecordSeparator('4');
    java.lang.Character var51 = var47.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var14.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var21.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var41.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var46.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Delimiter=< > SkipHeaderRecord:true Header:[Default Excel MySQL RFC4180 TDF]"+ "'", var48.equals("Delimiter=< > SkipHeaderRecord:true Header:[Default Excel MySQL RFC4180 TDF]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test161");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote((java.lang.Character)'a');
    boolean var9 = var8.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var11 = var8.withCommentMarker('#');
    java.lang.String var12 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Delimiter=< > QuoteChar=<a> SkipHeaderRecord:true"+ "'", var12.equals("Delimiter=< > QuoteChar=<a> SkipHeaderRecord:true"));

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test162");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreSurroundingSpaces();
    java.lang.Character var3 = var1.getCommentMarker();
    java.lang.String var4 = var1.getNullString();
    org.apache.commons.csv.QuoteMode var5 = var1.getQuoteMode();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test163");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    java.lang.String var14 = var13.toString();
    org.apache.commons.csv.CSVFormat var16 = var13.withNullString("");
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var20 = var18.withQuote('#');
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    boolean var25 = var22.isCommentMarkerSet();
    boolean var26 = var22.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var29 = var28.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var31 = var28.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var33 = var28.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var34 = var33.withIgnoreSurroundingSpaces();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.String var36 = var22.format(var35);
    java.lang.String var37 = var18.format(var35);
    org.apache.commons.csv.CSVFormat var38 = var9.withHeaderComments(var35);
    org.apache.commons.csv.CSVFormat var40 = var9.withDelimiter('#');
    boolean var41 = var40.isNullStringSet();
    boolean var42 = var40.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var14.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var36.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var37.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test164");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord();
    boolean var18 = var15.isCommentMarkerSet();
    boolean var19 = var15.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var22 = var21.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var24 = var21.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var26 = var21.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var27 = var26.withIgnoreSurroundingSpaces();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.String var29 = var15.format(var28);
    java.lang.String[] var31 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var32 = var15.withHeader(var31);
    org.apache.commons.csv.CSVFormat var33 = var11.withHeader(var31);
    org.apache.commons.csv.CSVParser var34 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:false Header:[]", var33);
    boolean var35 = var33.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var37 = var33.withQuote('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var29.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test165");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    boolean var4 = var2.isNullStringSet();
    java.lang.String[] var6 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var7 = var2.withHeader(var6);
    org.apache.commons.csv.QuoteMode var8 = var7.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var11 = var7.withSkipHeaderRecord();
    boolean var12 = var7.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false", var7);
    long var14 = var13.getCurrentLineNumber();
    java.util.List var15 = var13.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test166");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.Character var4 = var3.getCommentMarker();
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord(false);
    java.lang.String[] var7 = var3.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test167");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    boolean var14 = var13.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test168");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var11 = var3.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var12 = var3.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreSurroundingSpaces(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test169");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    boolean var11 = var8.isNullStringSet();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test170");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    java.util.List var6 = var5.getRecords();
    java.util.List var7 = var5.getRecords();
    long var8 = var5.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test171");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var8 = var7.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var7.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var12 = var7.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.String var15 = var1.format(var14);
    java.lang.String var16 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var18 = var1.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var22 = var18.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var15.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test172");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape((java.lang.Character)'4');
    boolean var8 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var10 = var1.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test173");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var6.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = var6.withNullString("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var12.withCommentMarker('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test174");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.QuoteMode var21 = var18.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test175");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var8 = var7.withSkipHeaderRecord();
    java.lang.String[] var9 = var8.getHeaderComments();
    org.apache.commons.csv.CSVFormat var11 = var8.withQuote('4');
    boolean var12 = var8.getIgnoreHeaderCase();
    boolean var13 = var8.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test176");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var6.withRecordSeparator('4');
    boolean var9 = var8.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var8.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var8.withEscape('4');
    org.apache.commons.csv.CSVFormat var16 = var14.withCommentMarker((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test177");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var7 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(false);
    java.lang.String[] var10 = var9.getHeader();
    org.apache.commons.csv.CSVFormat var12 = var9.withNullString("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var14 = var9.withSkipHeaderRecord(true);
    char var15 = var14.getDelimiter();
    java.lang.String var16 = var14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:true"+ "'", var16.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:true"));

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test178");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var5.withSkipHeaderRecord();
    boolean var7 = var6.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var9 = var6.withDelimiter(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test179");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote((java.lang.Character)'a');
    java.lang.Character var9 = var6.getEscapeCharacter();
    boolean var10 = var6.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test180");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.getRecordSeparator();
    java.lang.String var5 = var3.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test181");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'a');
    boolean var7 = var1.isNullStringSet();
    java.lang.String var8 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var1.withDelimiter('4');
    boolean var11 = var10.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test182");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=< > QuoteChar=<#> CommentStart=<4> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test183");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withAllowMissingColumnNames(true);
    boolean var7 = var4.isNullStringSet();
    java.lang.Character var8 = var4.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var4.withAllowMissingColumnNames();
    boolean var10 = var4.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var12 = var4.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[Default, Excel, MySQL, RFC4180, TDF]", var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test184");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    java.lang.String var7 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var9 = var1.withCommentMarker('#');
    boolean var10 = var1.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test185");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.CSVFormat var8 = var1.withQuote('#');
    boolean var9 = var1.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test186");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withQuote((java.lang.Character)'#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var6 = var1.withQuote(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test187");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getCurrentLineNumber();
    long var8 = var6.getCurrentLineNumber();
    java.util.Map var9 = var6.getHeaderMap();
    long var10 = var6.getRecordNumber();
    java.util.Map var11 = var6.getHeaderMap();
    long var12 = var6.getRecordNumber();
    java.util.Iterator var13 = var6.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test188");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var7 = var2.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var7.withIgnoreSurroundingSpaces();
    boolean var9 = var8.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("hi!", var8);
    org.apache.commons.csv.CSVFormat var12 = var8.withEscape('4');
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreEmptyLines(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test189");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = var13.withNullString("");
    org.apache.commons.csv.CSVFormat var17 = var13.withIgnoreEmptyLines();
    java.lang.String[] var18 = var17.getHeaderComments();
    org.apache.commons.csv.CSVFormat var20 = var17.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var22 = var17.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var24 = var22.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var27 = var26.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var28 = var26.withSkipHeaderRecord();
    boolean var29 = var26.isCommentMarkerSet();
    boolean var30 = var26.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var33 = var32.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var35 = var32.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var37 = var32.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var38 = var37.withIgnoreSurroundingSpaces();
    java.lang.Object[] var39 = new java.lang.Object[] { var37};
    java.lang.String var40 = var26.format(var39);
    java.lang.String[] var42 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var43 = var26.withHeader(var42);
    org.apache.commons.csv.CSVFormat var44 = var22.withHeader(var42);
    org.apache.commons.csv.CSVParser var45 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:false Header:[]", var44);
    org.apache.commons.csv.CSVFormat var46 = var44.withIgnoreSurroundingSpaces();
    java.lang.String[] var47 = var46.getHeader();
    org.apache.commons.csv.CSVFormat var48 = var10.withHeader(var47);
    boolean var49 = var10.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var40.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test190");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = var10.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var15 = var10.withQuote('a');
    boolean var16 = var15.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test191");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    boolean var5 = var2.isCommentMarkerSet();
    java.lang.Character var6 = var2.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var7 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var11 = var9.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > RecordSeparator=<4> SkipHeaderRecord:false", var11);
    org.apache.commons.csv.CSVFormat var14 = var11.withIgnoreSurroundingSpaces(false);
    boolean var15 = var11.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test192");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getRecordNumber();
    java.util.List var8 = var6.getRecords();
    java.util.Map var9 = var6.getHeaderMap();
    var6.close();
    java.util.Iterator var11 = var6.iterator();
    java.util.Iterator var12 = var6.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test193");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String var6 = var5.toString();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    boolean var10 = var8.isNullStringSet();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var8.withHeader(var12);
    org.apache.commons.csv.CSVFormat var14 = var5.withHeader(var12);
    org.apache.commons.csv.CSVFormat var16 = var5.withIgnoreEmptyLines(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var6.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test194");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    boolean var9 = var8.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test195");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var3.withEscape('#');
    org.apache.commons.csv.CSVFormat var10 = var3.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('a');
    boolean var13 = var10.getIgnoreEmptyLines();
    boolean var14 = var10.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test196");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("DefaultaExcelaMySQLaRFC4180aTDF", var4);
    java.util.Iterator var10 = var9.iterator();
    boolean var11 = var9.isClosed();
    java.util.Map var12 = var9.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test197");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    java.lang.Character var8 = var5.getEscapeCharacter();
    boolean var9 = var5.getSkipHeaderRecord();
    boolean var10 = var5.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test198");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withSkipHeaderRecord(false);
    boolean var9 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var11 = var1.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test199");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("DefaultaExcelaMySQLaRFC4180aTDF", var4);
    java.util.Iterator var10 = var9.iterator();
    java.util.Iterator var11 = var9.iterator();
    java.util.List var12 = var9.getRecords();
    long var13 = var9.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test200");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withIgnoreSurroundingSpaces();
    java.lang.Character var13 = var11.getCommentMarker();
    java.lang.String var14 = var11.getNullString();
    org.apache.commons.csv.CSVFormat var15 = var11.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    boolean var19 = var17.isNullStringSet();
    java.lang.String[] var21 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var22 = var17.withHeader(var21);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord();
    boolean var27 = var24.isCommentMarkerSet();
    boolean var28 = var24.getIgnoreHeaderCase();
    java.lang.String[] var30 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var31 = var24.withHeader(var30);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord();
    boolean var36 = var33.isCommentMarkerSet();
    boolean var37 = var33.getIgnoreHeaderCase();
    java.lang.String[] var39 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var40 = var33.withHeader(var39);
    org.apache.commons.csv.CSVFormat var41 = var24.withHeader(var39);
    java.lang.String var42 = var22.format((java.lang.Object[])var39);
    org.apache.commons.csv.CSVFormat var43 = var15.withHeader(var39);
    java.lang.String var44 = var8.format((java.lang.Object[])var39);
    org.apache.commons.csv.CSVFormat var46 = var8.withEscape('4');
    org.apache.commons.csv.QuoteMode var47 = var46.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var42.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var44.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test201");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var11 = var3.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var12 = var3.withIgnoreEmptyLines();
    java.lang.String var13 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:true"+ "'", var13.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:true"));

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test202");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    java.lang.Character var3 = var1.getCommentMarker();
    boolean var4 = var1.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreSurroundingSpaces(true);
    boolean var7 = var1.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test203");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote('#');
    org.apache.commons.csv.CSVFormat var10 = var8.withEscape('4');
    java.lang.String[] var11 = var10.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test204");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=< > SurroundingSpaces:ignored SkipHeaderRecord:true Header:[]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test205");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    java.lang.String var10 = var9.toString();
    org.apache.commons.csv.CSVFormat var12 = var9.withNullString("");
    org.apache.commons.csv.CSVFormat var14 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    boolean var18 = var16.isNullStringSet();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var16.withHeader(var20);
    java.lang.String var22 = var14.format((java.lang.Object[])var20);
    java.lang.String var23 = var5.format((java.lang.Object[])var20);
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var26 = var25.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var28 = var25.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var25.withIgnoreEmptyLines();
    java.lang.String[] var30 = var29.getHeaderComments();
    org.apache.commons.csv.CSVFormat var32 = var29.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var34 = var29.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var37 = var36.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord();
    boolean var39 = var36.isCommentMarkerSet();
    boolean var40 = var36.getIgnoreHeaderCase();
    java.lang.String[] var42 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var43 = var36.withHeader(var42);
    org.apache.commons.csv.CSVFormat var44 = var29.withHeaderComments((java.lang.Object[])var42);
    java.lang.String var45 = var5.format((java.lang.Object[])var42);
    boolean var46 = var5.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var48 = var5.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var50 = var48.withQuote('a');
    java.lang.Character var51 = var50.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var45.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test206");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = var10.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var14 = var13.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var16 = var13.withRecordSeparator('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test207");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote('#');
    org.apache.commons.csv.CSVFormat var9 = var6.withSkipHeaderRecord();
    java.lang.String[] var10 = var9.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test208");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false Header:[]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test209");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    java.lang.String var10 = var9.toString();
    org.apache.commons.csv.CSVFormat var12 = var9.withNullString("");
    org.apache.commons.csv.CSVFormat var14 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    boolean var18 = var16.isNullStringSet();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var16.withHeader(var20);
    java.lang.String var22 = var14.format((java.lang.Object[])var20);
    java.lang.String var23 = var5.format((java.lang.Object[])var20);
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var26 = var25.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var28 = var25.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var25.withIgnoreEmptyLines();
    java.lang.String[] var30 = var29.getHeaderComments();
    org.apache.commons.csv.CSVFormat var32 = var29.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var34 = var29.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var37 = var36.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord();
    boolean var39 = var36.isCommentMarkerSet();
    boolean var40 = var36.getIgnoreHeaderCase();
    java.lang.String[] var42 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var43 = var36.withHeader(var42);
    org.apache.commons.csv.CSVFormat var44 = var29.withHeaderComments((java.lang.Object[])var42);
    java.lang.String var45 = var5.format((java.lang.Object[])var42);
    boolean var46 = var5.getIgnoreEmptyLines();
    java.lang.String var47 = var5.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var45.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test210");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    java.lang.Character var7 = var5.getCommentMarker();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var5.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var12 = var5.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    boolean var18 = var16.isNullStringSet();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var16.withHeader(var20);
    org.apache.commons.csv.CSVFormat var22 = var12.withHeader(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test211");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    java.lang.Character var13 = var12.getCommentMarker();
    org.apache.commons.csv.CSVFormat var15 = var12.withSkipHeaderRecord(false);
    boolean var16 = var8.equals((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test212");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withQuote((java.lang.Character)'4');
    boolean var8 = var7.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var7.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var12 = var10.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test213");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDF", var8);
    var9.close();
    java.util.Map var11 = var9.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test214");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator("#");
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("#", var2);
    java.util.Map var6 = var5.getHeaderMap();
    long var7 = var5.getCurrentLineNumber();
    long var8 = var5.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test215");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.Character var4 = var1.getCommentMarker();
    java.lang.String[] var5 = var1.getHeader();
    java.lang.String[] var6 = var1.getHeaderComments();
    java.lang.String[] var7 = var1.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test216");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    boolean var9 = var8.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var15 = var13.withAllowMissingColumnNames(true);
    java.lang.String var16 = var15.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var19 = var18.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = var18.withNullString("");
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreEmptyLines();
    java.lang.String var23 = var22.toString();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var26 = var25.withAllowMissingColumnNames();
    boolean var27 = var25.isNullStringSet();
    java.lang.String[] var29 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var30 = var25.withHeader(var29);
    org.apache.commons.csv.CSVFormat var31 = var22.withHeader(var29);
    java.lang.String var32 = var15.format((java.lang.Object[])var29);
    java.lang.String var33 = var8.format((java.lang.Object[])var29);
    org.apache.commons.csv.CSVFormat var35 = var8.withIgnoreHeaderCase(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var23.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test217");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    boolean var5 = var4.getIgnoreEmptyLines();
    boolean var6 = var4.getAllowMissingColumnNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var8 = var4.withQuote('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test218");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    boolean var9 = var6.isClosed();
    boolean var10 = var6.isClosed();
    java.util.List var11 = var6.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test219");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > NullString=<Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false> SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test220");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    char var19 = var1.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == ' ');

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test221");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    java.lang.Character var4 = var2.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    boolean var13 = var10.getAllowMissingColumnNames();
    boolean var14 = var6.equals((java.lang.Object)var10);
    org.apache.commons.csv.CSVParser var15 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false", var6);
    java.lang.Character var16 = var6.getCommentMarker();
    org.apache.commons.csv.CSVFormat var18 = var6.withQuote('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test222");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var9 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var8.withNullString("");
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreEmptyLines();
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    boolean var17 = var15.isNullStringSet();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var15.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var12.withHeader(var19);
    java.lang.String var22 = var5.format((java.lang.Object[])var19);
    org.apache.commons.csv.CSVFormat var24 = var5.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var26 = var5.withRecordSeparator("Delimiter=< > SkipHeaderRecord:trueDelimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false Header:[]");
    org.apache.commons.csv.CSVFormat var28 = var5.withIgnoreSurroundingSpaces(true);
    java.lang.String[] var29 = var28.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var13.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test223");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    boolean var5 = var4.isCommentMarkerSet();
    java.lang.Character var6 = var4.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var4.withAllowMissingColumnNames(false);
    java.lang.String var11 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > RecordSeparator=<hi!> SkipHeaderRecord:false"+ "'", var11.equals("Delimiter=< > RecordSeparator=<hi!> SkipHeaderRecord:false"));

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test224");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    var6.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test225");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreEmptyLines(false);
    java.lang.String[] var9 = var5.getHeader();
    java.lang.Character var10 = var5.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test226");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var4.withNullString("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test227");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    boolean var12 = var10.isNullStringSet();
    java.lang.String[] var14 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var15 = var10.withHeader(var14);
    java.lang.String var16 = var8.format((java.lang.Object[])var14);
    java.lang.Character var17 = var8.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test228");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    long var6 = var5.getCurrentLineNumber();
    boolean var7 = var5.isClosed();
    java.util.Map var8 = var5.getHeaderMap();
    long var9 = var5.getRecordNumber();
    var5.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test229");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("Delimiter=< > QuoteChar=<a> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var11 = var9.withCommentMarker('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test230");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var5.withSkipHeaderRecord();
    boolean var7 = var6.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var9 = var6.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var11 = var9.withNullString("Delimiter=<4> SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test231");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    java.lang.String[] var5 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var3.withAllowMissingColumnNames();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var12 = var11.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var14 = var11.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var11.withIgnoreEmptyLines();
    java.lang.String[] var16 = var15.getHeaderComments();
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var20 = var15.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var21 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var22 = var20.withHeaderComments((java.lang.Object[])var21);
    org.apache.commons.csv.CSVFormat var23 = var6.withHeaderComments((java.lang.Object[])var21);
    org.apache.commons.csv.CSVFormat var24 = var6.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test232");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    boolean var11 = var8.isCommentMarkerSet();
    boolean var12 = var8.getIgnoreHeaderCase();
    java.lang.String[] var14 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var15 = var8.withHeader(var14);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    boolean var20 = var17.isCommentMarkerSet();
    boolean var21 = var17.getIgnoreHeaderCase();
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var17.withHeader(var23);
    org.apache.commons.csv.CSVFormat var25 = var8.withHeader(var23);
    java.lang.String var26 = var6.format((java.lang.Object[])var23);
    org.apache.commons.csv.CSVFormat var28 = var6.withQuote('4');
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var31 = var30.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var33 = var30.withNullString("");
    org.apache.commons.csv.CSVFormat var34 = var30.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var36 = var34.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withQuote(' ');
    boolean var39 = var38.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var40 = var38.withAllowMissingColumnNames();
    boolean var41 = var6.equals((java.lang.Object)var38);
    org.apache.commons.csv.CSVFormat var43 = var38.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var47 = var46.withIgnoreSurroundingSpaces();
    java.lang.Character var48 = var46.getCommentMarker();
    org.apache.commons.csv.CSVParser var49 = org.apache.commons.csv.CSVParser.parse("hi!", var46);
    java.util.List var50 = var49.getRecords();
    boolean var51 = var43.equals((java.lang.Object)var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var26.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test233");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    boolean var9 = var6.isClosed();
    java.util.List var10 = var6.getRecords();
    java.util.Iterator var11 = var6.iterator();
    var6.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var13 = var6.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test234");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var7 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var17 = var16.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var19 = var16.withNullString("");
    org.apache.commons.csv.CSVFormat var20 = var16.withIgnoreEmptyLines();
    java.lang.String var21 = var20.toString();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    boolean var25 = var23.isNullStringSet();
    java.lang.String[] var27 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var28 = var23.withHeader(var27);
    org.apache.commons.csv.CSVFormat var29 = var20.withHeader(var27);
    java.lang.String var30 = var13.format((java.lang.Object[])var27);
    org.apache.commons.csv.CSVFormat var31 = var6.withHeaderComments((java.lang.Object[])var27);
    org.apache.commons.csv.CSVFormat var33 = var31.withCommentMarker('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var21.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test235");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=< > SkipHeaderRecord:false Header:[Default Excel MySQL RFC4180 TDF]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test236");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    long var6 = var5.getCurrentLineNumber();
    boolean var7 = var5.isClosed();
    java.util.Map var8 = var5.getHeaderMap();
    var5.close();
    java.util.Iterator var10 = var5.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var11 = var5.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test237");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = var10.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var18 = var6.equals((java.lang.Object)var17);
    org.apache.commons.csv.CSVFormat var20 = var17.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:false");
    java.lang.String[] var21 = var17.getHeaderComments();
    org.apache.commons.csv.CSVFormat var23 = var17.withQuote((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test238");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test239");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var12 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var13 = var11.withHeaderComments((java.lang.Object[])var12);
    org.apache.commons.csv.CSVFormat var15 = var11.withIgnoreHeaderCase(false);
    java.lang.Character var16 = var15.getQuoteCharacter();
    org.apache.commons.csv.CSVParser var17 = org.apache.commons.csv.CSVParser.parse("4", var15);
    org.apache.commons.csv.CSVFormat var19 = var15.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var22 = var21.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord();
    java.lang.String var24 = var23.toString();
    org.apache.commons.csv.CSVFormat var26 = var23.withNullString("");
    org.apache.commons.csv.CSVFormat var28 = var23.withIgnoreSurroundingSpaces(true);
    boolean var29 = var23.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var31 = var23.withQuote('a');
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var35 = var34.isCommentMarkerSet();
    boolean var36 = var34.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var37 = org.apache.commons.csv.CSVParser.parse("", var34);
    boolean var38 = var34.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var40 = var34.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var42 = var34.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var45 = var44.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var47 = var44.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var49 = var44.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var50 = var49.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var53 = var52.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var54 = var52.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var56 = var54.withAllowMissingColumnNames(true);
    java.lang.String var57 = var56.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var59 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var60 = var59.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var62 = var59.withNullString("");
    org.apache.commons.csv.CSVFormat var63 = var59.withIgnoreEmptyLines();
    java.lang.String var64 = var63.toString();
    org.apache.commons.csv.CSVFormat var66 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var67 = var66.withAllowMissingColumnNames();
    boolean var68 = var66.isNullStringSet();
    java.lang.String[] var70 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var71 = var66.withHeader(var70);
    org.apache.commons.csv.CSVFormat var72 = var63.withHeader(var70);
    java.lang.String var73 = var56.format((java.lang.Object[])var70);
    org.apache.commons.csv.CSVFormat var74 = var49.withHeaderComments((java.lang.Object[])var70);
    java.lang.String var75 = var42.format((java.lang.Object[])var70);
    org.apache.commons.csv.CSVFormat var76 = var31.withHeader(var70);
    org.apache.commons.csv.CSVFormat var77 = var15.withHeaderComments((java.lang.Object[])var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var24.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var64.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + ""+ "'", var73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + ""+ "'", var75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test240");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withNullString("Delimiter=< > RecordSeparator=<hi!> SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test241");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreSurroundingSpaces(true);
    java.lang.String[] var13 = var12.getHeaderComments();
    java.lang.Character var14 = var12.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test242");


    org.apache.commons.csv.CSVFormat var3 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var4 = var3.isCommentMarkerSet();
    boolean var5 = var3.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var3);
    boolean var7 = var3.getSkipHeaderRecord();
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > CommentStart=<4> RecordSeparator=<Default Excel MySQL RFC4180 TDF> EmptyLines:ignored SkipHeaderRecord:true", var3);
    org.apache.commons.csv.CSVFormat var10 = var3.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test243");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var11 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var12 = var10.withHeaderComments((java.lang.Object[])var11);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    java.lang.String var25 = var24.toString();
    org.apache.commons.csv.CSVFormat var27 = var24.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var24.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    boolean var33 = var31.isNullStringSet();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var31.withHeader(var35);
    java.lang.String var37 = var29.format((java.lang.Object[])var35);
    java.lang.String var38 = var20.format((java.lang.Object[])var35);
    org.apache.commons.csv.CSVFormat var39 = var14.withHeader(var35);
    org.apache.commons.csv.CSVFormat var41 = var39.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var43 = var39.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var45 = var39.withCommentMarker((java.lang.Character)'a');
    boolean var46 = var45.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var25.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test244");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var7 = var2.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var8 = var7.isQuoteCharacterSet();
    java.lang.String[] var9 = var7.getHeader();
    org.apache.commons.csv.CSVFormat var11 = var7.withEscape('a');
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:trueDelimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false Header:[]", var11);
    boolean var13 = var11.isNullStringSet();
    boolean var14 = var11.isEscapeCharacterSet();
    java.lang.Character var15 = var11.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 'a'+ "'", var15.equals('a'));

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test245");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    char var10 = var7.getDelimiter();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withRecordSeparator("hi!");
    boolean var16 = var15.isCommentMarkerSet();
    java.lang.Character var17 = var15.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var19 = var15.withAllowMissingColumnNames(true);
    boolean var20 = var19.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    java.lang.String var25 = var24.toString();
    org.apache.commons.csv.CSVFormat var27 = var24.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var27.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord();
    boolean var34 = var31.isCommentMarkerSet();
    boolean var35 = var31.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var38 = var37.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var40 = var37.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var42 = var37.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var43 = var42.withIgnoreSurroundingSpaces();
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.String var45 = var31.format(var44);
    java.lang.String[] var47 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var48 = var31.withHeader(var47);
    org.apache.commons.csv.CSVFormat var49 = var27.withHeader(var47);
    java.lang.String var50 = var19.format((java.lang.Object[])var47);
    java.lang.String var51 = var7.format((java.lang.Object[])var47);
    java.lang.String[] var52 = var7.getHeader();
    org.apache.commons.csv.CSVFormat var54 = var7.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var25.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var45.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var50.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var51.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test246");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    java.util.List var6 = var5.getRecords();
    java.util.Map var7 = var5.getHeaderMap();
    java.util.List var8 = var5.getRecords();
    long var9 = var5.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test247");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    boolean var4 = var2.isNullStringSet();
    java.lang.Character var5 = var2.getCommentMarker();
    java.lang.String[] var6 = var2.getHeader();
    java.lang.String[] var7 = var2.getHeaderComments();
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("", var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test248");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines(true);
    boolean var9 = var8.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var10.withIgnoreEmptyLines(true);
    java.lang.Character var13 = var10.getCommentMarker();
    org.apache.commons.csv.CSVFormat var14 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test249");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    boolean var19 = var1.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test250");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > QuoteChar=<#> NullString=<Delimiter=< > SkipHeaderRecord:true> SurroundingSpaces:ignored SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test251");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var12 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var13 = var11.withHeaderComments((java.lang.Object[])var12);
    org.apache.commons.csv.CSVFormat var15 = var11.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = var19.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord();
    java.lang.String var26 = var25.toString();
    org.apache.commons.csv.CSVFormat var28 = var25.withNullString("");
    org.apache.commons.csv.CSVFormat var30 = var25.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var33 = var32.withAllowMissingColumnNames();
    boolean var34 = var32.isNullStringSet();
    java.lang.String[] var36 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var37 = var32.withHeader(var36);
    java.lang.String var38 = var30.format((java.lang.Object[])var36);
    java.lang.String var39 = var21.format((java.lang.Object[])var36);
    org.apache.commons.csv.CSVFormat var40 = var15.withHeader(var36);
    org.apache.commons.csv.CSVFormat var42 = var15.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var43 = org.apache.commons.csv.CSVParser.parse("ALL MINIMAL NON_NUMERIC NONE", var15);
    org.apache.commons.csv.CSVFormat var44 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var46 = var44.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var26.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test252");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var14 = var10.withDelimiter('4');
    java.lang.String[] var15 = var10.getHeader();
    org.apache.commons.csv.CSVFormat var17 = var10.withEscape('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test253");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var11 = var7.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var13 = var11.withEscape((java.lang.Character)'#');
    java.lang.String var14 = var11.getRecordSeparator();
    java.lang.Character var15 = var11.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test254");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var3.withCommentMarker('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test255");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var8 = var6.withIgnoreEmptyLines();
    boolean var9 = var6.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test256");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    java.lang.Character var16 = var12.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var17 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var12.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var21 = var12.withDelimiter(' ');
    java.lang.String var22 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var25 = var24.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var27 = var24.withRecordSeparator("hi!");
    boolean var28 = var27.isCommentMarkerSet();
    boolean var29 = var27.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var32 = var31.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var34 = var31.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var36 = var31.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var39 = var38.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var41 = var38.withNullString("");
    org.apache.commons.csv.CSVFormat var42 = var38.withIgnoreEmptyLines();
    java.lang.String var43 = var42.toString();
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var46 = var45.withAllowMissingColumnNames();
    boolean var47 = var45.isNullStringSet();
    java.lang.String[] var49 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var50 = var45.withHeader(var49);
    org.apache.commons.csv.CSVFormat var51 = var42.withHeader(var49);
    org.apache.commons.csv.CSVFormat var52 = var31.withHeader(var49);
    org.apache.commons.csv.CSVFormat var53 = var27.withHeaderComments((java.lang.Object[])var49);
    org.apache.commons.csv.CSVFormat var54 = var12.withHeaderComments((java.lang.Object[])var49);
    org.apache.commons.csv.CSVFormat var55 = var8.withHeaderComments((java.lang.Object[])var49);
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var58 = var57.withAllowMissingColumnNames();
    boolean var59 = var57.isNullStringSet();
    java.lang.Character var60 = var57.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var62 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var63 = var62.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var65 = var62.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var67 = var62.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var68 = var67.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var70 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var71 = var70.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var72 = var70.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var74 = var72.withAllowMissingColumnNames(true);
    java.lang.String var75 = var74.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var77 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var78 = var77.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var80 = var77.withNullString("");
    org.apache.commons.csv.CSVFormat var81 = var77.withIgnoreEmptyLines();
    java.lang.String var82 = var81.toString();
    org.apache.commons.csv.CSVFormat var84 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var85 = var84.withAllowMissingColumnNames();
    boolean var86 = var84.isNullStringSet();
    java.lang.String[] var88 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var89 = var84.withHeader(var88);
    org.apache.commons.csv.CSVFormat var90 = var81.withHeader(var88);
    java.lang.String var91 = var74.format((java.lang.Object[])var88);
    org.apache.commons.csv.CSVFormat var92 = var67.withHeaderComments((java.lang.Object[])var88);
    org.apache.commons.csv.CSVFormat var93 = var57.withHeaderComments((java.lang.Object[])var88);
    java.lang.String var94 = var8.format((java.lang.Object[])var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var43.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var82.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + ""+ "'", var91.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "aa"+ "'", var94.equals("aa"));

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test257");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker((java.lang.Character)'#');
    java.lang.String var11 = var10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > CommentStart=<#> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var11.equals("Delimiter=< > CommentStart=<#> EmptyLines:ignored SkipHeaderRecord:false"));

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test258");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var6 = var4.withRecordSeparator('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test259");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var9 = var7.withNullString("ALL MINIMAL NON_NUMERIC NONE");
    org.apache.commons.csv.CSVFormat var11 = var7.withRecordSeparator('4');
    boolean var12 = var11.isNullStringSet();
    org.apache.commons.csv.CSVFormat var14 = var11.withSkipHeaderRecord(false);
    boolean var15 = var11.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var17 = var11.withRecordSeparator('4');
    boolean var18 = var11.getSkipHeaderRecord();
    boolean var19 = var11.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var22 = var21.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var24 = var21.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var26 = var21.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var29 = var28.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var31 = var28.withNullString("");
    org.apache.commons.csv.CSVFormat var32 = var28.withIgnoreEmptyLines();
    java.lang.String var33 = var32.toString();
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var36 = var35.withAllowMissingColumnNames();
    boolean var37 = var35.isNullStringSet();
    java.lang.String[] var39 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var40 = var35.withHeader(var39);
    org.apache.commons.csv.CSVFormat var41 = var32.withHeader(var39);
    org.apache.commons.csv.CSVFormat var42 = var21.withHeader(var39);
    java.lang.String var43 = var42.toString();
    java.lang.String[] var44 = var42.getHeader();
    org.apache.commons.csv.CSVFormat var45 = var11.withHeaderComments((java.lang.Object[])var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var33.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var43.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test260");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreSurroundingSpaces(false);
    java.lang.String var10 = var9.toString();
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreEmptyLines();
    java.lang.Character var12 = var9.getCommentMarker();
    org.apache.commons.csv.CSVFormat var13 = var9.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var10.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test261");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    boolean var9 = var6.equals((java.lang.Object)'a');
    org.apache.commons.csv.CSVFormat var11 = var6.withQuote((java.lang.Character)'#');
    java.lang.String var12 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var14 = var6.withDelimiter('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test262");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    boolean var6 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    boolean var11 = var8.isCommentMarkerSet();
    boolean var12 = var8.getIgnoreHeaderCase();
    java.lang.String[] var14 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var15 = var8.withHeader(var14);
    org.apache.commons.csv.CSVFormat var16 = var5.withHeaderComments((java.lang.Object[])var14);
    boolean var17 = var16.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var18 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > RecordSeparator=<#> EmptyLines:ignored SkipHeaderRecord:false", var16);
    java.util.List var19 = var18.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test263");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test264");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withRecordSeparator("ALL MINIMAL NON_NUMERIC NONE");
    org.apache.commons.csv.CSVFormat var12 = var10.withEscape('4');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test265");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = var6.withNullString("Delimiter=< > RecordSeparator=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var9 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = var8.withEscape((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test266");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var7.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var12 = var7.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test267");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.String[] var3 = var1.getHeaderComments();
    java.lang.String[] var4 = var1.getHeader();
    boolean var5 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var8.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("", var11);
    long var13 = var12.getCurrentLineNumber();
    long var14 = var12.getCurrentLineNumber();
    var12.close();
    java.util.Iterator var16 = var12.iterator();
    long var17 = var12.getRecordNumber();
    boolean var18 = var1.equals((java.lang.Object)var12);
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var21 = var20.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var23 = var20.withNullString("");
    org.apache.commons.csv.CSVFormat var24 = var20.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var26 = var24.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var28 = var26.withSkipHeaderRecord(false);
    char var29 = var26.getDelimiter();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var32 = var31.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var34 = var31.withRecordSeparator("hi!");
    boolean var35 = var34.isCommentMarkerSet();
    java.lang.Character var36 = var34.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var38 = var34.withAllowMissingColumnNames(true);
    boolean var39 = var38.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var42 = var41.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord();
    java.lang.String var44 = var43.toString();
    org.apache.commons.csv.CSVFormat var46 = var43.withNullString("");
    org.apache.commons.csv.CSVFormat var48 = var46.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var51 = var50.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var52 = var50.withSkipHeaderRecord();
    boolean var53 = var50.isCommentMarkerSet();
    boolean var54 = var50.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var57 = var56.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var59 = var56.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var61 = var56.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var62 = var61.withIgnoreSurroundingSpaces();
    java.lang.Object[] var63 = new java.lang.Object[] { var61};
    java.lang.String var64 = var50.format(var63);
    java.lang.String[] var66 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var67 = var50.withHeader(var66);
    org.apache.commons.csv.CSVFormat var68 = var46.withHeader(var66);
    java.lang.String var69 = var38.format((java.lang.Object[])var66);
    java.lang.String var70 = var26.format((java.lang.Object[])var66);
    java.lang.String var71 = var1.format((java.lang.Object[])var66);
    java.lang.Character var72 = var1.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var44.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var64.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var69.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var70.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var71.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test268");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test269");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.Character var3 = var1.getQuoteCharacter();
    char var4 = var1.getDelimiter();
    org.apache.commons.csv.CSVFormat var6 = var1.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape('a');
    java.lang.String[] var9 = var6.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test270");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    boolean var5 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    boolean var10 = var7.isCommentMarkerSet();
    boolean var11 = var7.getIgnoreHeaderCase();
    java.lang.String[] var13 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var14 = var7.withHeader(var13);
    org.apache.commons.csv.CSVFormat var15 = var4.withHeaderComments((java.lang.Object[])var13);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var18 = var17.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = var17.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var22 = var17.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var25 = var24.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var27 = var24.withNullString("");
    org.apache.commons.csv.CSVFormat var28 = var24.withIgnoreEmptyLines();
    java.lang.String var29 = var28.toString();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    boolean var33 = var31.isNullStringSet();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var31.withHeader(var35);
    org.apache.commons.csv.CSVFormat var37 = var28.withHeader(var35);
    org.apache.commons.csv.CSVFormat var38 = var17.withHeader(var35);
    java.lang.String var39 = var38.toString();
    java.lang.String[] var40 = var38.getHeader();
    org.apache.commons.csv.CSVFormat var41 = var15.withHeader(var40);
    org.apache.commons.csv.CSVFormat var42 = var15.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var44 = var15.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var29.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var39.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test271");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var7 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var17 = var16.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var19 = var16.withNullString("");
    org.apache.commons.csv.CSVFormat var20 = var16.withIgnoreEmptyLines();
    java.lang.String var21 = var20.toString();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    boolean var25 = var23.isNullStringSet();
    java.lang.String[] var27 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var28 = var23.withHeader(var27);
    org.apache.commons.csv.CSVFormat var29 = var20.withHeader(var27);
    java.lang.String var30 = var13.format((java.lang.Object[])var27);
    org.apache.commons.csv.CSVFormat var31 = var6.withHeaderComments((java.lang.Object[])var27);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord();
    boolean var36 = var33.isCommentMarkerSet();
    java.lang.Character var37 = var33.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var38 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var40 = var33.withIgnoreEmptyLines(true);
    boolean var41 = var40.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var42 = var40.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var44 = var42.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var46 = var42.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var49 = var48.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var51 = var48.withNullString("");
    org.apache.commons.csv.CSVFormat var52 = var48.withIgnoreEmptyLines();
    java.lang.String[] var53 = var52.getHeaderComments();
    org.apache.commons.csv.CSVFormat var55 = var52.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var57 = var52.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var58 = var57.getQuoteMode();
    org.apache.commons.csv.CSVFormat var60 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var61 = var60.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var62 = var60.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var64 = var62.withAllowMissingColumnNames(true);
    java.lang.String var65 = var64.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var68 = var67.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var70 = var67.withNullString("");
    org.apache.commons.csv.CSVFormat var71 = var67.withIgnoreEmptyLines();
    java.lang.String var72 = var71.toString();
    org.apache.commons.csv.CSVFormat var74 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var75 = var74.withAllowMissingColumnNames();
    boolean var76 = var74.isNullStringSet();
    java.lang.String[] var78 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var79 = var74.withHeader(var78);
    org.apache.commons.csv.CSVFormat var80 = var71.withHeader(var78);
    java.lang.String var81 = var64.format((java.lang.Object[])var78);
    org.apache.commons.csv.CSVFormat var82 = var57.withHeader(var78);
    org.apache.commons.csv.CSVFormat var83 = var46.withHeader(var78);
    org.apache.commons.csv.CSVFormat var84 = var31.withHeader(var78);
    org.apache.commons.csv.CSVFormat var86 = var84.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var88 = var86.withEscape('a');
    org.apache.commons.csv.CSVFormat var89 = var88.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var21.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var72.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + ""+ "'", var81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test272");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = var10.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var18 = var6.equals((java.lang.Object)var17);
    org.apache.commons.csv.CSVFormat var20 = var6.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withIgnoreSurroundingSpaces();
    java.lang.Character var24 = var22.getCommentMarker();
    java.lang.String var25 = var22.getNullString();
    org.apache.commons.csv.CSVFormat var26 = var22.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var29 = var28.withAllowMissingColumnNames();
    boolean var30 = var28.isNullStringSet();
    java.lang.String[] var32 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var33 = var28.withHeader(var32);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var36 = var35.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var37 = var35.withSkipHeaderRecord();
    boolean var38 = var35.isCommentMarkerSet();
    boolean var39 = var35.getIgnoreHeaderCase();
    java.lang.String[] var41 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var42 = var35.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var45 = var44.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var46 = var44.withSkipHeaderRecord();
    boolean var47 = var44.isCommentMarkerSet();
    boolean var48 = var44.getIgnoreHeaderCase();
    java.lang.String[] var50 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var51 = var44.withHeader(var50);
    org.apache.commons.csv.CSVFormat var52 = var35.withHeader(var50);
    java.lang.String var53 = var33.format((java.lang.Object[])var50);
    org.apache.commons.csv.CSVFormat var54 = var26.withHeader(var50);
    java.lang.String var55 = var6.format((java.lang.Object[])var50);
    org.apache.commons.csv.CSVFormat var57 = var6.withRecordSeparator("ALL MINIMAL NON_NUMERIC NONEDelimiter=< > SkipHeaderRecord:true");
    boolean var58 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var60 = var6.withCommentMarker('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var53.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var55.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test273");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = var10.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var19 = var10.withRecordSeparator(' ');
    java.lang.String var20 = var19.toString();
    org.apache.commons.csv.CSVFormat var22 = var19.withCommentMarker('a');
    org.apache.commons.csv.QuoteMode var23 = var22.getQuoteMode();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var26 = var25.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var27 = var25.withSkipHeaderRecord();
    boolean var28 = var25.isCommentMarkerSet();
    java.lang.Character var29 = var25.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var30 = var25.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var33 = var32.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord();
    java.lang.String var35 = var34.toString();
    org.apache.commons.csv.CSVFormat var37 = var34.withNullString("");
    org.apache.commons.csv.CSVFormat var39 = var34.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var41 = var34.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var42 = var30.equals((java.lang.Object)var41);
    org.apache.commons.csv.CSVFormat var43 = var41.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var46 = var45.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var47 = var45.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var49 = var47.withAllowMissingColumnNames(true);
    java.lang.String var50 = var49.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var52 = var49.withIgnoreEmptyLines(false);
    java.lang.String[] var53 = var49.getHeader();
    char var54 = var49.getDelimiter();
    org.apache.commons.csv.CSVFormat var56 = var49.withQuote('#');
    org.apache.commons.csv.CSVFormat var58 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var59 = var58.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var61 = var58.withNullString("");
    org.apache.commons.csv.CSVFormat var62 = var58.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var64 = var62.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var66 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var67 = var66.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var68 = var66.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var70 = var68.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var72 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var73 = var72.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var74 = var72.withSkipHeaderRecord();
    java.lang.String var75 = var74.toString();
    org.apache.commons.csv.CSVFormat var77 = var74.withNullString("");
    org.apache.commons.csv.CSVFormat var79 = var74.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var81 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var82 = var81.withAllowMissingColumnNames();
    boolean var83 = var81.isNullStringSet();
    java.lang.String[] var85 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var86 = var81.withHeader(var85);
    java.lang.String var87 = var79.format((java.lang.Object[])var85);
    java.lang.String var88 = var70.format((java.lang.Object[])var85);
    org.apache.commons.csv.CSVFormat var89 = var62.withHeader(var85);
    org.apache.commons.csv.CSVFormat var90 = var56.withHeader(var85);
    org.apache.commons.csv.CSVFormat var91 = var41.withHeaderComments((java.lang.Object[])var85);
    org.apache.commons.csv.CSVFormat var92 = var22.withHeader(var85);
    org.apache.commons.csv.CSVFormat var93 = var4.withHeaderComments((java.lang.Object[])var85);
    org.apache.commons.csv.CSVFormat var95 = var4.withNullString("Delimiter=< > SkipHeaderRecord:true Header:[Default Excel MySQL RFC4180 TDF]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var20.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var35.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var75.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + ""+ "'", var88.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test274");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    boolean var13 = var11.isNullStringSet();
    java.lang.String[] var15 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var16 = var11.withHeader(var15);
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord();
    boolean var21 = var18.isCommentMarkerSet();
    boolean var22 = var18.getIgnoreHeaderCase();
    java.lang.String[] var24 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var25 = var18.withHeader(var24);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    boolean var30 = var27.isCommentMarkerSet();
    boolean var31 = var27.getIgnoreHeaderCase();
    java.lang.String[] var33 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var34 = var27.withHeader(var33);
    org.apache.commons.csv.CSVFormat var35 = var18.withHeader(var33);
    java.lang.String var36 = var16.format((java.lang.Object[])var33);
    org.apache.commons.csv.CSVFormat var37 = var9.withHeader(var33);
    java.lang.String var38 = var37.getNullString();
    boolean var39 = var37.getSkipHeaderRecord();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var41 = var37.withEscape((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var36.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var38.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test275");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreEmptyLines(false);
    java.lang.String[] var9 = var5.getHeader();
    char var10 = var5.getDelimiter();
    boolean var11 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var12.withEscape('#');
    org.apache.commons.csv.CSVFormat var16 = var14.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test276");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var1.withEscape((java.lang.Character)'a');
    java.lang.Character var6 = var1.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test277");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = var10.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var18 = var6.equals((java.lang.Object)var17);
    org.apache.commons.csv.CSVFormat var20 = var17.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var21 = var20.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var22 = var21.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test278");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var7 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var17 = var16.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var19 = var16.withNullString("");
    org.apache.commons.csv.CSVFormat var20 = var16.withIgnoreEmptyLines();
    java.lang.String var21 = var20.toString();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    boolean var25 = var23.isNullStringSet();
    java.lang.String[] var27 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var28 = var23.withHeader(var27);
    org.apache.commons.csv.CSVFormat var29 = var20.withHeader(var27);
    java.lang.String var30 = var13.format((java.lang.Object[])var27);
    org.apache.commons.csv.CSVFormat var31 = var6.withHeaderComments((java.lang.Object[])var27);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord();
    boolean var36 = var33.isCommentMarkerSet();
    java.lang.Character var37 = var33.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var38 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var40 = var33.withIgnoreEmptyLines(true);
    boolean var41 = var40.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var42 = var40.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var44 = var42.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var46 = var42.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var49 = var48.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var51 = var48.withNullString("");
    org.apache.commons.csv.CSVFormat var52 = var48.withIgnoreEmptyLines();
    java.lang.String[] var53 = var52.getHeaderComments();
    org.apache.commons.csv.CSVFormat var55 = var52.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var57 = var52.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var58 = var57.getQuoteMode();
    org.apache.commons.csv.CSVFormat var60 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var61 = var60.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var62 = var60.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var64 = var62.withAllowMissingColumnNames(true);
    java.lang.String var65 = var64.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var68 = var67.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var70 = var67.withNullString("");
    org.apache.commons.csv.CSVFormat var71 = var67.withIgnoreEmptyLines();
    java.lang.String var72 = var71.toString();
    org.apache.commons.csv.CSVFormat var74 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var75 = var74.withAllowMissingColumnNames();
    boolean var76 = var74.isNullStringSet();
    java.lang.String[] var78 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var79 = var74.withHeader(var78);
    org.apache.commons.csv.CSVFormat var80 = var71.withHeader(var78);
    java.lang.String var81 = var64.format((java.lang.Object[])var78);
    org.apache.commons.csv.CSVFormat var82 = var57.withHeader(var78);
    org.apache.commons.csv.CSVFormat var83 = var46.withHeader(var78);
    org.apache.commons.csv.CSVFormat var84 = var31.withHeader(var78);
    org.apache.commons.csv.CSVFormat var86 = var84.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var88 = var84.withCommentMarker((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var21.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var72.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + ""+ "'", var81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test279");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    boolean var5 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreSurroundingSpaces(false);
    java.lang.Character var8 = var7.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    boolean var16 = var12.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var18 = var12.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreEmptyLines(true);
    char var21 = var18.getDelimiter();
    java.lang.String var22 = var18.getNullString();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord();
    java.lang.String var27 = var26.toString();
    java.lang.String[] var28 = var26.getHeader();
    org.apache.commons.csv.CSVFormat var29 = var26.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var31 = var29.withEscape((java.lang.Character)'4');
    boolean var32 = var31.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var35 = var34.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var36 = var34.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    java.lang.String var39 = var38.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var42 = var41.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var44 = var41.withNullString("");
    org.apache.commons.csv.CSVFormat var45 = var41.withIgnoreEmptyLines();
    java.lang.String var46 = var45.toString();
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var49 = var48.withAllowMissingColumnNames();
    boolean var50 = var48.isNullStringSet();
    java.lang.String[] var52 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var53 = var48.withHeader(var52);
    org.apache.commons.csv.CSVFormat var54 = var45.withHeader(var52);
    java.lang.String var55 = var38.format((java.lang.Object[])var52);
    java.lang.String var56 = var31.format((java.lang.Object[])var52);
    java.lang.String var57 = var18.format((java.lang.Object[])var52);
    java.lang.String var58 = var7.format((java.lang.Object[])var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var27.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var46.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + ""+ "'", var57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test280");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var7 = var6.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var9 = var6.withNullString("");
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreEmptyLines();
    java.lang.String[] var11 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var15 = var10.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var16 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var17 = var15.withHeaderComments((java.lang.Object[])var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeaderComments((java.lang.Object[])var16);
    java.lang.String[] var19 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var21 = var1.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var23 = var1.withIgnoreEmptyLines(false);
    java.lang.String var24 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var26 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var28 = var26.withNullString("Delimiter=< > SurroundingSpaces:ignored SkipHeaderRecord:true Header:[]");
    org.apache.commons.csv.CSVFormat var30 = var26.withDelimiter(' ');
    java.lang.Character var31 = var30.getEscapeCharacter();
    boolean var32 = var30.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test281");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord();
    boolean var18 = var15.isCommentMarkerSet();
    boolean var19 = var15.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var22 = var21.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var24 = var21.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var26 = var21.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var27 = var26.withIgnoreSurroundingSpaces();
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    java.lang.String var29 = var15.format(var28);
    java.lang.String[] var31 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var32 = var15.withHeader(var31);
    org.apache.commons.csv.CSVFormat var33 = var11.withHeader(var31);
    org.apache.commons.csv.CSVParser var34 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:false Header:[]", var33);
    org.apache.commons.csv.CSVFormat var35 = var33.withIgnoreSurroundingSpaces();
    java.lang.Character var36 = var35.getEscapeCharacter();
    java.lang.Character var37 = var35.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var29.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test282");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    boolean var5 = var4.isCommentMarkerSet();
    java.lang.Character var6 = var4.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var12 = var4.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var14 = var4.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var15 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test283");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    boolean var5 = var4.getIgnoreEmptyLines();
    boolean var6 = var4.getAllowMissingColumnNames();
    java.lang.String[] var7 = var4.getHeader();
    boolean var8 = var4.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var10 = var4.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var12 = var4.withIgnoreSurroundingSpaces(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test284");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var7 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(false);
    java.lang.String[] var10 = var9.getHeader();
    org.apache.commons.csv.CSVFormat var12 = var9.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    boolean var14 = var12.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test285");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getCurrentLineNumber();
    long var8 = var6.getCurrentLineNumber();
    java.util.Map var9 = var6.getHeaderMap();
    long var10 = var6.getRecordNumber();
    java.util.Map var11 = var6.getHeaderMap();
    long var12 = var6.getRecordNumber();
    boolean var13 = var6.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test286");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    boolean var12 = var9.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var9.withEscape('#');
    org.apache.commons.csv.CSVFormat var16 = var9.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var19 = var18.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = var18.withNullString("");
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var24 = var22.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord(false);
    char var27 = var24.getDelimiter();
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var30 = var29.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var32 = var29.withRecordSeparator("hi!");
    boolean var33 = var32.isCommentMarkerSet();
    java.lang.Character var34 = var32.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var36 = var32.withAllowMissingColumnNames(true);
    boolean var37 = var36.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var40 = var39.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var41 = var39.withSkipHeaderRecord();
    java.lang.String var42 = var41.toString();
    org.apache.commons.csv.CSVFormat var44 = var41.withNullString("");
    org.apache.commons.csv.CSVFormat var46 = var44.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var49 = var48.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var50 = var48.withSkipHeaderRecord();
    boolean var51 = var48.isCommentMarkerSet();
    boolean var52 = var48.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var55 = var54.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var57 = var54.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var59 = var54.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var60 = var59.withIgnoreSurroundingSpaces();
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.String var62 = var48.format(var61);
    java.lang.String[] var64 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var65 = var48.withHeader(var64);
    org.apache.commons.csv.CSVFormat var66 = var44.withHeader(var64);
    java.lang.String var67 = var36.format((java.lang.Object[])var64);
    java.lang.String var68 = var24.format((java.lang.Object[])var64);
    org.apache.commons.csv.CSVFormat var69 = var16.withHeaderComments((java.lang.Object[])var64);
    boolean var70 = var5.equals((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var42.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var62.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var67.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var68.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test287");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.getIgnoreEmptyLines();
    java.lang.Character var7 = var3.getEscapeCharacter();
    java.lang.String[] var8 = var3.getHeaderComments();
    boolean var9 = var3.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test288");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker((java.lang.Character)'a');
    java.lang.String[] var11 = var10.getHeader();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    java.lang.String[] var14 = var10.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test289");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var17 = var12.withCommentMarker((java.lang.Character)'a');
    boolean var18 = var10.equals((java.lang.Object)var17);
    org.apache.commons.csv.CSVFormat var20 = var10.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test290");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var8 = var7.withSkipHeaderRecord();
    java.lang.String[] var9 = var8.getHeaderComments();
    org.apache.commons.csv.CSVFormat var11 = var8.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test291");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getCurrentLineNumber();
    long var8 = var6.getCurrentLineNumber();
    var6.close();
    java.util.Iterator var10 = var6.iterator();
    long var11 = var6.getRecordNumber();
    long var12 = var6.getRecordNumber();
    java.util.Iterator var13 = var6.iterator();
    var6.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test292");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    java.lang.Character var5 = var1.getCommentMarker();
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test293");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.Character var4 = var3.getCommentMarker();
    org.apache.commons.csv.CSVFormat var6 = var3.withIgnoreEmptyLines(false);
    boolean var7 = var3.isQuoteCharacterSet();
    java.lang.String[] var8 = var3.getHeader();
    java.lang.Character var9 = var3.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test294");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    java.lang.Character var21 = var18.getCommentMarker();
    java.lang.Character var22 = var18.getCommentMarker();
    org.apache.commons.csv.CSVFormat var23 = var18.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var25 = var23.withRecordSeparator(' ');
    java.lang.String[] var26 = var23.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test295");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreEmptyLines(true);
    boolean var7 = var6.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test296");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var10.withEscape('#');
    boolean var13 = var12.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test297");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var8 = var7.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var7.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var12 = var7.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.String var15 = var1.format(var14);
    java.lang.String var16 = var1.getNullString();
    boolean var17 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var19 = var1.withQuote('a');
    org.apache.commons.csv.CSVFormat var20 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = var1.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var15.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test298");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.Character var3 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    boolean var12 = var9.getAllowMissingColumnNames();
    boolean var13 = var5.equals((java.lang.Object)var9);
    java.lang.Character var14 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var16 = var5.withRecordSeparator("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var20 = var19.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord();
    boolean var22 = var19.isCommentMarkerSet();
    java.lang.Character var23 = var19.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var24 = var19.withSkipHeaderRecord();
    java.lang.Character var25 = var24.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var27 = var24.withIgnoreHeaderCase(false);
    boolean var28 = var16.equals((java.lang.Object)var24);
    char var29 = var24.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == ' ');

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test299");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    boolean var8 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var10 = var5.withDelimiter('a');
    boolean var11 = var10.getIgnoreSurroundingSpaces();
    boolean var12 = var10.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test300");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String var6 = var5.toString();
    org.apache.commons.csv.CSVFormat var7 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var11 = var7.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var13 = var7.withEscape((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var6.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test301");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var11 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var12 = var10.withHeaderComments((java.lang.Object[])var11);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    java.lang.String var25 = var24.toString();
    org.apache.commons.csv.CSVFormat var27 = var24.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var24.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    boolean var33 = var31.isNullStringSet();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var31.withHeader(var35);
    java.lang.String var37 = var29.format((java.lang.Object[])var35);
    java.lang.String var38 = var20.format((java.lang.Object[])var35);
    org.apache.commons.csv.CSVFormat var39 = var14.withHeader(var35);
    org.apache.commons.csv.CSVFormat var41 = var39.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var43 = var39.withRecordSeparator("Delimiter=< > SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var44 = var39.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var46 = var44.withIgnoreSurroundingSpaces(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var25.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test302");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = var10.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var19 = var10.withRecordSeparator(' ');
    java.lang.String var20 = var19.toString();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var23 = var22.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var25 = var22.withRecordSeparator("hi!");
    boolean var26 = var25.isCommentMarkerSet();
    java.lang.Character var27 = var25.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var29 = var25.withAllowMissingColumnNames(true);
    boolean var30 = var29.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var33 = var32.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord();
    java.lang.String var35 = var34.toString();
    org.apache.commons.csv.CSVFormat var37 = var34.withNullString("");
    org.apache.commons.csv.CSVFormat var39 = var37.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var42 = var41.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord();
    boolean var44 = var41.isCommentMarkerSet();
    boolean var45 = var41.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var48 = var47.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var50 = var47.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var52 = var47.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var53 = var52.withIgnoreSurroundingSpaces();
    java.lang.Object[] var54 = new java.lang.Object[] { var52};
    java.lang.String var55 = var41.format(var54);
    java.lang.String[] var57 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var58 = var41.withHeader(var57);
    org.apache.commons.csv.CSVFormat var59 = var37.withHeader(var57);
    java.lang.String var60 = var29.format((java.lang.Object[])var57);
    java.lang.String var61 = var19.format((java.lang.Object[])var57);
    org.apache.commons.csv.CSVFormat var62 = var6.withHeader(var57);
    boolean var63 = var62.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var20.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var35.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var55.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var60.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var61.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test303");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    boolean var4 = var2.isNullStringSet();
    boolean var5 = var2.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var2.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false> SkipHeaderRecord:true", var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test304");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote((java.lang.Character)'a');
    java.lang.String[] var9 = var6.getHeader();
    org.apache.commons.csv.CSVFormat var11 = var6.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var12 = var6.withSkipHeaderRecord();
    java.lang.Character var13 = var12.getCommentMarker();
    org.apache.commons.csv.CSVFormat var15 = var12.withRecordSeparator('#');
    boolean var16 = var15.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test305");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var12 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var13 = var11.withHeaderComments((java.lang.Object[])var12);
    org.apache.commons.csv.CSVFormat var15 = var11.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = var19.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord();
    java.lang.String var26 = var25.toString();
    org.apache.commons.csv.CSVFormat var28 = var25.withNullString("");
    org.apache.commons.csv.CSVFormat var30 = var25.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var33 = var32.withAllowMissingColumnNames();
    boolean var34 = var32.isNullStringSet();
    java.lang.String[] var36 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var37 = var32.withHeader(var36);
    java.lang.String var38 = var30.format((java.lang.Object[])var36);
    java.lang.String var39 = var21.format((java.lang.Object[])var36);
    org.apache.commons.csv.CSVFormat var40 = var15.withHeader(var36);
    org.apache.commons.csv.CSVFormat var42 = var40.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var45 = var44.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var47 = var44.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var49 = var44.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var50 = var49.getCommentMarker();
    org.apache.commons.csv.QuoteMode var51 = var49.getQuoteMode();
    org.apache.commons.csv.CSVFormat var53 = var49.withEscape((java.lang.Character)'a');
    boolean var54 = var53.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var57 = var56.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord();
    boolean var59 = var56.isCommentMarkerSet();
    boolean var60 = var56.getIgnoreHeaderCase();
    java.lang.String[] var62 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var63 = var56.withHeader(var62);
    org.apache.commons.csv.CSVFormat var64 = var53.withHeaderComments((java.lang.Object[])var62);
    org.apache.commons.csv.CSVFormat var65 = var42.withHeader(var62);
    org.apache.commons.csv.CSVParser var66 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:false Header:[Delimiter=< > SkipHeaderRecord:true]", var42);
    java.util.List var67 = var66.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var26.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test306");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreSurroundingSpaces();
    java.lang.Character var3 = var1.getCommentMarker();
    java.lang.String var4 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    boolean var9 = var7.isNullStringSet();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var7.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord();
    boolean var17 = var14.isCommentMarkerSet();
    boolean var18 = var14.getIgnoreHeaderCase();
    java.lang.String[] var20 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var21 = var14.withHeader(var20);
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord();
    boolean var26 = var23.isCommentMarkerSet();
    boolean var27 = var23.getIgnoreHeaderCase();
    java.lang.String[] var29 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var30 = var23.withHeader(var29);
    org.apache.commons.csv.CSVFormat var31 = var14.withHeader(var29);
    java.lang.String var32 = var12.format((java.lang.Object[])var29);
    org.apache.commons.csv.CSVFormat var33 = var5.withHeader(var29);
    org.apache.commons.csv.CSVFormat var35 = var5.withIgnoreSurroundingSpaces(false);
    java.lang.Character var36 = var35.getQuoteCharacter();
    boolean var37 = var35.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var32.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test307");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    java.lang.Character var21 = var18.getCommentMarker();
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreEmptyLines();
    java.lang.String[] var23 = var18.getHeader();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var26 = var25.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var28 = var25.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var25.withIgnoreEmptyLines();
    java.lang.String[] var30 = var29.getHeaderComments();
    org.apache.commons.csv.CSVFormat var32 = var29.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var34 = var29.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var35 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var36 = var34.withHeaderComments((java.lang.Object[])var35);
    org.apache.commons.csv.CSVFormat var38 = var34.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var41 = var40.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var42 = var40.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var44 = var42.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var48 = var46.withSkipHeaderRecord();
    java.lang.String var49 = var48.toString();
    org.apache.commons.csv.CSVFormat var51 = var48.withNullString("");
    org.apache.commons.csv.CSVFormat var53 = var48.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var55 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var56 = var55.withAllowMissingColumnNames();
    boolean var57 = var55.isNullStringSet();
    java.lang.String[] var59 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var60 = var55.withHeader(var59);
    java.lang.String var61 = var53.format((java.lang.Object[])var59);
    java.lang.String var62 = var44.format((java.lang.Object[])var59);
    org.apache.commons.csv.CSVFormat var63 = var38.withHeader(var59);
    org.apache.commons.csv.CSVFormat var65 = var63.withIgnoreSurroundingSpaces(true);
    java.lang.Object[] var66 = new java.lang.Object[] { var63};
    java.lang.String var67 = var18.format(var66);
    org.apache.commons.csv.CSVFormat var69 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var70 = var69.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var71 = var69.withSkipHeaderRecord();
    boolean var72 = var69.isCommentMarkerSet();
    java.lang.Character var73 = var69.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var74 = var69.withSkipHeaderRecord();
    java.lang.Character var75 = var74.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var77 = var74.withIgnoreEmptyLines(true);
    boolean var78 = var77.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var80 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var81 = var80.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var82 = var80.withSkipHeaderRecord();
    boolean var83 = var80.isCommentMarkerSet();
    boolean var84 = var80.getIgnoreHeaderCase();
    java.lang.String[] var86 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var87 = var80.withHeader(var86);
    org.apache.commons.csv.CSVFormat var88 = var77.withHeader(var86);
    java.lang.String var89 = var18.format((java.lang.Object[])var86);
    java.lang.String var90 = var18.toString();
    org.apache.commons.csv.CSVFormat var92 = var18.withNullString("Delimiter=< > SkipHeaderRecord:false Header:[Default Excel MySQL RFC4180 TDF]");
    java.lang.String[] var93 = var18.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var49.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + ""+ "'", var61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "Delimiter=< > SkipHeaderRecord:trueDelimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false Header:[]"+ "'", var67.equals("Delimiter=< > SkipHeaderRecord:trueDelimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "Delimiter=< > SkipHeaderRecord:trueDelimiter=< > SkipHeaderRecord:true"+ "'", var89.equals("Delimiter=< > SkipHeaderRecord:trueDelimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[Delimiter=< > SkipHeaderRecord:true]"+ "'", var90.equals("Delimiter=< > SkipHeaderRecord:false Header:[Delimiter=< > SkipHeaderRecord:true]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test308");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withIgnoreSurroundingSpaces();
    java.lang.Character var13 = var11.getCommentMarker();
    java.lang.String var14 = var11.getNullString();
    org.apache.commons.csv.CSVFormat var15 = var11.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    boolean var19 = var17.isNullStringSet();
    java.lang.String[] var21 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var22 = var17.withHeader(var21);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord();
    boolean var27 = var24.isCommentMarkerSet();
    boolean var28 = var24.getIgnoreHeaderCase();
    java.lang.String[] var30 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var31 = var24.withHeader(var30);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord();
    boolean var36 = var33.isCommentMarkerSet();
    boolean var37 = var33.getIgnoreHeaderCase();
    java.lang.String[] var39 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var40 = var33.withHeader(var39);
    org.apache.commons.csv.CSVFormat var41 = var24.withHeader(var39);
    java.lang.String var42 = var22.format((java.lang.Object[])var39);
    org.apache.commons.csv.CSVFormat var43 = var15.withHeader(var39);
    java.lang.String var44 = var8.format((java.lang.Object[])var39);
    java.lang.String[] var45 = var8.getHeaderComments();
    org.apache.commons.csv.CSVFormat var47 = var8.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:true");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var42.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var44.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test309");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    boolean var11 = var8.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var13 = var8.withRecordSeparator('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test310");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var7 = var6.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var9 = var6.withNullString("");
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreEmptyLines();
    java.lang.String[] var11 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var15 = var10.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var16 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var17 = var15.withHeaderComments((java.lang.Object[])var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeaderComments((java.lang.Object[])var16);
    java.lang.String[] var19 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var21 = var1.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var23 = var1.withIgnoreEmptyLines(false);
    java.lang.String var24 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var26 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var28 = var26.withNullString("Delimiter=< > SurroundingSpaces:ignored SkipHeaderRecord:true Header:[]");
    org.apache.commons.csv.CSVFormat var30 = var26.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var33 = var32.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var32.withCommentMarker((java.lang.Character)'a');
    boolean var36 = var35.getIgnoreEmptyLines();
    boolean var37 = var35.getAllowMissingColumnNames();
    java.lang.String[] var38 = var35.getHeader();
    org.apache.commons.csv.CSVFormat var39 = var35.withAllowMissingColumnNames();
    boolean var40 = var30.equals((java.lang.Object)var35);
    org.apache.commons.csv.CSVFormat var42 = var35.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test311");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    java.lang.String[] var17 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var16.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var22 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var23 = var21.withHeaderComments((java.lang.Object[])var22);
    boolean var24 = var10.equals((java.lang.Object)var23);
    org.apache.commons.csv.CSVFormat var26 = var23.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var28 = var23.withRecordSeparator("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    java.lang.String var29 = var28.getRecordSeparator();
    java.lang.Character var30 = var28.getCommentMarker();
    char var31 = var28.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var29.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == ' ');

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test312");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = var10.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var18 = var6.equals((java.lang.Object)var17);
    java.lang.String[] var19 = var17.getHeaderComments();
    org.apache.commons.csv.CSVFormat var20 = var17.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test313");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    java.lang.String var5 = var4.toString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("");
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var15 = var13.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var18 = var17.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = var17.withCommentMarker('#');
    boolean var21 = var20.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord();
    boolean var26 = var23.isCommentMarkerSet();
    boolean var27 = var23.getIgnoreHeaderCase();
    java.lang.String[] var29 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var30 = var23.withHeader(var29);
    org.apache.commons.csv.CSVFormat var31 = var20.withHeaderComments((java.lang.Object[])var29);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var34 = var33.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var36 = var33.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var38 = var33.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var41 = var40.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var43 = var40.withNullString("");
    org.apache.commons.csv.CSVFormat var44 = var40.withIgnoreEmptyLines();
    java.lang.String var45 = var44.toString();
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var48 = var47.withAllowMissingColumnNames();
    boolean var49 = var47.isNullStringSet();
    java.lang.String[] var51 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var52 = var47.withHeader(var51);
    org.apache.commons.csv.CSVFormat var53 = var44.withHeader(var51);
    org.apache.commons.csv.CSVFormat var54 = var33.withHeader(var51);
    java.lang.String var55 = var54.toString();
    java.lang.String[] var56 = var54.getHeader();
    org.apache.commons.csv.CSVFormat var57 = var31.withHeader(var56);
    org.apache.commons.csv.CSVFormat var58 = var15.withHeader(var56);
    org.apache.commons.csv.CSVParser var59 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<> SkipHeaderRecord:true", var58);
    java.util.List var60 = var59.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var45.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var55.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test314");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.String[] var3 = var1.getHeaderComments();
    java.lang.String[] var4 = var1.getHeader();
    boolean var5 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var8.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("", var11);
    long var13 = var12.getCurrentLineNumber();
    long var14 = var12.getCurrentLineNumber();
    var12.close();
    java.util.Iterator var16 = var12.iterator();
    long var17 = var12.getRecordNumber();
    boolean var18 = var1.equals((java.lang.Object)var12);
    java.util.Iterator var19 = var12.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test315");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord();
    java.lang.String var18 = var17.toString();
    org.apache.commons.csv.CSVFormat var20 = var17.withNullString("");
    org.apache.commons.csv.CSVFormat var22 = var17.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    boolean var26 = var24.isNullStringSet();
    java.lang.String[] var28 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var29 = var24.withHeader(var28);
    java.lang.String var30 = var22.format((java.lang.Object[])var28);
    java.lang.String var31 = var13.format((java.lang.Object[])var28);
    org.apache.commons.csv.CSVFormat var32 = var5.withHeader(var28);
    org.apache.commons.csv.CSVFormat var33 = var32.withSkipHeaderRecord();
    boolean var34 = var33.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var18.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test316");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var8 = var7.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var7.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var12 = var7.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    java.lang.Object[] var14 = new java.lang.Object[] { var12};
    java.lang.String var15 = var1.format(var14);
    java.lang.String[] var17 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var17);
    boolean var19 = var18.isNullStringSet();
    org.apache.commons.csv.CSVFormat var21 = var18.withNullString("DefaultaExcelaMySQLaRFC4180aTDF");
    boolean var22 = var21.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var15.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test317");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var10 = var8.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var12 = var8.withRecordSeparator('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test318");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = var10.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var18 = var6.equals((java.lang.Object)var17);
    java.lang.String[] var19 = var17.getHeaderComments();
    java.lang.String[] var20 = var17.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test319");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    boolean var11 = var8.isCommentMarkerSet();
    boolean var12 = var8.getIgnoreHeaderCase();
    java.lang.String[] var14 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var15 = var8.withHeader(var14);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    boolean var20 = var17.isCommentMarkerSet();
    boolean var21 = var17.getIgnoreHeaderCase();
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var17.withHeader(var23);
    org.apache.commons.csv.CSVFormat var25 = var8.withHeader(var23);
    java.lang.String var26 = var6.format((java.lang.Object[])var23);
    org.apache.commons.csv.CSVFormat var28 = var6.withQuote('4');
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var31 = var30.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var33 = var30.withNullString("");
    org.apache.commons.csv.CSVFormat var34 = var30.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var36 = var34.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withQuote(' ');
    boolean var39 = var38.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var40 = var38.withAllowMissingColumnNames();
    boolean var41 = var6.equals((java.lang.Object)var38);
    org.apache.commons.csv.CSVFormat var43 = var38.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var45 = var43.withQuote((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var26.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test320");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    boolean var7 = var6.getIgnoreEmptyLines();
    boolean var8 = var6.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test321");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var3.withRecordSeparator(' ');
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = var12.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker('4');
    char var18 = var15.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var13.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 'a');

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test322");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    boolean var9 = var5.equals((java.lang.Object)10.0f);
    java.lang.Character var10 = var5.getEscapeCharacter();
    boolean var11 = var5.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test323");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(false);
    boolean var10 = var6.getIgnoreSurroundingSpaces();
    boolean var11 = var6.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test324");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(false);
    java.lang.String var10 = var9.toString();
    java.lang.Character var11 = var9.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var13 = var9.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var15 = var9.withEscape('#');
    boolean var16 = var9.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test325");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var3.withIgnoreEmptyLines();
    boolean var8 = var7.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test326");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    java.lang.String[] var17 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var16.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var23 = var21.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var25 = var21.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var27 = var25.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var31 = var30.isCommentMarkerSet();
    boolean var32 = var30.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var33 = org.apache.commons.csv.CSVParser.parse("", var30);
    boolean var34 = var30.getSkipHeaderRecord();
    java.lang.Character var35 = var30.getEscapeCharacter();
    char var36 = var30.getDelimiter();
    org.apache.commons.csv.CSVFormat var38 = var30.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var41 = var40.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var43 = var40.withNullString("");
    org.apache.commons.csv.CSVFormat var44 = var40.withIgnoreEmptyLines();
    java.lang.String[] var45 = var44.getHeaderComments();
    org.apache.commons.csv.CSVFormat var47 = var44.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var49 = var44.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var50 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var51 = var49.withHeaderComments((java.lang.Object[])var50);
    org.apache.commons.csv.CSVFormat var53 = var49.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var55 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var56 = var55.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var57 = var55.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var59 = var57.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var61 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var62 = var61.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var63 = var61.withSkipHeaderRecord();
    java.lang.String var64 = var63.toString();
    org.apache.commons.csv.CSVFormat var66 = var63.withNullString("");
    org.apache.commons.csv.CSVFormat var68 = var63.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var70 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var71 = var70.withAllowMissingColumnNames();
    boolean var72 = var70.isNullStringSet();
    java.lang.String[] var74 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var75 = var70.withHeader(var74);
    java.lang.String var76 = var68.format((java.lang.Object[])var74);
    java.lang.String var77 = var59.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var78 = var53.withHeader(var74);
    org.apache.commons.csv.CSVFormat var79 = var38.withHeader(var74);
    java.lang.String var80 = var27.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var81 = var10.withHeaderComments((java.lang.Object[])var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var64.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + ""+ "'", var77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "4"+ "'", var80.equals("4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test327");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=< > QuoteChar=<#> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test328");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    java.lang.Character var6 = var1.getQuoteCharacter();
    boolean var7 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var10 = var9.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var12 = var9.withNullString("");
    org.apache.commons.csv.CSVFormat var13 = var9.withIgnoreEmptyLines();
    java.lang.String[] var14 = var13.getHeaderComments();
    org.apache.commons.csv.CSVFormat var16 = var13.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var18 = var13.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var19 = var18.getQuoteMode();
    org.apache.commons.csv.CSVFormat var21 = var18.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var22 = var21.withAllowMissingColumnNames();
    boolean var23 = var1.equals((java.lang.Object)var22);
    boolean var24 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var26 = var1.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var28 = var26.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test329");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var7 = var2.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var7.withIgnoreSurroundingSpaces();
    boolean var9 = var8.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("hi!", var8);
    java.util.Map var11 = var10.getHeaderMap();
    java.util.List var12 = var10.getRecords();
    long var13 = var10.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1L);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test330");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var8.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var8.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var15 = var13.withQuote('#');
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var18 = var17.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = var17.withRecordSeparator("hi!");
    boolean var21 = var20.isCommentMarkerSet();
    java.lang.String[] var22 = var20.getHeader();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withIgnoreSurroundingSpaces();
    java.lang.Character var26 = var24.getCommentMarker();
    java.lang.String var27 = var24.getNullString();
    org.apache.commons.csv.CSVFormat var28 = var24.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    boolean var32 = var30.isNullStringSet();
    java.lang.String[] var34 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var35 = var30.withHeader(var34);
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var38 = var37.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var39 = var37.withSkipHeaderRecord();
    boolean var40 = var37.isCommentMarkerSet();
    boolean var41 = var37.getIgnoreHeaderCase();
    java.lang.String[] var43 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var44 = var37.withHeader(var43);
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var48 = var46.withSkipHeaderRecord();
    boolean var49 = var46.isCommentMarkerSet();
    boolean var50 = var46.getIgnoreHeaderCase();
    java.lang.String[] var52 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var53 = var46.withHeader(var52);
    org.apache.commons.csv.CSVFormat var54 = var37.withHeader(var52);
    java.lang.String var55 = var35.format((java.lang.Object[])var52);
    org.apache.commons.csv.CSVFormat var56 = var28.withHeader(var52);
    java.lang.String var57 = var20.format((java.lang.Object[])var52);
    org.apache.commons.csv.CSVFormat var58 = var15.withHeader(var52);
    org.apache.commons.csv.CSVFormat var59 = var4.withHeaderComments((java.lang.Object[])var52);
    java.lang.String var60 = var59.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var55.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "Delimiter=< > SkipHeaderRecord:truehi!"+ "'", var57.equals("Delimiter=< > SkipHeaderRecord:truehi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test331");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.Character var3 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    boolean var12 = var9.getAllowMissingColumnNames();
    boolean var13 = var5.equals((java.lang.Object)var9);
    java.lang.Character var14 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var16 = var5.withRecordSeparator("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord(false);
    java.lang.String var20 = var17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=< > RecordSeparator=<Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false> SkipHeaderRecord:false"+ "'", var20.equals("Delimiter=< > RecordSeparator=<Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false> SkipHeaderRecord:false"));

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test332");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var9 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var8.withNullString("");
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreEmptyLines();
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    boolean var17 = var15.isNullStringSet();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var15.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var12.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = var1.withHeader(var19);
    org.apache.commons.csv.CSVFormat var23 = var22.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var24 = var22.withIgnoreEmptyLines();
    boolean var25 = var24.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var27 = var24.withAllowMissingColumnNames(true);
    char var28 = var27.getDelimiter();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    boolean var30 = var29.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var13.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test333");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var1.toString();
    java.lang.String[] var5 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var7 = var1.withRecordSeparator("Default Excel MySQL RFC4180 TDFhi!");
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var1.withCommentMarker((java.lang.Character)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:false"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test334");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=< > SkipHeaderRecord:false Header:[Default Excel MySQL RFC4180 TDF]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test335");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var17 = var12.withCommentMarker((java.lang.Character)'a');
    boolean var18 = var10.equals((java.lang.Object)var17);
    org.apache.commons.csv.QuoteMode var19 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var21 = var10.withEscape('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test336");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    java.lang.Character var21 = var18.getCommentMarker();
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreEmptyLines();
    java.lang.String[] var23 = var18.getHeader();
    org.apache.commons.csv.CSVFormat var24 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.QuoteMode var25 = var24.getQuoteMode();
    boolean var26 = var24.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test337");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=< > Escape=<a> SurroundingSpaces:ignored SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test338");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.QuoteMode var6 = var1.getQuoteMode();
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var7.withDelimiter('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test339");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    java.lang.String[] var5 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var7 = var1.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    boolean var12 = var9.isCommentMarkerSet();
    boolean var13 = var9.getIgnoreHeaderCase();
    java.lang.String[] var15 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var16 = var9.withHeader(var15);
    org.apache.commons.csv.CSVFormat var17 = var1.withHeader(var15);
    org.apache.commons.csv.CSVFormat var19 = var1.withIgnoreEmptyLines(true);
    java.lang.String var20 = var1.toString();
    boolean var21 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var23 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String var24 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=< > SkipHeaderRecord:false"+ "'", var20.equals("Delimiter=< > SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Delimiter=< > SkipHeaderRecord:false"+ "'", var24.equals("Delimiter=< > SkipHeaderRecord:false"));

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test340");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var17 = var10.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var18 = var6.equals((java.lang.Object)var17);
    org.apache.commons.csv.CSVFormat var20 = var6.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var22 = var6.withEscape('#');
    org.apache.commons.csv.CSVFormat var23 = var22.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test341");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    java.lang.Character var6 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test342");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var10 = var8.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var12 = var8.withCommentMarker('#');
    java.lang.Character var13 = var12.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 'a'+ "'", var13.equals('a'));

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test343");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withAllowMissingColumnNames(true);
    boolean var7 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var4.withEscape('#');
    org.apache.commons.csv.CSVFormat var11 = var4.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = var13.withNullString("");
    org.apache.commons.csv.CSVFormat var17 = var13.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord(false);
    char var22 = var19.getDelimiter();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var25 = var24.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var27 = var24.withRecordSeparator("hi!");
    boolean var28 = var27.isCommentMarkerSet();
    java.lang.Character var29 = var27.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var31 = var27.withAllowMissingColumnNames(true);
    boolean var32 = var31.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var35 = var34.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var36 = var34.withSkipHeaderRecord();
    java.lang.String var37 = var36.toString();
    org.apache.commons.csv.CSVFormat var39 = var36.withNullString("");
    org.apache.commons.csv.CSVFormat var41 = var39.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var44 = var43.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var45 = var43.withSkipHeaderRecord();
    boolean var46 = var43.isCommentMarkerSet();
    boolean var47 = var43.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var50 = var49.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var52 = var49.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var54 = var49.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var55 = var54.withIgnoreSurroundingSpaces();
    java.lang.Object[] var56 = new java.lang.Object[] { var54};
    java.lang.String var57 = var43.format(var56);
    java.lang.String[] var59 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var60 = var43.withHeader(var59);
    org.apache.commons.csv.CSVFormat var61 = var39.withHeader(var59);
    java.lang.String var62 = var31.format((java.lang.Object[])var59);
    java.lang.String var63 = var19.format((java.lang.Object[])var59);
    org.apache.commons.csv.CSVFormat var64 = var11.withHeaderComments((java.lang.Object[])var59);
    org.apache.commons.csv.CSVFormat var66 = var64.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var68 = var64.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVParser var69 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:true", var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var37.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var57.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var62.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var63.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test344");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var16 = var14.withCommentMarker((java.lang.Character)'4');
    java.lang.Character var17 = var16.getQuoteCharacter();
    boolean var18 = var16.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var21 = var20.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord();
    java.lang.String var23 = var22.toString();
    java.lang.String[] var24 = var22.getHeader();
    org.apache.commons.csv.CSVFormat var25 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    java.lang.String var30 = var29.toString();
    org.apache.commons.csv.CSVFormat var32 = var29.withNullString("");
    org.apache.commons.csv.CSVFormat var34 = var32.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var37 = var36.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord();
    boolean var39 = var36.isCommentMarkerSet();
    boolean var40 = var36.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var43 = var42.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var45 = var42.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var47 = var42.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var48 = var47.withIgnoreSurroundingSpaces();
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    java.lang.String var50 = var36.format(var49);
    java.lang.String[] var52 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var53 = var36.withHeader(var52);
    org.apache.commons.csv.CSVFormat var54 = var32.withHeader(var52);
    java.lang.String var55 = var25.format((java.lang.Object[])var52);
    org.apache.commons.csv.CSVFormat var56 = var16.withHeader(var52);
    boolean var57 = var16.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var59 = var16.withNullString("DefaultaExcelaMySQLaRFC4180aTDF");
    org.apache.commons.csv.CSVParser var60 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:false", var16);
    java.util.Map var61 = var60.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var23.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var30.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var50.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var55.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test345");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    boolean var5 = var2.isCommentMarkerSet();
    boolean var6 = var2.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var8 = var2.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > CommentStart=<4> RecordSeparator=<Default Excel MySQL RFC4180 TDF> EmptyLines:ignored SkipHeaderRecord:true", var8);
    boolean var10 = var8.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test346");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var6 = var4.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var8 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var12 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreSurroundingSpaces(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test347");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var10.withQuote((java.lang.Character)'#');
    java.lang.String var13 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > QuoteChar=<#> CommentStart=<4> SkipHeaderRecord:true"+ "'", var13.equals("Delimiter=< > QuoteChar=<#> CommentStart=<4> SkipHeaderRecord:true"));

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test348");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord();
    boolean var17 = var14.isCommentMarkerSet();
    boolean var18 = var14.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var21 = var20.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var23 = var20.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var25 = var20.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var26 = var25.withIgnoreSurroundingSpaces();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.String var28 = var14.format(var27);
    java.lang.String[] var30 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var31 = var14.withHeader(var30);
    org.apache.commons.csv.CSVFormat var32 = var10.withHeader(var30);
    org.apache.commons.csv.CSVFormat var34 = var32.withEscape('4');
    org.apache.commons.csv.QuoteMode var35 = var34.getQuoteMode();
    boolean var36 = var34.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var28.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test349");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    java.lang.String[] var17 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var16.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var22 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var23 = var21.withHeaderComments((java.lang.Object[])var22);
    boolean var24 = var10.equals((java.lang.Object)var23);
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = var23.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test350");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote(' ');
    boolean var10 = var9.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var12 = var9.withIgnoreEmptyLines(false);
    boolean var13 = var9.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test351");


    org.apache.commons.csv.CSVFormat var3 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var4 = var3.getDelimiter();
    java.lang.String var5 = var3.getNullString();
    boolean var6 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var7 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var9 = var3.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false", var9);
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var11.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:true", var11);
    var14.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test352");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var14 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var13.withSkipHeaderRecord(true);
    boolean var17 = var10.equals((java.lang.Object)true);
    org.apache.commons.csv.CSVFormat var19 = var10.withEscape((java.lang.Character)'a');
    java.lang.String[] var20 = var19.getHeader();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var23 = var22.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var25 = var22.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var27 = var22.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var30 = var29.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var32 = var29.withNullString("");
    org.apache.commons.csv.CSVFormat var33 = var29.withIgnoreEmptyLines();
    java.lang.String var34 = var33.toString();
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var37 = var36.withAllowMissingColumnNames();
    boolean var38 = var36.isNullStringSet();
    java.lang.String[] var40 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var41 = var36.withHeader(var40);
    org.apache.commons.csv.CSVFormat var42 = var33.withHeader(var40);
    org.apache.commons.csv.CSVFormat var43 = var22.withHeader(var40);
    org.apache.commons.csv.CSVFormat var44 = var43.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var45 = var43.withIgnoreEmptyLines();
    boolean var46 = var45.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var48 = var45.withAllowMissingColumnNames(true);
    boolean var49 = var19.equals((java.lang.Object)var48);
    boolean var50 = var48.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var34.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test353");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    boolean var5 = var2.isCommentMarkerSet();
    boolean var6 = var2.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var8 = var2.withAllowMissingColumnNames(false);
    java.lang.String[] var9 = var2.getHeader();
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:trueDelimiter=< > SkipHeaderRecord:true", var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test354");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    boolean var5 = var2.isCommentMarkerSet();
    java.lang.Character var6 = var2.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var7 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    java.lang.String var12 = var11.toString();
    org.apache.commons.csv.CSVFormat var14 = var11.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var11.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var18 = var11.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var19 = var7.equals((java.lang.Object)var18);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var21 = org.apache.commons.csv.CSVParser.parse("Default Excel MySQL RFC4180 TDF#", var18);
    org.apache.commons.csv.CSVFormat var23 = var18.withQuote((java.lang.Character)'a');
    boolean var24 = var18.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var12.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test355");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var6.withRecordSeparator('4');
    boolean var9 = var8.isQuoteCharacterSet();
    java.lang.String var10 = var8.toString();
    boolean var11 = var8.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var13 = var8.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var15 = var8.withRecordSeparator("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > RecordSeparator=<4> SkipHeaderRecord:false"+ "'", var10.equals("Delimiter=< > RecordSeparator=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test356");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = var6.withNullString("Delimiter=< > RecordSeparator=<#> EmptyLines:ignored SkipHeaderRecord:false");
    boolean var9 = var8.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test357");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var9 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var8.withNullString("");
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreEmptyLines();
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    boolean var17 = var15.isNullStringSet();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var15.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var12.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = var1.withHeader(var19);
    java.lang.String var23 = var22.toString();
    boolean var24 = var22.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var13.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var23.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test358");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var24 = var18.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    boolean var27 = var26.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test359");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getRecordNumber();
    long var8 = var6.getRecordNumber();
    var6.close();
    boolean var10 = var6.isClosed();
    var6.close();
    boolean var12 = var6.isClosed();
    long var13 = var6.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test360");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getRecordNumber();
    java.util.List var8 = var6.getRecords();
    java.util.Map var9 = var6.getHeaderMap();
    boolean var10 = var6.isClosed();
    var6.close();
    long var12 = var6.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test361");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('4');
    boolean var8 = var5.getAllowMissingColumnNames();
    boolean var9 = var5.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var5.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withDelimiter(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test362");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var1.withQuote('4');
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var11 = var10.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("");
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreEmptyLines();
    java.lang.String[] var15 = var14.getHeaderComments();
    org.apache.commons.csv.CSVFormat var17 = var14.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var19 = var17.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.QuoteMode var20 = var17.getQuoteMode();
    org.apache.commons.csv.CSVFormat var22 = var17.withQuote('4');
    org.apache.commons.csv.CSVFormat var24 = var17.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var27 = var26.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var28 = var26.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var30 = var28.withAllowMissingColumnNames(true);
    boolean var31 = var28.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var33 = var28.withEscape('#');
    org.apache.commons.csv.CSVFormat var35 = var28.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var38 = var37.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var40 = var37.withNullString("");
    org.apache.commons.csv.CSVFormat var41 = var37.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var43 = var41.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var45 = var43.withSkipHeaderRecord(false);
    char var46 = var43.getDelimiter();
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var49 = var48.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var51 = var48.withRecordSeparator("hi!");
    boolean var52 = var51.isCommentMarkerSet();
    java.lang.Character var53 = var51.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var55 = var51.withAllowMissingColumnNames(true);
    boolean var56 = var55.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var58 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var59 = var58.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var60 = var58.withSkipHeaderRecord();
    java.lang.String var61 = var60.toString();
    org.apache.commons.csv.CSVFormat var63 = var60.withNullString("");
    org.apache.commons.csv.CSVFormat var65 = var63.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var68 = var67.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var69 = var67.withSkipHeaderRecord();
    boolean var70 = var67.isCommentMarkerSet();
    boolean var71 = var67.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var73 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var74 = var73.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var76 = var73.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var78 = var73.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var79 = var78.withIgnoreSurroundingSpaces();
    java.lang.Object[] var80 = new java.lang.Object[] { var78};
    java.lang.String var81 = var67.format(var80);
    java.lang.String[] var83 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var84 = var67.withHeader(var83);
    org.apache.commons.csv.CSVFormat var85 = var63.withHeader(var83);
    java.lang.String var86 = var55.format((java.lang.Object[])var83);
    java.lang.String var87 = var43.format((java.lang.Object[])var83);
    org.apache.commons.csv.CSVFormat var88 = var35.withHeaderComments((java.lang.Object[])var83);
    org.apache.commons.csv.CSVFormat var89 = var24.withHeaderComments((java.lang.Object[])var83);
    org.apache.commons.csv.CSVFormat var90 = var1.withHeader(var83);
    java.lang.Character var91 = var90.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var61.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var81.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var86.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var87.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test363");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    java.lang.String var5 = var4.getNullString();
    boolean var6 = var4.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var8 = var4.withCommentMarker((java.lang.Character)'#');
    java.lang.String[] var9 = var8.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test364");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    boolean var7 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var9 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var11 = var9.withEscape((java.lang.Character)'#');
    boolean var12 = var11.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var14 = var11.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    boolean var18 = var16.isNullStringSet();
    java.lang.Character var19 = var16.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var22 = var21.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var24 = var21.withNullString("");
    org.apache.commons.csv.CSVFormat var25 = var21.withIgnoreEmptyLines();
    java.lang.String[] var26 = var25.getHeaderComments();
    org.apache.commons.csv.CSVFormat var28 = var25.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var30 = var25.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var32 = var30.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var35 = var34.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var36 = var34.withSkipHeaderRecord();
    boolean var37 = var34.isCommentMarkerSet();
    boolean var38 = var34.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var41 = var40.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var43 = var40.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var45 = var40.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var46 = var45.withIgnoreSurroundingSpaces();
    java.lang.Object[] var47 = new java.lang.Object[] { var45};
    java.lang.String var48 = var34.format(var47);
    java.lang.String[] var50 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var51 = var34.withHeader(var50);
    org.apache.commons.csv.CSVFormat var52 = var30.withHeader(var50);
    org.apache.commons.csv.CSVFormat var53 = var16.withHeaderComments((java.lang.Object[])var50);
    org.apache.commons.csv.CSVFormat var54 = var11.withHeader(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var48.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test365");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=< > RecordSeparator=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test366");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withIgnoreSurroundingSpaces(true);
    boolean var5 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var9 = var7.withAllowMissingColumnNames(true);
    java.lang.String var10 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:false"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:false"));

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test367");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var11 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var12 = var10.withHeaderComments((java.lang.Object[])var11);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    java.lang.String var25 = var24.toString();
    org.apache.commons.csv.CSVFormat var27 = var24.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var24.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    boolean var33 = var31.isNullStringSet();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var31.withHeader(var35);
    java.lang.String var37 = var29.format((java.lang.Object[])var35);
    java.lang.String var38 = var20.format((java.lang.Object[])var35);
    org.apache.commons.csv.CSVFormat var39 = var14.withHeader(var35);
    org.apache.commons.csv.CSVFormat var41 = var39.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var43 = var39.withRecordSeparator('a');
    boolean var44 = var39.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var48 = var46.withSkipHeaderRecord();
    boolean var49 = var46.isCommentMarkerSet();
    java.lang.Character var50 = var46.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var51 = var46.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var53 = var51.withRecordSeparator('4');
    boolean var54 = var53.isQuoteCharacterSet();
    org.apache.commons.csv.QuoteMode var55 = var53.getQuoteMode();
    org.apache.commons.csv.CSVFormat var56 = var53.withSkipHeaderRecord();
    boolean var57 = var39.equals((java.lang.Object)var53);
    org.apache.commons.csv.CSVFormat var59 = var53.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var61 = var59.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var63 = var59.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var25.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test368");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Map var8 = var6.getHeaderMap();
    long var9 = var6.getRecordNumber();
    boolean var10 = var6.isClosed();
    long var11 = var6.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test369");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    boolean var7 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var5.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator("hi!");
    char var12 = var9.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == ' ');

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test370");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var7 = var6.isQuoteCharacterSet();
    java.lang.String[] var8 = var6.getHeader();
    org.apache.commons.csv.CSVFormat var10 = var6.withEscape('a');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    java.lang.String var15 = var14.toString();
    java.lang.String[] var16 = var14.getHeader();
    org.apache.commons.csv.CSVFormat var17 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var20 = var19.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord();
    java.lang.String var22 = var21.toString();
    org.apache.commons.csv.CSVFormat var24 = var21.withNullString("");
    org.apache.commons.csv.CSVFormat var26 = var24.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var29 = var28.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var30 = var28.withSkipHeaderRecord();
    boolean var31 = var28.isCommentMarkerSet();
    boolean var32 = var28.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var35 = var34.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var37 = var34.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var39 = var34.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var40 = var39.withIgnoreSurroundingSpaces();
    java.lang.Object[] var41 = new java.lang.Object[] { var39};
    java.lang.String var42 = var28.format(var41);
    java.lang.String[] var44 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var45 = var28.withHeader(var44);
    org.apache.commons.csv.CSVFormat var46 = var24.withHeader(var44);
    java.lang.String var47 = var17.format((java.lang.Object[])var44);
    org.apache.commons.csv.CSVFormat var48 = var10.withHeader(var44);
    java.lang.Character var49 = var48.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var15.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var22.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var42.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var47.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test371");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=< > RecordSeparator=<Delimiter=< > SkipHeaderRecord:true#> SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test372");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker((java.lang.Character)'4');
    boolean var7 = var6.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    java.lang.String var12 = var11.toString();
    org.apache.commons.csv.CSVFormat var14 = var11.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var11.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var18 = var11.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var20 = var11.withIgnoreSurroundingSpaces(false);
    java.lang.Character var21 = var20.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord();
    java.lang.String var26 = var25.toString();
    java.lang.String[] var27 = var25.getHeader();
    org.apache.commons.csv.CSVFormat var28 = var25.withAllowMissingColumnNames();
    java.lang.String[] var29 = var28.getHeaderComments();
    org.apache.commons.csv.CSVFormat var31 = var28.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord();
    java.lang.String var36 = var35.toString();
    org.apache.commons.csv.CSVFormat var38 = var35.withNullString("");
    org.apache.commons.csv.CSVFormat var40 = var38.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var42 = var40.withQuote('#');
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var45 = var44.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var46 = var44.withSkipHeaderRecord();
    boolean var47 = var44.isCommentMarkerSet();
    boolean var48 = var44.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var51 = var50.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var53 = var50.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var55 = var50.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var56 = var55.withIgnoreSurroundingSpaces();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.String var58 = var44.format(var57);
    java.lang.String var59 = var40.format(var57);
    org.apache.commons.csv.CSVFormat var60 = var31.withHeaderComments(var57);
    java.lang.String var61 = var20.format(var57);
    org.apache.commons.csv.CSVFormat var62 = var6.withHeaderComments(var57);
    boolean var63 = var6.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var12.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var26.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var36.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var58.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var59.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var61.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test373");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var11 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var12 = var10.withHeaderComments((java.lang.Object[])var11);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    java.lang.String var25 = var24.toString();
    org.apache.commons.csv.CSVFormat var27 = var24.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var24.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    boolean var33 = var31.isNullStringSet();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var31.withHeader(var35);
    java.lang.String var37 = var29.format((java.lang.Object[])var35);
    java.lang.String var38 = var20.format((java.lang.Object[])var35);
    org.apache.commons.csv.CSVFormat var39 = var14.withHeader(var35);
    org.apache.commons.csv.CSVFormat var41 = var39.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var43 = var39.withRecordSeparator("Delimiter=< > SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var45 = var43.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var25.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test374");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var8 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var7.withNullString("Delimiter=< > SkipHeaderRecord:false Header:[Delimiter=< > SkipHeaderRecord:true]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test375");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(false);
    java.lang.String var10 = var9.toString();
    java.lang.Character var11 = var9.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var13 = var9.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var15 = var9.withEscape('#');
    boolean var16 = var15.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test376");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    boolean var13 = var11.isNullStringSet();
    java.lang.String[] var15 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var16 = var11.withHeader(var15);
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord();
    boolean var21 = var18.isCommentMarkerSet();
    boolean var22 = var18.getIgnoreHeaderCase();
    java.lang.String[] var24 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var25 = var18.withHeader(var24);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    boolean var30 = var27.isCommentMarkerSet();
    boolean var31 = var27.getIgnoreHeaderCase();
    java.lang.String[] var33 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var34 = var27.withHeader(var33);
    org.apache.commons.csv.CSVFormat var35 = var18.withHeader(var33);
    java.lang.String var36 = var16.format((java.lang.Object[])var33);
    org.apache.commons.csv.CSVFormat var37 = var9.withHeader(var33);
    org.apache.commons.csv.CSVFormat var39 = var9.withNullString("Default Excel MySQL RFC4180 TDF#");
    org.apache.commons.csv.CSVFormat var40 = var39.withIgnoreSurroundingSpaces();
    boolean var41 = var39.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var42 = var39.withIgnoreEmptyLines();
    java.lang.String[] var43 = var42.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var36.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test377");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var14 = var10.withDelimiter('4');
    java.lang.String[] var15 = var10.getHeader();
    org.apache.commons.csv.CSVFormat var17 = var10.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test378");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.isNullStringSet();
    java.lang.Character var7 = var3.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var8 = var3.withAllowMissingColumnNames();
    boolean var9 = var3.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var11 = var3.withRecordSeparator("ALL MINIMAL NON_NUMERIC NONEDelimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var14 = var13.isCommentMarkerSet();
    boolean var15 = var13.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var13.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var19 = var17.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var21 = var19.withNullString("#");
    boolean var22 = var11.equals((java.lang.Object)var21);
    org.apache.commons.csv.CSVFormat var24 = var21.withQuote('#');
    boolean var25 = var21.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var26 = var21.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var28 = var21.withDelimiter(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test379");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var28 = var26.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var32 = var30.withSkipHeaderRecord();
    java.lang.String var33 = var32.toString();
    org.apache.commons.csv.CSVFormat var35 = var32.withNullString("");
    org.apache.commons.csv.CSVFormat var37 = var32.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var40 = var39.withAllowMissingColumnNames();
    boolean var41 = var39.isNullStringSet();
    java.lang.String[] var43 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var44 = var39.withHeader(var43);
    java.lang.String var45 = var37.format((java.lang.Object[])var43);
    java.lang.String var46 = var28.format((java.lang.Object[])var43);
    org.apache.commons.csv.CSVFormat var47 = var18.withHeaderComments((java.lang.Object[])var43);
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var50 = var49.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var52 = var49.withNullString("");
    org.apache.commons.csv.CSVFormat var53 = var49.withIgnoreEmptyLines();
    java.lang.String[] var54 = var53.getHeaderComments();
    org.apache.commons.csv.CSVFormat var56 = var53.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var58 = var56.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var60 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var61 = var60.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var62 = var60.withSkipHeaderRecord();
    boolean var63 = var60.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var65 = var60.withCommentMarker((java.lang.Character)'a');
    boolean var66 = var58.equals((java.lang.Object)var65);
    org.apache.commons.csv.CSVFormat var68 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var70 = var68.withRecordSeparator("#");
    org.apache.commons.csv.CSVFormat var72 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var73 = var72.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var75 = var72.withCommentMarker('#');
    java.lang.String[] var76 = var72.getHeaderComments();
    org.apache.commons.csv.CSVFormat var78 = var72.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var80 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var81 = var80.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var82 = var80.withSkipHeaderRecord();
    boolean var83 = var80.isCommentMarkerSet();
    boolean var84 = var80.getIgnoreHeaderCase();
    java.lang.String[] var86 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var87 = var80.withHeader(var86);
    org.apache.commons.csv.CSVFormat var88 = var72.withHeader(var86);
    java.lang.String var89 = var70.format((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var90 = var65.withHeaderComments((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var91 = var47.withHeader(var86);
    org.apache.commons.csv.CSVFormat var93 = var47.withSkipHeaderRecord(true);
    java.lang.String var94 = var47.toString();
    java.lang.String var95 = var47.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var33.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + ""+ "'", var46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "Delimiter=< > SkipHeaderRecord:true#"+ "'", var89.equals("Delimiter=< > SkipHeaderRecord:true#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "Delimiter=< > SkipHeaderRecord:false HeaderComments:[] Header:[Delimiter=< > SkipHeaderRecord:true]"+ "'", var94.equals("Delimiter=< > SkipHeaderRecord:false HeaderComments:[] Header:[Delimiter=< > SkipHeaderRecord:true]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test380");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    boolean var8 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var10 = var5.withDelimiter('a');
    java.lang.String var11 = var10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=<a> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var11.equals("Delimiter=<a> EmptyLines:ignored SkipHeaderRecord:false"));

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test381");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.Character var4 = var1.getCommentMarker();
    char var5 = var1.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test382");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var11 = var7.withQuote('4');
    org.apache.commons.csv.CSVFormat var13 = var7.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var15 = var7.withEscape('4');
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var18 = var17.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = var17.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var22 = var17.withNullString("Delimiter=< > SkipHeaderRecord:true");
    boolean var23 = var22.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var25 = var22.withIgnoreEmptyLines(false);
    boolean var26 = var15.equals((java.lang.Object)var22);
    java.lang.String[] var27 = var22.getHeaderComments();
    boolean var28 = var22.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test383");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    boolean var6 = var5.isCommentMarkerSet();
    java.lang.String[] var7 = var5.getHeader();
    boolean var8 = var5.getIgnoreEmptyLines();
    boolean var9 = var5.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test384");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var5.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test385");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreEmptyLines(true);
    boolean var15 = var10.isNullStringSet();
    org.apache.commons.csv.CSVFormat var17 = var10.withCommentMarker((java.lang.Character)'#');
    java.lang.Character var18 = var17.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test386");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    boolean var5 = var1.isNullStringSet();
    boolean var6 = var1.getAllowMissingColumnNames();
    java.lang.String var7 = var1.getRecordSeparator();
    java.lang.Character var8 = var1.getCommentMarker();
    boolean var9 = var1.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test387");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getRecordNumber();
    long var8 = var6.getRecordNumber();
    boolean var9 = var6.isClosed();
    boolean var10 = var6.isClosed();
    var6.close();
    var6.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var13 = var6.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test388");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var14 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.String var18 = var17.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var21 = var20.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var23 = var20.withNullString("");
    org.apache.commons.csv.CSVFormat var24 = var20.withIgnoreEmptyLines();
    java.lang.String var25 = var24.toString();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    boolean var29 = var27.isNullStringSet();
    java.lang.String[] var31 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var32 = var27.withHeader(var31);
    org.apache.commons.csv.CSVFormat var33 = var24.withHeader(var31);
    java.lang.String var34 = var17.format((java.lang.Object[])var31);
    org.apache.commons.csv.CSVFormat var35 = var10.withHeader(var31);
    org.apache.commons.csv.CSVFormat var37 = var35.withQuote('a');
    boolean var38 = var37.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var40 = var37.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var42 = var37.withCommentMarker('#');
    boolean var43 = var42.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var25.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test389");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    boolean var5 = var2.isCommentMarkerSet();
    java.lang.Character var6 = var2.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var7 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var11 = var9.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > RecordSeparator=<4> SkipHeaderRecord:false", var11);
    org.apache.commons.csv.CSVFormat var14 = var11.withIgnoreSurroundingSpaces(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var16 = var14.withCommentMarker((java.lang.Character)'a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test390");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    boolean var8 = var5.isCommentMarkerSet();
    java.lang.String[] var9 = var5.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test391");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    java.lang.String[] var6 = var5.getHeaderComments();
    boolean var7 = var5.isCommentMarkerSet();
    java.lang.Character var8 = var5.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test392");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    java.lang.String var5 = var4.toString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("");
    org.apache.commons.csv.CSVFormat var9 = var7.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote('#');
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var14 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord();
    boolean var16 = var13.isCommentMarkerSet();
    boolean var17 = var13.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var20 = var19.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var22 = var19.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var24 = var19.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var25 = var24.withIgnoreSurroundingSpaces();
    java.lang.Object[] var26 = new java.lang.Object[] { var24};
    java.lang.String var27 = var13.format(var26);
    java.lang.String var28 = var9.format(var26);
    org.apache.commons.csv.CSVFormat var30 = var9.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var31 = var9.withAllowMissingColumnNames();
    java.lang.String var32 = var31.getRecordSeparator();
    org.apache.commons.csv.CSVParser var33 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SurroundingSpaces:ignored SkipHeaderRecord:true", var31);
    org.apache.commons.csv.CSVFormat var35 = var31.withNullString("Delimiter=< > SkipHeaderRecord:false HeaderComments:[] Header:[Delimiter=< > SkipHeaderRecord:true]");
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var38 = var37.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var39 = var37.withSkipHeaderRecord();
    boolean var40 = var37.isCommentMarkerSet();
    java.lang.Character var41 = var37.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var42 = var37.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var45 = var44.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var46 = var44.withSkipHeaderRecord();
    java.lang.String var47 = var46.toString();
    org.apache.commons.csv.CSVFormat var49 = var46.withNullString("");
    org.apache.commons.csv.CSVFormat var51 = var46.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var53 = var46.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    boolean var54 = var42.equals((java.lang.Object)var53);
    org.apache.commons.csv.CSVFormat var55 = var53.withIgnoreEmptyLines();
    boolean var56 = var31.equals((java.lang.Object)var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var27.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var28.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var47.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test393");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.String[] var3 = var1.getHeaderComments();
    java.lang.String[] var4 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    boolean var6 = var5.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test394");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var5.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var14 = var5.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var16 = var14.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var17 = var16.withIgnoreEmptyLines();
    boolean var18 = var17.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test395");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    boolean var9 = var6.isClosed();
    boolean var10 = var6.isClosed();
    long var11 = var6.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test396");


    org.apache.commons.csv.CSVFormat var3 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var4 = var3.isCommentMarkerSet();
    boolean var5 = var3.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var3);
    boolean var7 = var3.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var9 = var3.withDelimiter('a');
    boolean var10 = var9.getAllowMissingColumnNames();
    boolean var11 = var9.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("", var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test397");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('4');
    boolean var8 = var5.getAllowMissingColumnNames();
    boolean var9 = var5.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var11 = var5.withSkipHeaderRecord(false);
    boolean var12 = var11.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var14 = var11.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var16 = var11.withDelimiter('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test398");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(true);
    boolean var10 = var9.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    boolean var16 = var12.getIgnoreHeaderCase();
    java.lang.String[] var18 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var19 = var12.withHeader(var18);
    org.apache.commons.csv.CSVFormat var20 = var9.withHeader(var18);
    org.apache.commons.csv.CSVFormat var22 = var9.withNullString("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var24 = var9.withRecordSeparator("Delimiter=< > RecordSeparator=<hi!> SkipHeaderRecord:false");
    boolean var25 = var24.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var27 = var24.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test399");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.Character var3 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    boolean var12 = var9.getAllowMissingColumnNames();
    boolean var13 = var5.equals((java.lang.Object)var9);
    java.lang.Character var14 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var16 = var5.withRecordSeparator("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var20 = var19.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord();
    boolean var22 = var19.isCommentMarkerSet();
    java.lang.Character var23 = var19.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var24 = var19.withSkipHeaderRecord();
    java.lang.Character var25 = var24.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var27 = var24.withIgnoreHeaderCase(false);
    boolean var28 = var16.equals((java.lang.Object)var24);
    boolean var29 = var24.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test400");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withIgnoreSurroundingSpaces(false);
    java.lang.String var13 = var12.getNullString();
    org.apache.commons.csv.CSVFormat var15 = var12.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var17 = var12.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test401");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var5.isClosed();
    var5.close();
    var5.close();
    java.util.Map var9 = var5.getHeaderMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var10 = var5.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test402");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    boolean var12 = var11.isCommentMarkerSet();
    boolean var13 = var11.isNullStringSet();
    org.apache.commons.csv.CSVFormat var15 = var11.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    java.lang.String[] var17 = var15.getHeader();
    java.lang.Character var18 = var15.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test403");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    boolean var9 = var5.isQuoteCharacterSet();
    java.lang.String[] var10 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var11 = var5.withIgnoreEmptyLines();
    char var12 = var5.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == ' ');

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test404");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("", var13);
    var14.close();
    long var16 = var14.getRecordNumber();
    long var17 = var14.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0L);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test405");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    boolean var5 = var4.getAllowMissingColumnNames();
    java.lang.Character var6 = var4.getQuoteCharacter();
    boolean var7 = var4.getIgnoreEmptyLines();
    boolean var8 = var4.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test406");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(true);
    char var10 = var6.getDelimiter();
    org.apache.commons.csv.CSVFormat var12 = var6.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var14 = var12.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var17 = var14.withIgnoreEmptyLines();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var19 = var14.withDelimiter(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test407");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    java.util.Map var9 = var6.getHeaderMap();
    long var10 = var6.getRecordNumber();
    var6.close();
    boolean var12 = var6.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test408");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    boolean var4 = var2.isNullStringSet();
    java.lang.Character var5 = var2.getCommentMarker();
    char var6 = var2.getDelimiter();
    org.apache.commons.csv.CSVParser var7 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false", var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test409");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var9 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var8.withNullString("");
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreEmptyLines();
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    boolean var17 = var15.isNullStringSet();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var15.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var12.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = var1.withHeader(var19);
    java.lang.String var23 = var22.toString();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var26 = var25.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var28 = var25.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var30 = var25.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var33 = var32.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var35 = var32.withNullString("");
    org.apache.commons.csv.CSVFormat var36 = var32.withIgnoreEmptyLines();
    java.lang.String var37 = var36.toString();
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var40 = var39.withAllowMissingColumnNames();
    boolean var41 = var39.isNullStringSet();
    java.lang.String[] var43 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var44 = var39.withHeader(var43);
    org.apache.commons.csv.CSVFormat var45 = var36.withHeader(var43);
    org.apache.commons.csv.CSVFormat var46 = var25.withHeader(var43);
    java.lang.String var47 = var22.format((java.lang.Object[])var43);
    org.apache.commons.csv.CSVFormat var49 = var22.withIgnoreEmptyLines(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var51 = var49.withEscape((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var13.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var23.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var37.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test410");


    org.apache.commons.csv.CSVFormat var3 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator("#");
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("#", var3);
    boolean var7 = var3.isEscapeCharacterSet();
    char var8 = var3.getDelimiter();
    org.apache.commons.csv.CSVFormat var9 = var3.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var3.withDelimiter('a');
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:truehi!", var3);
    long var13 = var12.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test411");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var9 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var8.withNullString("");
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreEmptyLines();
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    boolean var17 = var15.isNullStringSet();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var15.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var12.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = var1.withHeader(var19);
    org.apache.commons.csv.CSVFormat var23 = var22.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode var24 = var23.getQuoteMode();
    boolean var25 = var23.getSkipHeaderRecord();
    char var26 = var23.getDelimiter();
    org.apache.commons.csv.CSVFormat var28 = var23.withNullString("Delimiter=< > QuoteChar=<#> NullString=<Delimiter=< > QuoteChar=<#> NullString=<Delimiter=< > SkipHeaderRecord:true> SurroundingSpaces:ignored SkipHeaderRecord:false> SurroundingSpaces:ignored SkipHeaderRecord:true");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var13.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test412");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(false);
    java.lang.String var10 = var9.toString();
    java.lang.Character var11 = var9.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var13 = var9.withCommentMarker((java.lang.Character)'4');
    boolean var14 = var13.isNullStringSet();
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test413");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var9 = var8.getDelimiter();
    java.lang.String var10 = var8.getNullString();
    boolean var11 = var8.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var8.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVParser var15 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false", var14);
    boolean var16 = var14.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var18 = var14.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var21 = var20.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord();
    boolean var23 = var20.isCommentMarkerSet();
    java.lang.Character var24 = var20.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var25 = var20.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var27 = var20.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var28 = var27.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var32 = var30.withSkipHeaderRecord();
    java.lang.String var33 = var32.toString();
    java.lang.String[] var34 = var32.getHeader();
    org.apache.commons.csv.CSVFormat var35 = var32.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var38 = var37.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var39 = var37.withSkipHeaderRecord();
    java.lang.String var40 = var39.toString();
    org.apache.commons.csv.CSVFormat var42 = var39.withNullString("");
    org.apache.commons.csv.CSVFormat var44 = var42.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var48 = var46.withSkipHeaderRecord();
    boolean var49 = var46.isCommentMarkerSet();
    boolean var50 = var46.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var53 = var52.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var55 = var52.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var57 = var52.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var58 = var57.withIgnoreSurroundingSpaces();
    java.lang.Object[] var59 = new java.lang.Object[] { var57};
    java.lang.String var60 = var46.format(var59);
    java.lang.String[] var62 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var63 = var46.withHeader(var62);
    org.apache.commons.csv.CSVFormat var64 = var42.withHeader(var62);
    java.lang.String var65 = var35.format((java.lang.Object[])var62);
    org.apache.commons.csv.CSVFormat var66 = var28.withHeader(var62);
    org.apache.commons.csv.CSVFormat var67 = var18.withHeaderComments((java.lang.Object[])var62);
    org.apache.commons.csv.CSVFormat var68 = var1.withHeaderComments((java.lang.Object[])var62);
    org.apache.commons.csv.CSVFormat var69 = var68.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var33.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var40.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var60.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var65.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test414");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote((java.lang.Character)'a');
    java.lang.String var15 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=< > SurroundingSpaces:ignored SkipHeaderRecord:true"+ "'", var15.equals("Delimiter=< > SurroundingSpaces:ignored SkipHeaderRecord:true"));

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test415");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var10 = var6.withSkipHeaderRecord();
    boolean var11 = var10.isEscapeCharacterSet();
    java.lang.String var12 = var10.toString();
    org.apache.commons.csv.CSVFormat var14 = var10.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Delimiter=< > SkipHeaderRecord:true Header:[]"+ "'", var12.equals("Delimiter=< > SkipHeaderRecord:true Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test416");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var7.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test417");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var10 = var6.withSkipHeaderRecord();
    boolean var11 = var10.getIgnoreSurroundingSpaces();
    char var12 = var10.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == ' ');

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test418");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(true);
    boolean var10 = var9.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    boolean var15 = var12.isCommentMarkerSet();
    boolean var16 = var12.getIgnoreHeaderCase();
    java.lang.String[] var18 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var19 = var12.withHeader(var18);
    org.apache.commons.csv.CSVFormat var20 = var9.withHeader(var18);
    org.apache.commons.csv.CSVFormat var22 = var9.withNullString("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var24 = var9.withRecordSeparator("Delimiter=< > RecordSeparator=<hi!> SkipHeaderRecord:false");
    java.lang.String var25 = var9.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test419");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getCurrentLineNumber();
    var6.close();
    var6.close();
    java.util.Iterator var10 = var6.iterator();
    boolean var11 = var6.isClosed();
    var6.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var13 = var6.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test420");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    java.lang.String var10 = var9.toString();
    org.apache.commons.csv.CSVFormat var12 = var9.withNullString("");
    org.apache.commons.csv.CSVFormat var14 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    boolean var18 = var16.isNullStringSet();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var16.withHeader(var20);
    java.lang.String var22 = var14.format((java.lang.Object[])var20);
    java.lang.String var23 = var5.format((java.lang.Object[])var20);
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var26 = var25.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var28 = var25.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var25.withIgnoreEmptyLines();
    java.lang.String[] var30 = var29.getHeaderComments();
    org.apache.commons.csv.CSVFormat var32 = var29.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var34 = var29.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var37 = var36.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord();
    boolean var39 = var36.isCommentMarkerSet();
    boolean var40 = var36.getIgnoreHeaderCase();
    java.lang.String[] var42 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var43 = var36.withHeader(var42);
    org.apache.commons.csv.CSVFormat var44 = var29.withHeaderComments((java.lang.Object[])var42);
    java.lang.String var45 = var5.format((java.lang.Object[])var42);
    boolean var46 = var5.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var48 = var5.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var50 = var48.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var52 = var50.withAllowMissingColumnNames(true);
    java.lang.String var53 = var52.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var45.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Delimiter=< > Escape=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"+ "'", var53.equals("Delimiter=< > Escape=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"));

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test421");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getRecordNumber();
    long var8 = var6.getRecordNumber();
    boolean var9 = var6.isClosed();
    boolean var10 = var6.isClosed();
    var6.close();
    boolean var12 = var6.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test422");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var7 = var2.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var8 = var7.getCommentMarker();
    org.apache.commons.csv.QuoteMode var9 = var7.getQuoteMode();
    org.apache.commons.csv.CSVFormat var11 = var7.withEscape((java.lang.Character)'a');
    boolean var12 = var11.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord();
    boolean var17 = var14.isCommentMarkerSet();
    boolean var18 = var14.getIgnoreHeaderCase();
    java.lang.String[] var20 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var21 = var14.withHeader(var20);
    org.apache.commons.csv.CSVFormat var22 = var11.withHeaderComments((java.lang.Object[])var20);
    org.apache.commons.csv.CSVParser var23 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false Header:[]", var11);
    java.lang.String[] var24 = var11.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test423");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    boolean var9 = var6.isClosed();
    boolean var10 = var6.isClosed();
    long var11 = var6.getRecordNumber();
    java.util.Iterator var12 = var6.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test424");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    boolean var5 = var1.isEscapeCharacterSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var7 = var1.withEscape(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test425");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.Character var3 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    boolean var12 = var9.getAllowMissingColumnNames();
    boolean var13 = var5.equals((java.lang.Object)var9);
    org.apache.commons.csv.CSVFormat var15 = var5.withEscape((java.lang.Character)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test426");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var28 = var26.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var32 = var30.withSkipHeaderRecord();
    java.lang.String var33 = var32.toString();
    org.apache.commons.csv.CSVFormat var35 = var32.withNullString("");
    org.apache.commons.csv.CSVFormat var37 = var32.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var40 = var39.withAllowMissingColumnNames();
    boolean var41 = var39.isNullStringSet();
    java.lang.String[] var43 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var44 = var39.withHeader(var43);
    java.lang.String var45 = var37.format((java.lang.Object[])var43);
    java.lang.String var46 = var28.format((java.lang.Object[])var43);
    org.apache.commons.csv.CSVFormat var47 = var18.withHeaderComments((java.lang.Object[])var43);
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var50 = var49.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var52 = var49.withNullString("");
    org.apache.commons.csv.CSVFormat var53 = var49.withIgnoreEmptyLines();
    java.lang.String[] var54 = var53.getHeaderComments();
    org.apache.commons.csv.CSVFormat var56 = var53.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var58 = var56.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var60 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var61 = var60.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var62 = var60.withSkipHeaderRecord();
    boolean var63 = var60.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var65 = var60.withCommentMarker((java.lang.Character)'a');
    boolean var66 = var58.equals((java.lang.Object)var65);
    org.apache.commons.csv.CSVFormat var68 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var70 = var68.withRecordSeparator("#");
    org.apache.commons.csv.CSVFormat var72 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var73 = var72.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var75 = var72.withCommentMarker('#');
    java.lang.String[] var76 = var72.getHeaderComments();
    org.apache.commons.csv.CSVFormat var78 = var72.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var80 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var81 = var80.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var82 = var80.withSkipHeaderRecord();
    boolean var83 = var80.isCommentMarkerSet();
    boolean var84 = var80.getIgnoreHeaderCase();
    java.lang.String[] var86 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var87 = var80.withHeader(var86);
    org.apache.commons.csv.CSVFormat var88 = var72.withHeader(var86);
    java.lang.String var89 = var70.format((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var90 = var65.withHeaderComments((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var91 = var47.withHeader(var86);
    org.apache.commons.csv.CSVFormat var93 = var91.withRecordSeparator(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var33.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + ""+ "'", var46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "Delimiter=< > SkipHeaderRecord:true#"+ "'", var89.equals("Delimiter=< > SkipHeaderRecord:true#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test427");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var3 = var2.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines();
    java.lang.String[] var7 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var12 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var13 = var11.withHeaderComments((java.lang.Object[])var12);
    java.lang.String[] var14 = var11.getHeaderComments();
    org.apache.commons.csv.CSVParser var15 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > QuoteChar=<#> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false", var11);
    boolean var16 = var11.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test428");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(false);
    java.lang.String var10 = var9.toString();
    java.lang.Character var11 = var9.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var13 = var9.withIgnoreSurroundingSpaces(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test429");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var9 = var5.withEscape('a');
    org.apache.commons.csv.CSVFormat var11 = var5.withAllowMissingColumnNames(false);
    java.lang.Character var12 = var11.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test430");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    boolean var9 = var5.equals((java.lang.Object)10.0f);
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote((java.lang.Character)'#');
    java.lang.Character var12 = var11.getEscapeCharacter();
    boolean var13 = var11.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var11.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test431");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var9 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var8.withRecordSeparator("hi!");
    boolean var12 = var11.isCommentMarkerSet();
    boolean var13 = var11.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var16 = var15.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var18 = var15.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var20 = var15.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var23 = var22.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var25 = var22.withNullString("");
    org.apache.commons.csv.CSVFormat var26 = var22.withIgnoreEmptyLines();
    java.lang.String var27 = var26.toString();
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var30 = var29.withAllowMissingColumnNames();
    boolean var31 = var29.isNullStringSet();
    java.lang.String[] var33 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var34 = var29.withHeader(var33);
    org.apache.commons.csv.CSVFormat var35 = var26.withHeader(var33);
    org.apache.commons.csv.CSVFormat var36 = var15.withHeader(var33);
    org.apache.commons.csv.CSVFormat var37 = var11.withHeaderComments((java.lang.Object[])var33);
    org.apache.commons.csv.CSVFormat var38 = var3.withHeader(var33);
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var41 = var40.withAllowMissingColumnNames();
    boolean var42 = var40.isNullStringSet();
    boolean var43 = var40.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var45 = var40.withCommentMarker((java.lang.Character)'4');
    boolean var46 = var40.isNullStringSet();
    org.apache.commons.csv.CSVFormat var47 = var40.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var49 = var47.withRecordSeparator("Delimiter=< > SkipHeaderRecord:true#");
    boolean var50 = var3.equals((java.lang.Object)"Delimiter=< > SkipHeaderRecord:true#");
    java.lang.String var51 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var27.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var51.equals("Delimiter=< > SkipHeaderRecord:true"));

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test432");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var11 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var12 = var10.withHeaderComments((java.lang.Object[])var11);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var16 = var10.withRecordSeparator("ALL MINIMAL NON_NUMERIC NONE");
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var19 = var18.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = var18.withNullString("");
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreEmptyLines();
    java.lang.String[] var23 = var22.getHeaderComments();
    org.apache.commons.csv.CSVFormat var25 = var22.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var27 = var22.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var28 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var29 = var27.withHeaderComments((java.lang.Object[])var28);
    org.apache.commons.csv.CSVFormat var31 = var27.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var37 = var35.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var40 = var39.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var41 = var39.withSkipHeaderRecord();
    java.lang.String var42 = var41.toString();
    org.apache.commons.csv.CSVFormat var44 = var41.withNullString("");
    org.apache.commons.csv.CSVFormat var46 = var41.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var49 = var48.withAllowMissingColumnNames();
    boolean var50 = var48.isNullStringSet();
    java.lang.String[] var52 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var53 = var48.withHeader(var52);
    java.lang.String var54 = var46.format((java.lang.Object[])var52);
    java.lang.String var55 = var37.format((java.lang.Object[])var52);
    org.apache.commons.csv.CSVFormat var56 = var31.withHeader(var52);
    org.apache.commons.csv.CSVFormat var58 = var31.withCommentMarker((java.lang.Character)'a');
    java.lang.Character var59 = var31.getQuoteCharacter();
    boolean var60 = var16.equals((java.lang.Object)var31);
    org.apache.commons.csv.CSVFormat var62 = var31.withRecordSeparator('a');
    boolean var63 = var62.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var42.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ""+ "'", var54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test433");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var8.withQuote('4');
    org.apache.commons.csv.CSVFormat var14 = var8.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test434");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var7 = var6.getCommentMarker();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var10 = var9.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var12 = var9.withCommentMarker('#');
    java.lang.String[] var13 = var9.getHeaderComments();
    org.apache.commons.csv.CSVFormat var15 = var9.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    boolean var20 = var17.isCommentMarkerSet();
    boolean var21 = var17.getIgnoreHeaderCase();
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var17.withHeader(var23);
    org.apache.commons.csv.CSVFormat var25 = var9.withHeader(var23);
    java.lang.String[] var26 = var9.getHeaderComments();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var29 = var28.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var30 = var28.withSkipHeaderRecord();
    java.lang.String var31 = var30.toString();
    java.lang.String[] var32 = var30.getHeader();
    org.apache.commons.csv.CSVFormat var33 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var36 = var35.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var37 = var35.withSkipHeaderRecord();
    java.lang.String var38 = var37.toString();
    org.apache.commons.csv.CSVFormat var40 = var37.withNullString("");
    org.apache.commons.csv.CSVFormat var42 = var40.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var45 = var44.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var46 = var44.withSkipHeaderRecord();
    boolean var47 = var44.isCommentMarkerSet();
    boolean var48 = var44.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var51 = var50.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var53 = var50.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var55 = var50.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var56 = var55.withIgnoreSurroundingSpaces();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.String var58 = var44.format(var57);
    java.lang.String[] var60 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var61 = var44.withHeader(var60);
    org.apache.commons.csv.CSVFormat var62 = var40.withHeader(var60);
    java.lang.String var63 = var33.format((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var64 = var9.withHeader(var60);
    org.apache.commons.csv.CSVFormat var65 = var6.withHeaderComments((java.lang.Object[])var60);
    boolean var66 = var65.isEscapeCharacterSet();
    boolean var67 = var65.getSkipHeaderRecord();
    java.lang.Character var68 = var65.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var70 = var65.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var31.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var38.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var58.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var63.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test435");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var9 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var8.withNullString("");
    org.apache.commons.csv.CSVFormat var12 = var8.withIgnoreEmptyLines();
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    boolean var17 = var15.isNullStringSet();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var15.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var12.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = var1.withHeader(var19);
    org.apache.commons.csv.CSVFormat var23 = var22.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var24 = var22.withIgnoreEmptyLines();
    boolean var25 = var24.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var27 = var24.withAllowMissingColumnNames(true);
    char var28 = var27.getDelimiter();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var31 = var29.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var13.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test436");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames();
    boolean var4 = var1.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = var1.withRecordSeparator("Delimiter=< > SurroundingSpaces:ignored SkipHeaderRecord:true Header:[]");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test437");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withRecordSeparator("hi!");
    boolean var5 = var4.isCommentMarkerSet();
    boolean var6 = var4.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var9 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var8.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var13 = var8.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var16 = var15.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var18 = var15.withNullString("");
    org.apache.commons.csv.CSVFormat var19 = var15.withIgnoreEmptyLines();
    java.lang.String var20 = var19.toString();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    boolean var24 = var22.isNullStringSet();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var22.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var19.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var8.withHeader(var26);
    org.apache.commons.csv.CSVFormat var30 = var4.withHeaderComments((java.lang.Object[])var26);
    boolean var31 = var30.getAllowMissingColumnNames();
    boolean var32 = var30.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var20.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test438");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    java.lang.String var10 = var9.toString();
    org.apache.commons.csv.CSVFormat var12 = var9.withNullString("");
    org.apache.commons.csv.CSVFormat var14 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    boolean var18 = var16.isNullStringSet();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var16.withHeader(var20);
    java.lang.String var22 = var14.format((java.lang.Object[])var20);
    java.lang.String var23 = var5.format((java.lang.Object[])var20);
    java.lang.Character var24 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var26 = var5.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var28 = var26.withCommentMarker('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test439");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var10 = var8.withQuote('#');
    org.apache.commons.csv.CSVFormat var11 = var8.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test440");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var1.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var8.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var8.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var15 = var13.withQuote('#');
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var18 = var17.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = var17.withRecordSeparator("hi!");
    boolean var21 = var20.isCommentMarkerSet();
    java.lang.String[] var22 = var20.getHeader();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withIgnoreSurroundingSpaces();
    java.lang.Character var26 = var24.getCommentMarker();
    java.lang.String var27 = var24.getNullString();
    org.apache.commons.csv.CSVFormat var28 = var24.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    boolean var32 = var30.isNullStringSet();
    java.lang.String[] var34 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var35 = var30.withHeader(var34);
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var38 = var37.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var39 = var37.withSkipHeaderRecord();
    boolean var40 = var37.isCommentMarkerSet();
    boolean var41 = var37.getIgnoreHeaderCase();
    java.lang.String[] var43 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var44 = var37.withHeader(var43);
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var48 = var46.withSkipHeaderRecord();
    boolean var49 = var46.isCommentMarkerSet();
    boolean var50 = var46.getIgnoreHeaderCase();
    java.lang.String[] var52 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var53 = var46.withHeader(var52);
    org.apache.commons.csv.CSVFormat var54 = var37.withHeader(var52);
    java.lang.String var55 = var35.format((java.lang.Object[])var52);
    org.apache.commons.csv.CSVFormat var56 = var28.withHeader(var52);
    java.lang.String var57 = var20.format((java.lang.Object[])var52);
    org.apache.commons.csv.CSVFormat var58 = var15.withHeader(var52);
    org.apache.commons.csv.CSVFormat var59 = var4.withHeaderComments((java.lang.Object[])var52);
    org.apache.commons.csv.CSVFormat var61 = var59.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var62 = var59.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var55.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "Delimiter=< > SkipHeaderRecord:truehi!"+ "'", var57.equals("Delimiter=< > SkipHeaderRecord:truehi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test441");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var3 = var2.getDelimiter();
    java.lang.String var4 = var2.getNullString();
    boolean var5 = var2.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var6 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var2.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false", var8);
    boolean var10 = var8.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var12 = var8.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote((java.lang.Character)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test442");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    boolean var9 = var6.isClosed();
    java.util.Map var10 = var6.getHeaderMap();
    long var11 = var6.getRecordNumber();
    java.util.Iterator var12 = var6.iterator();
    var6.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test443");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    java.lang.String[] var17 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var16.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var22 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var23 = var21.withHeaderComments((java.lang.Object[])var22);
    boolean var24 = var10.equals((java.lang.Object)var23);
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord();
    java.lang.Character var26 = var23.getQuoteCharacter();
    boolean var27 = var23.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test444");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var3.withEscape('#');
    org.apache.commons.csv.CSVFormat var10 = var3.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('a');
    org.apache.commons.csv.QuoteMode var13 = var10.getQuoteMode();
    boolean var14 = var10.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test445");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    boolean var7 = var1.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test446");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    java.lang.Character var14 = var10.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var15 = var10.withSkipHeaderRecord();
    java.lang.Character var16 = var15.getQuoteCharacter();
    boolean var18 = var15.equals((java.lang.Object)'a');
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var21 = var20.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var23 = var20.withNullString("");
    org.apache.commons.csv.CSVFormat var24 = var20.withIgnoreEmptyLines();
    java.lang.String[] var25 = var24.getHeaderComments();
    org.apache.commons.csv.CSVFormat var27 = var24.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var29 = var24.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var31 = var24.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord();
    java.lang.String var36 = var35.toString();
    org.apache.commons.csv.CSVFormat var38 = var35.withNullString("");
    org.apache.commons.csv.CSVFormat var40 = var35.withIgnoreSurroundingSpaces(true);
    boolean var41 = var35.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var43 = var35.withQuote('a');
    org.apache.commons.csv.CSVFormat var45 = var43.withNullString("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var48 = var47.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var50 = var47.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var52 = var47.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var55 = var54.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var57 = var54.withNullString("");
    org.apache.commons.csv.CSVFormat var58 = var54.withIgnoreEmptyLines();
    java.lang.String var59 = var58.toString();
    org.apache.commons.csv.CSVFormat var61 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var62 = var61.withAllowMissingColumnNames();
    boolean var63 = var61.isNullStringSet();
    java.lang.String[] var65 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var66 = var61.withHeader(var65);
    org.apache.commons.csv.CSVFormat var67 = var58.withHeader(var65);
    org.apache.commons.csv.CSVFormat var68 = var47.withHeader(var65);
    java.lang.String var69 = var68.toString();
    org.apache.commons.csv.CSVFormat var71 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var72 = var71.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var74 = var71.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var76 = var71.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var78 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var79 = var78.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var81 = var78.withNullString("");
    org.apache.commons.csv.CSVFormat var82 = var78.withIgnoreEmptyLines();
    java.lang.String var83 = var82.toString();
    org.apache.commons.csv.CSVFormat var85 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var86 = var85.withAllowMissingColumnNames();
    boolean var87 = var85.isNullStringSet();
    java.lang.String[] var89 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var90 = var85.withHeader(var89);
    org.apache.commons.csv.CSVFormat var91 = var82.withHeader(var89);
    org.apache.commons.csv.CSVFormat var92 = var71.withHeader(var89);
    java.lang.String var93 = var68.format((java.lang.Object[])var89);
    org.apache.commons.csv.CSVFormat var94 = var43.withHeader(var89);
    boolean var95 = var31.equals((java.lang.Object)var89);
    org.apache.commons.csv.CSVFormat var96 = var15.withHeader(var89);
    boolean var97 = var8.equals((java.lang.Object)var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var36.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var59.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var69.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var83.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + ""+ "'", var93.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test447");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var12 = var11.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var14 = var11.withNullString("");
    org.apache.commons.csv.CSVFormat var15 = var11.withIgnoreEmptyLines();
    java.lang.String[] var16 = var15.getHeaderComments();
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var20 = var15.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var21 = var20.getQuoteMode();
    org.apache.commons.csv.CSVParser var22 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > QuoteChar=<a> SkipHeaderRecord:false", var20);
    boolean var23 = var22.isClosed();
    boolean var24 = var8.equals((java.lang.Object)var23);
    org.apache.commons.csv.CSVFormat var26 = var8.withEscape((java.lang.Character)'4');
    java.lang.String var27 = var26.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test448");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var10 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var10.withEscape('#');
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var15 = var14.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var17 = var14.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var19 = var14.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var22 = var21.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var24 = var21.withNullString("");
    org.apache.commons.csv.CSVFormat var25 = var21.withIgnoreEmptyLines();
    java.lang.String var26 = var25.toString();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var29 = var28.withAllowMissingColumnNames();
    boolean var30 = var28.isNullStringSet();
    java.lang.String[] var32 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var33 = var28.withHeader(var32);
    org.apache.commons.csv.CSVFormat var34 = var25.withHeader(var32);
    org.apache.commons.csv.CSVFormat var35 = var14.withHeader(var32);
    java.lang.String var36 = var12.format((java.lang.Object[])var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var26.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "#"+ "'", var36.equals("#"));

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test449");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker('#');
    boolean var11 = var8.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var13 = var8.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var15 = var8.withDelimiter('#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker((java.lang.Character)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test450");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    java.lang.String var10 = var9.toString();
    org.apache.commons.csv.CSVFormat var12 = var9.withNullString("");
    org.apache.commons.csv.CSVFormat var14 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    boolean var18 = var16.isNullStringSet();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var16.withHeader(var20);
    java.lang.String var22 = var14.format((java.lang.Object[])var20);
    java.lang.String var23 = var5.format((java.lang.Object[])var20);
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var26 = var25.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var28 = var25.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var25.withIgnoreEmptyLines();
    java.lang.String[] var30 = var29.getHeaderComments();
    org.apache.commons.csv.CSVFormat var32 = var29.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var34 = var29.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var37 = var36.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord();
    boolean var39 = var36.isCommentMarkerSet();
    boolean var40 = var36.getIgnoreHeaderCase();
    java.lang.String[] var42 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var43 = var36.withHeader(var42);
    org.apache.commons.csv.CSVFormat var44 = var29.withHeaderComments((java.lang.Object[])var42);
    java.lang.String var45 = var5.format((java.lang.Object[])var42);
    boolean var46 = var5.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var48 = var5.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var51 = var50.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var53 = var50.withNullString("");
    org.apache.commons.csv.CSVFormat var54 = var50.withIgnoreEmptyLines();
    java.lang.String[] var55 = var54.getHeaderComments();
    org.apache.commons.csv.CSVFormat var57 = var54.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var59 = var54.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var61 = var59.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var63 = var59.withIgnoreEmptyLines(true);
    boolean var64 = var5.equals((java.lang.Object)var59);
    org.apache.commons.csv.CSVFormat var66 = var5.withNullString("Delimiter=< > SkipHeaderRecord:false Header:[Delimiter=< > SkipHeaderRecord:true]");
    java.lang.String var67 = var66.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var45.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:false Header:[Delimiter=< > SkipHeaderRecord:true]> SurroundingSpaces:ignored SkipHeaderRecord:true"+ "'", var67.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:false Header:[Delimiter=< > SkipHeaderRecord:true]> SurroundingSpaces:ignored SkipHeaderRecord:true"));

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test451");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var1.withSkipHeaderRecord(false);
    boolean var9 = var1.isNullStringSet();
    boolean var10 = var1.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var1.withQuote((java.lang.Character)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test452");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var22 = var18.withEscape('a');
    org.apache.commons.csv.CSVFormat var23 = var22.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var26 = var25.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var28 = var25.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var25.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var31 = var29.withRecordSeparator('#');
    boolean var32 = var23.equals((java.lang.Object)var29);
    org.apache.commons.csv.CSVFormat var33 = var29.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test453");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord();
    boolean var17 = var14.isCommentMarkerSet();
    boolean var18 = var14.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var21 = var20.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var23 = var20.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var25 = var20.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var26 = var25.withIgnoreSurroundingSpaces();
    java.lang.Object[] var27 = new java.lang.Object[] { var25};
    java.lang.String var28 = var14.format(var27);
    java.lang.String[] var30 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var31 = var14.withHeader(var30);
    org.apache.commons.csv.CSVFormat var32 = var10.withHeader(var30);
    org.apache.commons.csv.CSVFormat var34 = var32.withEscape('4');
    boolean var35 = var34.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var28.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test454");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat.Predefined[] var11 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var12 = var10.withHeaderComments((java.lang.Object[])var11);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    java.lang.String var25 = var24.toString();
    org.apache.commons.csv.CSVFormat var27 = var24.withNullString("");
    org.apache.commons.csv.CSVFormat var29 = var24.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var32 = var31.withAllowMissingColumnNames();
    boolean var33 = var31.isNullStringSet();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var31.withHeader(var35);
    java.lang.String var37 = var29.format((java.lang.Object[])var35);
    java.lang.String var38 = var20.format((java.lang.Object[])var35);
    org.apache.commons.csv.CSVFormat var39 = var14.withHeader(var35);
    org.apache.commons.csv.CSVFormat var41 = var39.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var43 = var39.withDelimiter(' ');
    char var44 = var43.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var25.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == ' ');

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test455");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var3.withIgnoreEmptyLines();
    java.lang.Character var8 = var3.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var3.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var11 = var3.withAllowMissingColumnNames();
    java.lang.Character var12 = var11.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test456");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var8.withIgnoreEmptyLines();
    boolean var10 = var9.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var9.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var14 = var9.withEscape('4');
    org.apache.commons.csv.CSVFormat var15 = var9.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var17 = var15.withQuote('4');
    org.apache.commons.csv.CSVFormat var18 = var17.withIgnoreEmptyLines();
    boolean var19 = var17.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test457");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreHeaderCase(false);
    char var9 = var8.getDelimiter();
    org.apache.commons.csv.CSVFormat var11 = var8.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test458");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    boolean var7 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var9 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var12 = var11.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var14 = var11.withCommentMarker('#');
    boolean var15 = var14.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    boolean var20 = var17.isCommentMarkerSet();
    boolean var21 = var17.getIgnoreHeaderCase();
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var17.withHeader(var23);
    org.apache.commons.csv.CSVFormat var25 = var14.withHeaderComments((java.lang.Object[])var23);
    org.apache.commons.csv.CSVFormat var26 = var9.withHeader(var23);
    java.lang.Character var27 = var26.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test459");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var3.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var13 = var3.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat.Predefined[] var16 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var17 = var15.withHeaderComments((java.lang.Object[])var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test460");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getCurrentLineNumber();
    var6.close();
    var6.close();
    java.util.Iterator var10 = var6.iterator();
    long var11 = var6.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test461");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    long var7 = var6.getRecordNumber();
    java.util.List var8 = var6.getRecords();
    java.util.Map var9 = var6.getHeaderMap();
    var6.close();
    java.util.Map var11 = var6.getHeaderMap();
    long var12 = var6.getCurrentLineNumber();
    java.util.Map var13 = var6.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test462");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var4 = var2.withSkipHeaderRecord();
    java.lang.String var5 = var4.toString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("");
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreSurroundingSpaces();
    java.lang.Character var12 = var11.getQuoteCharacter();
    boolean var13 = var11.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var15 = var11.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var17 = var11.withEscape('a');
    org.apache.commons.csv.CSVParser var18 = org.apache.commons.csv.CSVParser.parse("#", var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test463");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    long var9 = var6.getCurrentLineNumber();
    long var10 = var6.getRecordNumber();
    long var11 = var6.getRecordNumber();
    long var12 = var6.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test464");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withCommentMarker((java.lang.Character)'a');
    java.lang.String[] var9 = var6.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test465");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    java.lang.String var3 = var1.getNullString();
    boolean var4 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.QuoteMode var6 = var1.getQuoteMode();
    org.apache.commons.csv.CSVFormat var8 = var1.withRecordSeparator("Delimiter=< > SkipHeaderRecord:true#");
    java.lang.String var9 = var8.toString();
    org.apache.commons.csv.CSVFormat var11 = var8.withRecordSeparator('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Delimiter=< > RecordSeparator=<Delimiter=< > SkipHeaderRecord:true#> SkipHeaderRecord:false"+ "'", var9.equals("Delimiter=< > RecordSeparator=<Delimiter=< > SkipHeaderRecord:true#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test466");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreEmptyLines(false);
    java.lang.String[] var9 = var5.getHeader();
    char var10 = var5.getDelimiter();
    org.apache.commons.csv.CSVFormat var12 = var5.withQuote('#');
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test467");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var5 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Iterator var7 = var6.iterator();
    java.util.Iterator var8 = var6.iterator();
    java.util.Map var9 = var6.getHeaderMap();
    java.util.List var10 = var6.getRecords();
    boolean var11 = var6.isClosed();
    java.util.Iterator var12 = var6.iterator();
    long var13 = var6.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test468");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreEmptyLines(false);
    java.lang.String[] var9 = var5.getHeader();
    char var10 = var5.getDelimiter();
    boolean var11 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = var5.withAllowMissingColumnNames();
    java.lang.String var14 = var13.getNullString();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord();
    boolean var19 = var16.isCommentMarkerSet();
    java.lang.Character var20 = var16.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var21 = var16.withSkipHeaderRecord();
    java.lang.Character var22 = var21.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var24 = var21.withIgnoreEmptyLines(true);
    boolean var25 = var24.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    boolean var30 = var27.isCommentMarkerSet();
    boolean var31 = var27.getIgnoreHeaderCase();
    java.lang.String[] var33 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var34 = var27.withHeader(var33);
    org.apache.commons.csv.CSVFormat var35 = var24.withHeader(var33);
    org.apache.commons.csv.CSVFormat var37 = var24.withNullString("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var38 = var37.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var41 = var40.getDelimiter();
    org.apache.commons.csv.CSVFormat var43 = var40.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var45 = var43.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var48 = var47.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var49 = var47.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var51 = var49.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var52 = var49.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var55 = var54.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var57 = var54.withNullString("");
    org.apache.commons.csv.CSVFormat var58 = var54.withIgnoreEmptyLines();
    java.lang.String[] var59 = var58.getHeaderComments();
    org.apache.commons.csv.CSVFormat var61 = var58.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var63 = var58.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var64 = var63.getQuoteMode();
    org.apache.commons.csv.CSVFormat var66 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var67 = var66.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var68 = var66.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var70 = var68.withAllowMissingColumnNames(true);
    java.lang.String var71 = var70.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var73 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var74 = var73.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var76 = var73.withNullString("");
    org.apache.commons.csv.CSVFormat var77 = var73.withIgnoreEmptyLines();
    java.lang.String var78 = var77.toString();
    org.apache.commons.csv.CSVFormat var80 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var81 = var80.withAllowMissingColumnNames();
    boolean var82 = var80.isNullStringSet();
    java.lang.String[] var84 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var85 = var80.withHeader(var84);
    org.apache.commons.csv.CSVFormat var86 = var77.withHeader(var84);
    java.lang.String var87 = var70.format((java.lang.Object[])var84);
    org.apache.commons.csv.CSVFormat var88 = var63.withHeader(var84);
    java.lang.String var89 = var49.format((java.lang.Object[])var84);
    org.apache.commons.csv.CSVFormat var90 = var45.withHeader(var84);
    java.lang.String var91 = var38.format((java.lang.Object[])var84);
    org.apache.commons.csv.CSVFormat var92 = var13.withHeader(var84);
    java.lang.String var93 = var13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var78.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + ""+ "'", var91.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var93.equals("Delimiter=< > SkipHeaderRecord:true"));

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test469");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > CommentStart=<#> EmptyLines:ignored SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test470");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var3.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var15 = var14.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var17 = var14.withCommentMarker('#');
    boolean var18 = var17.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var21 = var20.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord();
    boolean var23 = var20.isCommentMarkerSet();
    boolean var24 = var20.getIgnoreHeaderCase();
    java.lang.String[] var26 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var27 = var20.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var17.withHeaderComments((java.lang.Object[])var26);
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var31 = var30.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var33 = var30.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var35 = var30.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var38 = var37.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var40 = var37.withNullString("");
    org.apache.commons.csv.CSVFormat var41 = var37.withIgnoreEmptyLines();
    java.lang.String var42 = var41.toString();
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var45 = var44.withAllowMissingColumnNames();
    boolean var46 = var44.isNullStringSet();
    java.lang.String[] var48 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var49 = var44.withHeader(var48);
    org.apache.commons.csv.CSVFormat var50 = var41.withHeader(var48);
    org.apache.commons.csv.CSVFormat var51 = var30.withHeader(var48);
    java.lang.String var52 = var51.toString();
    java.lang.String[] var53 = var51.getHeader();
    org.apache.commons.csv.CSVFormat var54 = var28.withHeader(var53);
    org.apache.commons.csv.CSVFormat var55 = var3.withHeaderComments((java.lang.Object[])var53);
    java.lang.String[] var56 = var55.getHeader();
    org.apache.commons.csv.CSVFormat var58 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var59 = var58.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var61 = var58.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var63 = var58.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var64 = var63.getCommentMarker();
    org.apache.commons.csv.QuoteMode var65 = var63.getQuoteMode();
    org.apache.commons.csv.CSVFormat var67 = var63.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var69 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var70 = var69.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var71 = var69.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var73 = var71.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var75 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var76 = var75.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var77 = var75.withSkipHeaderRecord();
    java.lang.String var78 = var77.toString();
    org.apache.commons.csv.CSVFormat var80 = var77.withNullString("");
    org.apache.commons.csv.CSVFormat var82 = var77.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var84 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var85 = var84.withAllowMissingColumnNames();
    boolean var86 = var84.isNullStringSet();
    java.lang.String[] var88 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var89 = var84.withHeader(var88);
    java.lang.String var90 = var82.format((java.lang.Object[])var88);
    java.lang.String var91 = var73.format((java.lang.Object[])var88);
    org.apache.commons.csv.CSVFormat var92 = var67.withHeader(var88);
    boolean var93 = var55.equals((java.lang.Object)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var42.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var52.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var78.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + ""+ "'", var90.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + ""+ "'", var91.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test471");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("");
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines();
    java.lang.String[] var17 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var19.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var22 = var21.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var22.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var26 = var24.withCommentMarker((java.lang.Character)'4');
    java.lang.Character var27 = var26.getQuoteCharacter();
    boolean var28 = var26.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var32 = var30.withSkipHeaderRecord();
    boolean var33 = var30.isCommentMarkerSet();
    java.lang.Character var34 = var30.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var35 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var37 = var30.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var39 = var30.withDelimiter(' ');
    java.lang.String var40 = var30.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var43 = var42.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var45 = var42.withRecordSeparator("hi!");
    boolean var46 = var45.isCommentMarkerSet();
    boolean var47 = var45.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var50 = var49.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var52 = var49.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var54 = var49.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var57 = var56.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var59 = var56.withNullString("");
    org.apache.commons.csv.CSVFormat var60 = var56.withIgnoreEmptyLines();
    java.lang.String var61 = var60.toString();
    org.apache.commons.csv.CSVFormat var63 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var64 = var63.withAllowMissingColumnNames();
    boolean var65 = var63.isNullStringSet();
    java.lang.String[] var67 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var68 = var63.withHeader(var67);
    org.apache.commons.csv.CSVFormat var69 = var60.withHeader(var67);
    org.apache.commons.csv.CSVFormat var70 = var49.withHeader(var67);
    org.apache.commons.csv.CSVFormat var71 = var45.withHeaderComments((java.lang.Object[])var67);
    org.apache.commons.csv.CSVFormat var72 = var30.withHeaderComments((java.lang.Object[])var67);
    org.apache.commons.csv.CSVFormat var73 = var26.withHeaderComments((java.lang.Object[])var67);
    org.apache.commons.csv.CSVFormat var74 = var8.withHeader(var67);
    java.lang.String var75 = var74.getRecordSeparator();
    org.apache.commons.csv.QuoteMode var76 = var74.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var61.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test472");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    java.lang.String[] var3 = var1.getHeaderComments();
    java.lang.String[] var4 = var1.getHeader();
    boolean var5 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var7 = var1.withNullString("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false");
    boolean var8 = var7.getIgnoreSurroundingSpaces();
    java.lang.Character var9 = var7.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var11 = var7.withRecordSeparator("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false");
    boolean var12 = var7.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test473");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    boolean var3 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('a');
    boolean var8 = var7.isNullStringSet();
    org.apache.commons.csv.CSVFormat var10 = var7.withNullString("Delimiter=< > RecordSeparator=<4> SkipHeaderRecord:false");
    java.lang.String[] var11 = var7.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test474");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > CommentStart=<#> SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test475");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    boolean var6 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var7 = var3.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test476");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    boolean var4 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'4');
    boolean var7 = var1.isNullStringSet();
    java.lang.Character var8 = var1.getEscapeCharacter();
    java.lang.String var9 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var12 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var15 = var13.withAllowMissingColumnNames(true);
    boolean var16 = var13.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var13.withEscape('#');
    org.apache.commons.csv.CSVFormat var20 = var13.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var23 = var22.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var25 = var22.withNullString("");
    org.apache.commons.csv.CSVFormat var26 = var22.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var28 = var26.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var30 = var28.withSkipHeaderRecord(false);
    char var31 = var28.getDelimiter();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var34 = var33.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var36 = var33.withRecordSeparator("hi!");
    boolean var37 = var36.isCommentMarkerSet();
    java.lang.Character var38 = var36.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var40 = var36.withAllowMissingColumnNames(true);
    boolean var41 = var40.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var44 = var43.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var45 = var43.withSkipHeaderRecord();
    java.lang.String var46 = var45.toString();
    org.apache.commons.csv.CSVFormat var48 = var45.withNullString("");
    org.apache.commons.csv.CSVFormat var50 = var48.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var53 = var52.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var54 = var52.withSkipHeaderRecord();
    boolean var55 = var52.isCommentMarkerSet();
    boolean var56 = var52.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var58 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var59 = var58.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var61 = var58.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var63 = var58.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var64 = var63.withIgnoreSurroundingSpaces();
    java.lang.Object[] var65 = new java.lang.Object[] { var63};
    java.lang.String var66 = var52.format(var65);
    java.lang.String[] var68 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var69 = var52.withHeader(var68);
    org.apache.commons.csv.CSVFormat var70 = var48.withHeader(var68);
    java.lang.String var71 = var40.format((java.lang.Object[])var68);
    java.lang.String var72 = var28.format((java.lang.Object[])var68);
    org.apache.commons.csv.CSVFormat var73 = var20.withHeaderComments((java.lang.Object[])var68);
    org.apache.commons.csv.CSVFormat var74 = var1.withHeaderComments((java.lang.Object[])var68);
    java.lang.Character var75 = var1.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var46.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var66.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Default Excel MySQL RFC4180 TDFhi!"+ "'", var71.equals("Default Excel MySQL RFC4180 TDFhi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "Default Excel MySQL RFC4180 TDF#"+ "'", var72.equals("Default Excel MySQL RFC4180 TDF#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test477");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    org.apache.commons.csv.CSVFormat var4 = var1.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var10.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var13 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var16 = var15.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var18 = var15.withNullString("");
    org.apache.commons.csv.CSVFormat var19 = var15.withIgnoreEmptyLines();
    java.lang.String[] var20 = var19.getHeaderComments();
    org.apache.commons.csv.CSVFormat var22 = var19.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var24 = var19.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var25 = var24.getQuoteMode();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var28 = var27.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var31 = var29.withAllowMissingColumnNames(true);
    java.lang.String var32 = var31.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var35 = var34.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var37 = var34.withNullString("");
    org.apache.commons.csv.CSVFormat var38 = var34.withIgnoreEmptyLines();
    java.lang.String var39 = var38.toString();
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var42 = var41.withAllowMissingColumnNames();
    boolean var43 = var41.isNullStringSet();
    java.lang.String[] var45 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var46 = var41.withHeader(var45);
    org.apache.commons.csv.CSVFormat var47 = var38.withHeader(var45);
    java.lang.String var48 = var31.format((java.lang.Object[])var45);
    org.apache.commons.csv.CSVFormat var49 = var24.withHeader(var45);
    java.lang.String var50 = var10.format((java.lang.Object[])var45);
    org.apache.commons.csv.CSVFormat var51 = var6.withHeader(var45);
    java.lang.Character var52 = var51.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"+ "'", var39.equals("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + ""+ "'", var50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + '4'+ "'", var52.equals('4'));

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test478");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var2 = var1.isCommentMarkerSet();
    boolean var3 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var5 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('a');
    boolean var8 = var7.isNullStringSet();
    org.apache.commons.csv.CSVFormat var10 = var7.withNullString("Delimiter=< > RecordSeparator=<4> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var7.withRecordSeparator("ALL MINIMAL NON_NUMERIC NONEDelimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var15 = var14.getDelimiter();
    java.lang.String var16 = var14.getNullString();
    boolean var17 = var14.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var14.withNullString("");
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var23 = var22.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord();
    boolean var25 = var22.isCommentMarkerSet();
    boolean var26 = var22.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var29 = var28.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var31 = var28.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var33 = var28.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var34 = var33.withIgnoreSurroundingSpaces();
    java.lang.Object[] var35 = new java.lang.Object[] { var33};
    java.lang.String var36 = var22.format(var35);
    java.lang.String[] var38 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var39 = var22.withHeader(var38);
    org.apache.commons.csv.CSVFormat var40 = var14.withHeaderComments((java.lang.Object[])var38);
    org.apache.commons.csv.CSVFormat var41 = var7.withHeaderComments((java.lang.Object[])var38);
    org.apache.commons.csv.CSVFormat var43 = var41.withNullString("Delimiter=< > Escape=<a> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var36.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test479");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    java.lang.String var4 = var3.toString();
    org.apache.commons.csv.CSVFormat var6 = var3.withNullString("");
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withNullString("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var3.withRecordSeparator(' ');
    java.lang.String var13 = var12.toString();
    org.apache.commons.csv.CSVFormat var15 = var12.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var17 = var15.withEscape('4');
    boolean var18 = var17.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var4.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"+ "'", var13.equals("Delimiter=< > RecordSeparator=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test480");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    java.lang.String var7 = var1.getNullString();
    java.lang.Character var8 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var1.withQuote((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test481");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var11 = var7.withQuote('4');
    org.apache.commons.csv.CSVFormat var13 = var7.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var15 = var7.withEscape('4');
    java.lang.Character var16 = var7.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test482");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    java.lang.String[] var7 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var8 = var1.withHeader(var7);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    boolean var13 = var10.isCommentMarkerSet();
    boolean var14 = var10.getIgnoreHeaderCase();
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var10.withHeader(var16);
    org.apache.commons.csv.CSVFormat var18 = var1.withHeader(var16);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces(true);
    java.lang.Character var21 = var18.getCommentMarker();
    org.apache.commons.csv.CSVFormat var23 = var18.withCommentMarker('#');
    boolean var24 = var23.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test483");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var11 = var9.withEscape('4');
    boolean var12 = var9.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var14 = var9.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var16 = var14.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test484");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.String[] var7 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    boolean var12 = var9.isCommentMarkerSet();
    boolean var13 = var9.getIgnoreHeaderCase();
    java.lang.String[] var15 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var16 = var9.withHeader(var15);
    org.apache.commons.csv.CSVFormat var17 = var1.withHeader(var15);
    org.apache.commons.csv.CSVFormat var19 = var17.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var21 = var17.withEscape((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test485");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var5.isClosed();
    java.util.Map var7 = var5.getHeaderMap();
    var5.close();
    long var9 = var5.getCurrentLineNumber();
    java.util.Map var10 = var5.getHeaderMap();
    var5.close();
    var5.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test486");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator("#");
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("#", var2);
    boolean var6 = var2.isEscapeCharacterSet();
    char var7 = var2.getDelimiter();
    org.apache.commons.csv.CSVFormat var8 = var2.withAllowMissingColumnNames();
    boolean var9 = var2.getIgnoreEmptyLines();
    char var10 = var2.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == '#');

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test487");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.String var6 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreEmptyLines(false);
    java.lang.String[] var9 = var5.getHeader();
    char var10 = var5.getDelimiter();
    org.apache.commons.csv.CSVFormat var12 = var5.withQuote('#');
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord();
    boolean var19 = var16.isCommentMarkerSet();
    boolean var20 = var16.getIgnoreHeaderCase();
    java.lang.String[] var22 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var23 = var16.withHeader(var22);
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var26 = var25.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var27 = var25.withSkipHeaderRecord();
    boolean var28 = var25.isCommentMarkerSet();
    boolean var29 = var25.getIgnoreHeaderCase();
    java.lang.String[] var31 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var32 = var25.withHeader(var31);
    org.apache.commons.csv.CSVFormat var33 = var16.withHeader(var31);
    org.apache.commons.csv.CSVFormat var35 = var33.withIgnoreSurroundingSpaces(true);
    java.lang.Character var36 = var33.getCommentMarker();
    org.apache.commons.csv.CSVFormat var37 = var33.withIgnoreEmptyLines();
    java.lang.String[] var38 = var33.getHeader();
    org.apache.commons.csv.CSVFormat var39 = var14.withHeader(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test488");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreEmptyLines(true);
    char var10 = var7.getDelimiter();
    org.apache.commons.csv.CSVFormat var12 = var7.withSkipHeaderRecord(true);
    java.lang.String[] var13 = var7.getHeader();
    org.apache.commons.csv.CSVFormat var15 = var7.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var17 = var15.withNullString("Delimiter=< > SkipHeaderRecord:true");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test489");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    boolean var3 = var2.isCommentMarkerSet();
    boolean var4 = var2.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var2);
    boolean var6 = var2.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var2.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var10 = var2.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var11 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var2.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var16 = var15.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var18 = var15.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var20 = var15.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var21 = var20.getCommentMarker();
    org.apache.commons.csv.QuoteMode var22 = var20.getQuoteMode();
    org.apache.commons.csv.CSVFormat var24 = var20.withEscape((java.lang.Character)'a');
    boolean var25 = var24.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var27 = var24.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var31 = var30.withIgnoreSurroundingSpaces();
    java.lang.Character var32 = var30.getCommentMarker();
    org.apache.commons.csv.CSVParser var33 = org.apache.commons.csv.CSVParser.parse("hi!", var30);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var36 = var35.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var37 = var35.withSkipHeaderRecord();
    java.lang.String var38 = var37.toString();
    java.lang.String[] var39 = var37.getHeader();
    org.apache.commons.csv.CSVFormat var40 = var37.withAllowMissingColumnNames();
    java.lang.String[] var41 = var40.getHeaderComments();
    org.apache.commons.csv.CSVFormat var43 = var40.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var46 = var45.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var47 = var45.withSkipHeaderRecord();
    java.lang.String var48 = var47.toString();
    org.apache.commons.csv.CSVFormat var50 = var47.withNullString("");
    org.apache.commons.csv.CSVFormat var52 = var50.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var54 = var52.withQuote('#');
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var57 = var56.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord();
    boolean var59 = var56.isCommentMarkerSet();
    boolean var60 = var56.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var62 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var63 = var62.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var65 = var62.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var67 = var62.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var68 = var67.withIgnoreSurroundingSpaces();
    java.lang.Object[] var69 = new java.lang.Object[] { var67};
    java.lang.String var70 = var56.format(var69);
    java.lang.String var71 = var52.format(var69);
    org.apache.commons.csv.CSVFormat var72 = var43.withHeaderComments(var69);
    org.apache.commons.csv.CSVFormat var73 = var30.withHeaderComments(var69);
    org.apache.commons.csv.CSVFormat var74 = var24.withHeaderComments(var69);
    java.lang.String var75 = var2.format(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var38.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var48.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var70.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"+ "'", var71.equals("Delimiter=<4 >4 NullString=<Delimiter=<4 >4 SkipHeaderRecord:true>4 SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var75.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test490");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withQuote((java.lang.Character)'a');
    java.lang.Character var9 = var8.getQuoteCharacter();
    boolean var10 = var8.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 'a'+ "'", var9.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test491");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    java.lang.String[] var5 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var6 = var1.withHeader(var5);
    org.apache.commons.csv.CSVFormat var7 = var1.withSkipHeaderRecord();
    boolean var8 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var1.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var11 = var1.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test492");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    boolean var16 = var14.isNullStringSet();
    java.lang.String[] var18 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var19 = var14.withHeader(var18);
    org.apache.commons.csv.QuoteMode var20 = var19.getQuoteMode();
    org.apache.commons.csv.CSVFormat var22 = var19.withIgnoreEmptyLines(false);
    java.lang.String var23 = var22.toString();
    java.lang.Character var24 = var22.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var26 = var22.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var29 = var28.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var31 = var28.withCommentMarker('#');
    java.lang.String[] var32 = var28.getHeaderComments();
    org.apache.commons.csv.CSVFormat var34 = var28.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var37 = var36.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord();
    boolean var39 = var36.isCommentMarkerSet();
    boolean var40 = var36.getIgnoreHeaderCase();
    java.lang.String[] var42 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var43 = var36.withHeader(var42);
    org.apache.commons.csv.CSVFormat var44 = var28.withHeader(var42);
    org.apache.commons.csv.CSVFormat var45 = var22.withHeader(var42);
    org.apache.commons.csv.CSVFormat var46 = var5.withHeader(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Delimiter=< > SkipHeaderRecord:false Header:[]"+ "'", var23.equals("Delimiter=< > SkipHeaderRecord:false Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test493");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    java.lang.String[] var6 = var5.getHeaderComments();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("Default Excel MySQL RFC4180 TDF");
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker((java.lang.Character)'4');
    boolean var16 = var15.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var15.withRecordSeparator("ALL MINIMAL NON_NUMERIC NONEDelimiter=< > SkipHeaderRecord:true");
    boolean var19 = var15.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test494");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    char var2 = var1.getDelimiter();
    org.apache.commons.csv.CSVFormat var3 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    java.lang.Character var5 = var4.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    boolean var9 = var7.isNullStringSet();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var7.withHeader(var11);
    org.apache.commons.csv.QuoteMode var13 = var12.getQuoteMode();
    org.apache.commons.csv.CSVFormat var15 = var12.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var16 = var12.withSkipHeaderRecord();
    boolean var17 = var16.isEscapeCharacterSet();
    java.lang.String var18 = var16.toString();
    org.apache.commons.csv.CSVFormat var20 = var16.withDelimiter('4');
    java.lang.String[] var21 = var20.getHeader();
    org.apache.commons.csv.CSVFormat var22 = var4.withHeaderComments((java.lang.Object[])var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Delimiter=< > SkipHeaderRecord:true Header:[]"+ "'", var18.equals("Delimiter=< > SkipHeaderRecord:true Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test495");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreSurroundingSpaces();
    java.lang.Character var3 = var1.getCommentMarker();
    org.apache.commons.csv.CSVFormat var4 = var1.withAllowMissingColumnNames();
    boolean var5 = var4.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test496");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces(true);
    char var6 = var3.getDelimiter();
    org.apache.commons.csv.CSVFormat var8 = var3.withEscape((java.lang.Character)'4');
    boolean var9 = var3.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var11 = var3.withQuote((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test497");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var3 = var1.withSkipHeaderRecord();
    boolean var4 = var1.isCommentMarkerSet();
    java.lang.Character var5 = var1.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var13 = var6.withRecordSeparator("Delimiter=< > EmptyLines:ignored SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test498");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test499");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=< > QuoteChar=<#> NullString=<Delimiter=< > QuoteChar=<#> NullString=<Delimiter=< > SkipHeaderRecord:true> SurroundingSpaces:ignored SkipHeaderRecord:false> SurroundingSpaces:ignored SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test500");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var2 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var1.withNullString("Delimiter=< > SkipHeaderRecord:true");
    java.lang.Character var7 = var6.getCommentMarker();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var10 = var9.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var12 = var9.withCommentMarker('#');
    java.lang.String[] var13 = var9.getHeaderComments();
    org.apache.commons.csv.CSVFormat var15 = var9.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord();
    boolean var20 = var17.isCommentMarkerSet();
    boolean var21 = var17.getIgnoreHeaderCase();
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=< > SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var17.withHeader(var23);
    org.apache.commons.csv.CSVFormat var25 = var9.withHeader(var23);
    java.lang.String[] var26 = var9.getHeaderComments();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var29 = var28.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var30 = var28.withSkipHeaderRecord();
    java.lang.String var31 = var30.toString();
    java.lang.String[] var32 = var30.getHeader();
    org.apache.commons.csv.CSVFormat var33 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var36 = var35.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var37 = var35.withSkipHeaderRecord();
    java.lang.String var38 = var37.toString();
    org.apache.commons.csv.CSVFormat var40 = var37.withNullString("");
    org.apache.commons.csv.CSVFormat var42 = var40.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var45 = var44.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var46 = var44.withSkipHeaderRecord();
    boolean var47 = var44.isCommentMarkerSet();
    boolean var48 = var44.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    java.lang.String var51 = var50.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var53 = var50.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var55 = var50.withNullString("Delimiter=< > SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var56 = var55.withIgnoreSurroundingSpaces();
    java.lang.Object[] var57 = new java.lang.Object[] { var55};
    java.lang.String var58 = var44.format(var57);
    java.lang.String[] var60 = new java.lang.String[] { "Default Excel MySQL RFC4180 TDF"};
    org.apache.commons.csv.CSVFormat var61 = var44.withHeader(var60);
    org.apache.commons.csv.CSVFormat var62 = var40.withHeader(var60);
    java.lang.String var63 = var33.format((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var64 = var9.withHeader(var60);
    org.apache.commons.csv.CSVFormat var65 = var6.withHeaderComments((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var67 = var65.withDelimiter('a');
    java.lang.String var68 = var65.toString();
    org.apache.commons.csv.CSVFormat var69 = var65.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var31.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=< > SkipHeaderRecord:true"+ "'", var38.equals("Delimiter=< > SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var58.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Default Excel MySQL RFC4180 TDF"+ "'", var63.equals("Default Excel MySQL RFC4180 TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false HeaderComments:[Default Excel MySQL RFC4180 TDF]"+ "'", var68.equals("Delimiter=< > NullString=<Delimiter=< > SkipHeaderRecord:true> SkipHeaderRecord:false HeaderComments:[Default Excel MySQL RFC4180 TDF]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

}
